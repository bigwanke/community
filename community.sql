--
-- PostgreSQL database cluster dump
--

SET default_transaction_read_only = off;

SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;

--
-- Roles
--

CREATE ROLE community;
ALTER ROLE community WITH SUPERUSER INHERIT CREATEROLE CREATEDB LOGIN REPLICATION BYPASSRLS PASSWORD 'md5e9cef08c404a9ac3d1c15a4b49cd7fa5';






--
-- Databases
--

--
-- Database "template1" dump
--

\connect template1

--
-- PostgreSQL database dump
--

-- Dumped from database version 13.1 (Debian 13.1-1.pgdg100+1)
-- Dumped by pg_dump version 13.1 (Debian 13.1-1.pgdg100+1)

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

--
-- PostgreSQL database dump complete
--

--
-- Database "community" dump
--

--
-- PostgreSQL database dump
--

-- Dumped from database version 13.1 (Debian 13.1-1.pgdg100+1)
-- Dumped by pg_dump version 13.1 (Debian 13.1-1.pgdg100+1)

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

--
-- Name: community; Type: DATABASE; Schema: -; Owner: community
--

CREATE DATABASE community WITH TEMPLATE = template0 ENCODING = 'UTF8' LOCALE = 'en_US.utf8';


ALTER DATABASE community OWNER TO community;

\connect community

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- Name: blog; Type: TABLE; Schema: public; Owner: community
--

CREATE TABLE public.blog (
    id integer NOT NULL,
    title character varying(254) NOT NULL,
    tags character varying(254)[] NOT NULL,
    content_markdown text NOT NULL,
    content_html text NOT NULL,
    read_count integer NOT NULL,
    vote_count integer NOT NULL,
    reply_count integer NOT NULL,
    deleted boolean NOT NULL,
    create_time timestamp without time zone NOT NULL,
    update_time timestamp without time zone NOT NULL,
    user_id integer NOT NULL,
    cover_image character varying(254) NOT NULL,
    description text
);


ALTER TABLE public.blog OWNER TO community;

--
-- Name: blog_id_seq; Type: SEQUENCE; Schema: public; Owner: community
--

CREATE SEQUENCE public.blog_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.blog_id_seq OWNER TO community;

--
-- Name: blog_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: community
--

ALTER SEQUENCE public.blog_id_seq OWNED BY public.blog.id;


--
-- Name: blog_reply; Type: TABLE; Schema: public; Owner: community
--

CREATE TABLE public.blog_reply (
    id integer NOT NULL,
    content_markdown text NOT NULL,
    content_html text NOT NULL,
    parent_id integer NOT NULL,
    vote_count integer NOT NULL,
    deleted boolean NOT NULL,
    create_time timestamp without time zone NOT NULL,
    update_time timestamp without time zone NOT NULL,
    user_id integer NOT NULL,
    blog_id integer NOT NULL
);


ALTER TABLE public.blog_reply OWNER TO community;

--
-- Name: blog_reply_id_seq; Type: SEQUENCE; Schema: public; Owner: community
--

CREATE SEQUENCE public.blog_reply_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.blog_reply_id_seq OWNER TO community;

--
-- Name: blog_reply_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: community
--

ALTER SEQUENCE public.blog_reply_id_seq OWNED BY public.blog_reply.id;


--
-- Name: blog_vote; Type: TABLE; Schema: public; Owner: community
--

CREATE TABLE public.blog_vote (
    id integer NOT NULL,
    blog_id integer NOT NULL,
    reply_id integer NOT NULL,
    is_up boolean NOT NULL,
    deleted boolean NOT NULL,
    create_time timestamp without time zone NOT NULL,
    update_time timestamp without time zone NOT NULL,
    user_id integer NOT NULL
);


ALTER TABLE public.blog_vote OWNER TO community;

--
-- Name: blog_vote_id_seq; Type: SEQUENCE; Schema: public; Owner: community
--

CREATE SEQUENCE public.blog_vote_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.blog_vote_id_seq OWNER TO community;

--
-- Name: blog_vote_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: community
--

ALTER SEQUENCE public.blog_vote_id_seq OWNED BY public.blog_vote.id;


--
-- Name: discussion; Type: TABLE; Schema: public; Owner: community
--

CREATE TABLE public.discussion (
    read_count integer NOT NULL,
    vote_count integer NOT NULL,
    reply_count integer NOT NULL,
    deleted boolean NOT NULL,
    update_time timestamp without time zone NOT NULL,
    user_id integer NOT NULL,
    id integer NOT NULL,
    create_time timestamp without time zone NOT NULL,
    title character varying(254) NOT NULL,
    description text,
    content_markdown text NOT NULL,
    content_html text NOT NULL,
    last_reply_id integer
);


ALTER TABLE public.discussion OWNER TO community;

--
-- Name: discussion_id_seq; Type: SEQUENCE; Schema: public; Owner: community
--

CREATE SEQUENCE public.discussion_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.discussion_id_seq OWNER TO community;

--
-- Name: discussion_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: community
--

ALTER SEQUENCE public.discussion_id_seq OWNED BY public.discussion.id;


--
-- Name: discussion_reply; Type: TABLE; Schema: public; Owner: community
--

CREATE TABLE public.discussion_reply (
    id integer NOT NULL,
    content_html text NOT NULL,
    content_markdown text NOT NULL,
    parent_id integer NOT NULL,
    vote_count integer NOT NULL,
    deleted boolean NOT NULL,
    create_time timestamp without time zone NOT NULL,
    update_time timestamp without time zone NOT NULL,
    user_id integer NOT NULL,
    discussion_id integer NOT NULL
);


ALTER TABLE public.discussion_reply OWNER TO community;

--
-- Name: discussion_reply_id_seq; Type: SEQUENCE; Schema: public; Owner: community
--

CREATE SEQUENCE public.discussion_reply_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.discussion_reply_id_seq OWNER TO community;

--
-- Name: discussion_reply_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: community
--

ALTER SEQUENCE public.discussion_reply_id_seq OWNED BY public.discussion_reply.id;


--
-- Name: discussion_vote; Type: TABLE; Schema: public; Owner: community
--

CREATE TABLE public.discussion_vote (
    id integer NOT NULL,
    discussion_id integer NOT NULL,
    reply_id integer NOT NULL,
    is_up boolean NOT NULL,
    create_time timestamp without time zone NOT NULL,
    update_time timestamp without time zone NOT NULL,
    user_id integer NOT NULL,
    deleted boolean
);


ALTER TABLE public.discussion_vote OWNER TO community;

--
-- Name: discussion_vote_id_seq; Type: SEQUENCE; Schema: public; Owner: community
--

CREATE SEQUENCE public.discussion_vote_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.discussion_vote_id_seq OWNER TO community;

--
-- Name: discussion_vote_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: community
--

ALTER SEQUENCE public.discussion_vote_id_seq OWNED BY public.discussion_vote.id;


--
-- Name: problem; Type: TABLE; Schema: public; Owner: community
--

CREATE TABLE public.problem (
    id integer NOT NULL,
    title character varying(254) NOT NULL,
    tags character varying(254)[] NOT NULL,
    content_markdown text NOT NULL,
    content_html text NOT NULL,
    read_count integer NOT NULL,
    vote_count integer NOT NULL,
    answer_count integer NOT NULL,
    is_solved boolean NOT NULL,
    deleted boolean NOT NULL,
    create_time timestamp without time zone NOT NULL,
    update_time timestamp without time zone NOT NULL,
    user_id integer NOT NULL
);


ALTER TABLE public.problem OWNER TO community;

--
-- Name: problem_answer; Type: TABLE; Schema: public; Owner: community
--

CREATE TABLE public.problem_answer (
    id integer NOT NULL,
    content_markdown text NOT NULL,
    content_html text NOT NULL,
    vote_count integer NOT NULL,
    is_accept boolean NOT NULL,
    deleted boolean NOT NULL,
    create_time timestamp without time zone NOT NULL,
    update_time timestamp without time zone NOT NULL,
    user_id integer NOT NULL,
    problem_id integer NOT NULL
);


ALTER TABLE public.problem_answer OWNER TO community;

--
-- Name: problem_answer_id_seq; Type: SEQUENCE; Schema: public; Owner: community
--

CREATE SEQUENCE public.problem_answer_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.problem_answer_id_seq OWNER TO community;

--
-- Name: problem_answer_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: community
--

ALTER SEQUENCE public.problem_answer_id_seq OWNED BY public.problem_answer.id;


--
-- Name: problem_id_seq; Type: SEQUENCE; Schema: public; Owner: community
--

CREATE SEQUENCE public.problem_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.problem_id_seq OWNER TO community;

--
-- Name: problem_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: community
--

ALTER SEQUENCE public.problem_id_seq OWNED BY public.problem.id;


--
-- Name: problem_vote; Type: TABLE; Schema: public; Owner: community
--

CREATE TABLE public.problem_vote (
    id integer NOT NULL,
    problem_id integer NOT NULL,
    answer_id integer NOT NULL,
    is_up boolean NOT NULL,
    deleted boolean NOT NULL,
    create_time timestamp without time zone NOT NULL,
    update_time timestamp without time zone NOT NULL,
    user_id integer NOT NULL
);


ALTER TABLE public.problem_vote OWNER TO community;

--
-- Name: problem_vote_id_seq; Type: SEQUENCE; Schema: public; Owner: community
--

CREATE SEQUENCE public.problem_vote_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.problem_vote_id_seq OWNER TO community;

--
-- Name: problem_vote_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: community
--

ALTER SEQUENCE public.problem_vote_id_seq OWNED BY public.problem_vote.id;


--
-- Name: share; Type: TABLE; Schema: public; Owner: community
--

CREATE TABLE public.share (
    id integer NOT NULL,
    content_html text NOT NULL,
    content_markdown text NOT NULL,
    read_count integer NOT NULL,
    vote_count integer NOT NULL,
    reply_count integer NOT NULL,
    deleted boolean NOT NULL,
    create_time timestamp without time zone NOT NULL,
    update_time timestamp without time zone NOT NULL,
    user_id integer NOT NULL,
    description text
);


ALTER TABLE public.share OWNER TO community;

--
-- Name: share_id_seq; Type: SEQUENCE; Schema: public; Owner: community
--

CREATE SEQUENCE public.share_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.share_id_seq OWNER TO community;

--
-- Name: share_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: community
--

ALTER SEQUENCE public.share_id_seq OWNED BY public.share.id;


--
-- Name: share_reply; Type: TABLE; Schema: public; Owner: community
--

CREATE TABLE public.share_reply (
    id integer DEFAULT nextval('public.blog_id_seq'::regclass) NOT NULL,
    content_markdown text NOT NULL,
    content_html text NOT NULL,
    parent_id integer NOT NULL,
    vote_count integer NOT NULL,
    deleted boolean NOT NULL,
    create_time timestamp without time zone NOT NULL,
    update_time timestamp without time zone NOT NULL,
    user_id integer NOT NULL,
    share_id integer NOT NULL
);


ALTER TABLE public.share_reply OWNER TO community;

--
-- Name: share_vote; Type: TABLE; Schema: public; Owner: community
--

CREATE TABLE public.share_vote (
    id integer NOT NULL,
    share_id integer NOT NULL,
    reply_id integer NOT NULL,
    create_time timestamp without time zone NOT NULL,
    user_id integer NOT NULL,
    is_up boolean NOT NULL,
    deleted boolean NOT NULL,
    update_time timestamp without time zone NOT NULL
);


ALTER TABLE public.share_vote OWNER TO community;

--
-- Name: share_vote_id_seq; Type: SEQUENCE; Schema: public; Owner: community
--

CREATE SEQUENCE public.share_vote_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.share_vote_id_seq OWNER TO community;

--
-- Name: share_vote_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: community
--

ALTER SEQUENCE public.share_vote_id_seq OWNED BY public.share_vote.id;


--
-- Name: user; Type: TABLE; Schema: public; Owner: community
--

CREATE TABLE public."user" (
    id integer NOT NULL,
    username character varying(32) NOT NULL,
    password character(60) NOT NULL,
    email character varying(254) NOT NULL,
    email_active boolean NOT NULL,
    is_admin boolean NOT NULL,
    deleted boolean NOT NULL,
    create_time timestamp without time zone NOT NULL,
    update_time timestamp without time zone NOT NULL
);


ALTER TABLE public."user" OWNER TO community;

--
-- Name: user_id_seq; Type: SEQUENCE; Schema: public; Owner: community
--

CREATE SEQUENCE public.user_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.user_id_seq OWNER TO community;

--
-- Name: user_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: community
--

ALTER SEQUENCE public.user_id_seq OWNED BY public."user".id;


--
-- Name: user_profile; Type: TABLE; Schema: public; Owner: community
--

CREATE TABLE public.user_profile (
    id integer NOT NULL,
    introduction text,
    avatar text,
    deleted boolean NOT NULL,
    create_time timestamp without time zone NOT NULL,
    update_time timestamp without time zone NOT NULL,
    user_id integer NOT NULL
);


ALTER TABLE public.user_profile OWNER TO community;

--
-- Name: user_profile_id_seq; Type: SEQUENCE; Schema: public; Owner: community
--

CREATE SEQUENCE public.user_profile_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.user_profile_id_seq OWNER TO community;

--
-- Name: user_profile_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: community
--

ALTER SEQUENCE public.user_profile_id_seq OWNED BY public.user_profile.id;


--
-- Name: blog id; Type: DEFAULT; Schema: public; Owner: community
--

ALTER TABLE ONLY public.blog ALTER COLUMN id SET DEFAULT nextval('public.blog_id_seq'::regclass);


--
-- Name: blog_reply id; Type: DEFAULT; Schema: public; Owner: community
--

ALTER TABLE ONLY public.blog_reply ALTER COLUMN id SET DEFAULT nextval('public.blog_reply_id_seq'::regclass);


--
-- Name: blog_vote id; Type: DEFAULT; Schema: public; Owner: community
--

ALTER TABLE ONLY public.blog_vote ALTER COLUMN id SET DEFAULT nextval('public.blog_vote_id_seq'::regclass);


--
-- Name: discussion id; Type: DEFAULT; Schema: public; Owner: community
--

ALTER TABLE ONLY public.discussion ALTER COLUMN id SET DEFAULT nextval('public.discussion_id_seq'::regclass);


--
-- Name: discussion_reply id; Type: DEFAULT; Schema: public; Owner: community
--

ALTER TABLE ONLY public.discussion_reply ALTER COLUMN id SET DEFAULT nextval('public.discussion_reply_id_seq'::regclass);


--
-- Name: discussion_vote id; Type: DEFAULT; Schema: public; Owner: community
--

ALTER TABLE ONLY public.discussion_vote ALTER COLUMN id SET DEFAULT nextval('public.discussion_vote_id_seq'::regclass);


--
-- Name: problem id; Type: DEFAULT; Schema: public; Owner: community
--

ALTER TABLE ONLY public.problem ALTER COLUMN id SET DEFAULT nextval('public.problem_id_seq'::regclass);


--
-- Name: problem_answer id; Type: DEFAULT; Schema: public; Owner: community
--

ALTER TABLE ONLY public.problem_answer ALTER COLUMN id SET DEFAULT nextval('public.problem_answer_id_seq'::regclass);


--
-- Name: problem_vote id; Type: DEFAULT; Schema: public; Owner: community
--

ALTER TABLE ONLY public.problem_vote ALTER COLUMN id SET DEFAULT nextval('public.problem_vote_id_seq'::regclass);


--
-- Name: share id; Type: DEFAULT; Schema: public; Owner: community
--

ALTER TABLE ONLY public.share ALTER COLUMN id SET DEFAULT nextval('public.share_id_seq'::regclass);


--
-- Name: share_vote id; Type: DEFAULT; Schema: public; Owner: community
--

ALTER TABLE ONLY public.share_vote ALTER COLUMN id SET DEFAULT nextval('public.share_vote_id_seq'::regclass);


--
-- Name: user id; Type: DEFAULT; Schema: public; Owner: community
--

ALTER TABLE ONLY public."user" ALTER COLUMN id SET DEFAULT nextval('public.user_id_seq'::regclass);


--
-- Name: user_profile id; Type: DEFAULT; Schema: public; Owner: community
--

ALTER TABLE ONLY public.user_profile ALTER COLUMN id SET DEFAULT nextval('public.user_profile_id_seq'::regclass);


--
-- Data for Name: blog; Type: TABLE DATA; Schema: public; Owner: community
--

COPY public.blog (id, title, tags, content_markdown, content_html, read_count, vote_count, reply_count, deleted, create_time, update_time, user_id, cover_image, description) FROM stdin;
10	Java	{java}	#Java\r\nJava技术分类\r\nJava SE ---- 标准版\r\nJava EE ---- 企业版 网络开发\r\nJava ME ---- 移动版 已淘汰 诺基亚的塞班系统\r\n\r\nJava语言的特点\r\n①面向对象\r\n语言的发展始终都是朝着人类容易理解的方向在发展\r\n②跨平台\r\njvm ---- Java的虚拟机，它是Java程序运行的基础平台\r\njre ---- Java运行环境，它包含了jvm，还包含程序运行所必须的一些代码\r\njdk ---- Java开发环境，它包含了jre，还包含一些编译和运行的工具\r\n③健壮性\r\n垃圾回收器GC ---- 它是一个低级别的线程，它在cpu不怎么繁忙的时候出来工作，检查内存中有没有垃圾，如果有，就释放.\r\n\r\n--配置环境变量\r\n    1.新增：JAVA_HOME\r\n    值：jdk安装的根目录（注意：如果这个文件夹下有bin文件夹，那么这个文件夹就是jdk根目录）\r\n    2.修改变量：Path\r\n    在Path中追加：%JAVA_HOME%\\bin\r\n    3.新增变量：CLASSPATH\r\n    值：.,%JAVA_HOME%\\lib\r\n\r\n1.Java第一步\r\n打开编译文本notepad++，输入代码：\r\n```java\r\nclass hello{\r\n\tpublic static void main(String[] args){\r\n\t\tSystem.out.println(&quot;Hello World!&quot;)\r\n\t}\r\n}\r\n```\r\n保存为hello.java 文件\r\n然后打开命令行，进行保存文件的路径，输入javac hello.java\r\n然后文件旁边会生成一个后缀为class的文件，然后再命令行输入java hello\r\nHello World！就打印出来了。\r\n\r\n&gt;关于cmd窗口的常用命令\r\ne： ----- 直接进入e盘根目录 （盘符：可以进入指定盘符）\r\ndir ----- 查看当前文件夹下的所有内容\r\ncd 路径 ----- 进入到指定的文件夹\r\ncd.. ----- 返回上层目录\r\nmd ----- 创建文件夹\r\n\r\n&gt;在cmd窗口下编译运行java程序的命令\r\n首先进入java原文件所在目录\r\njavac 文件名.java ----- 将原文件编译出字节码文件\r\njava 类名 ----- 执行该java类\r\n\r\n2.在java中，使用class关键字来定义一个类\r\n格式：\r\nclass 类名{\r\n}\r\n注意：类名首字母大写，当前文件的文件名于类名一致\r\n\r\n3.所有的程序都是从main方法作为入口开始执行的（注意：方法就是函数的意思），main的固定格式：\r\npublic static void main(String[] args){}\r\n\r\n&gt;在java中严格区分大小写，每一行代码都必须以;结尾\r\n\r\n4.打印语句的固定格式：\r\nSystem.out.println(字符串);\r\n注意：println方法是打印并换行\r\n\r\n5.注释\r\n以/*开头，以*/结尾，可以注释一端代码\r\n//可以注释一行代码\r\n\r\n6.java中的8种基本数据类型\r\n整型：byte short int long\r\n&gt;取值范围：\r\nbyte ----- -2^7到2^7-1\r\nshort ----- -2^15到2^15-1\r\nint ----- -2^31到2^31-1\r\nlong ----- -2^63到2^63-1\r\n\r\n浮点型：float double \r\n&gt;取值范围：\r\nfloat ----- -2^128到2^127\r\ndouble ------ -2^1024到2^1023\r\n注意：所有的整数，默认类型是int，所有的浮点数，默认类型是double\r\n\r\n字符型：char\r\n&gt;char ----- 表示一个unicode编码中的单个符号，我们使用一对单引号，来表示其中一个字符\r\n注意：如果需要存放多个字符，则使用字符串类型String，它使用一对双引号包着若干个字符\r\n注意：\\在java中有特殊的含义，这叫转义字符\r\n\\u可以加四位的十六进制数表示该数对应unicode编码中的某个字符\r\n\\n表示一个换行符\r\n\\t表示一个缩进符\r\n\r\n布尔型：boolean\r\n&gt;boolean ----- 它只有两个值true和false 表示正确和错误\r\n一般用来分支判断和循环语句中\r\n\r\n7.在java中，凡是自己起名字的地方称为“标识符”\r\n标识符命名规范\r\n①见名知意（建议使用单词）\r\n②变量名和方法名：首字母小写，后面每个单词首字母大写，其余字母小写（驼峰原则）\r\n③类名：首字母大写，后面每个单词首字母大写，其余字母小写\r\n④常量名：全大写\r\n⑤包名：全小写\r\n⑥所有的标识符都必须以字母数字下划线_和$构成，不能以数字开头\r\n⑦不能是java的关键字，但可以包含java关键字\r\n\r\n8.局部变量\r\n凡是定义在方法中的变量就是局部变量，局部变量的作用范围是它所定义的当前这一对大括号\r\n\r\n9.成员变量\r\n凡是定义在方法外面的变量就是成员变量\r\n所有的成员变量都有默认的初始化值：\r\n&gt;整型都是0\r\n浮点型是0.0\r\n字符型是空字符\r\n布尔型是false\r\n\r\n所有的局部变量必须手动赋初始化值，否则无法使用d\r\n\r\n10.自动类型转换\r\n1.不同类型的数值在相互运算的时候，会首先转为相同的类型然后再运算\r\n2.等号=作为一个赋值运算符，它会将其右边的值赋给左边的变量，如果左右两边类型不一致，也会发生类型转换\r\n注意：等号右边容量小的可以赋给等号左边容量大的变量\r\n3.容量小的数据类型会自动往容量大的数据类型转换\r\n4.在赋值运算符=的右边容量大的类型无法赋值给等号左边容量小的变量\r\n\r\n&gt;在自动转换的过程中：\r\nbyte short char 这三种类型并列最小\r\n他们之间相互运算统一转为int\r\n除此之外从小到大顺序如下：\r\nint long float double\r\n注意：boolean不会和其他七种类型相互运算\r\n注意：char型和其他基本数据类型运算时，是使用它背后的unicode编码来进行运算的\r\n\r\n11.强制类型转换\r\n容量大的数据往容量小的类型转换，只需要使用一对小括号(目标类型)，就可以完成强制类型转换\r\n\r\n12.String和其他数据类型只能使用+进行运算，+不是加法，而是拼接，首先将其他数据类型转为字符串，然后和当前字符串拼接，返回拼接后的字符串\r\n\r\n13.++和--\r\n++表示自增1\r\n--表示自减1\r\n++和--可以放在变量的前面或者后面，如果放到前面，则是先自增自减，然后使用，如果放到后面，则是先使用变量，然后再自增自减	<p>#Java<br>\nJava技术分类<br>\nJava SE ---- 标准版<br>\nJava EE ---- 企业版 网络开发<br>\nJava ME ---- 移动版 已淘汰 诺基亚的塞班系统</p>\n<p>Java语言的特点<br>\n①面向对象<br>\n语言的发展始终都是朝着人类容易理解的方向在发展<br>\n②跨平台<br>\njvm ---- Java的虚拟机，它是Java程序运行的基础平台<br>\njre ---- Java运行环境，它包含了jvm，还包含程序运行所必须的一些代码<br>\njdk ---- Java开发环境，它包含了jre，还包含一些编译和运行的工具<br>\n③健壮性<br>\n垃圾回收器GC ---- 它是一个低级别的线程，它在cpu不怎么繁忙的时候出来工作，检查内存中有没有垃圾，如果有，就释放.</p>\n<p>–配置环境变量<br>\n1.新增：JAVA_HOME<br>\n值：jdk安装的根目录（注意：如果这个文件夹下有bin文件夹，那么这个文件夹就是jdk根目录）<br>\n2.修改变量：Path<br>\n在Path中追加：%JAVA_HOME%\\bin<br>\n3.新增变量：CLASSPATH<br>\n值：.,%JAVA_HOME%\\lib</p>\n<p>1.Java第一步<br>\n打开编译文本notepad++，输入代码：</p>\n<pre class="code-block"><code class="code hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">hello</span></span>{<br />\t<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>{<br />\t\tSystem.out.println(&amp;quot;Hello World!&amp;quot;)<br />\t}<br />}<br /></code></pre>\n<p>保存为hello.java 文件<br>\n然后打开命令行，进行保存文件的路径，输入javac hello.java<br>\n然后文件旁边会生成一个后缀为class的文件，然后再命令行输入java hello<br>\nHello World！就打印出来了。</p>\n<p>&gt;关于cmd窗口的常用命令<br>\ne： ----- 直接进入e盘根目录 （盘符：可以进入指定盘符）<br>\ndir ----- 查看当前文件夹下的所有内容<br>\ncd 路径 ----- 进入到指定的文件夹<br>\ncd… ----- 返回上层目录<br>\nmd ----- 创建文件夹</p>\n<p>&gt;在cmd窗口下编译运行java程序的命令<br>\n首先进入java原文件所在目录<br>\njavac 文件名.java ----- 将原文件编译出字节码文件<br>\njava 类名 ----- 执行该java类</p>\n<p>2.在java中，使用class关键字来定义一个类<br>\n格式：<br>\nclass 类名{<br>\n}<br>\n注意：类名首字母大写，当前文件的文件名于类名一致</p>\n<p>3.所有的程序都是从main方法作为入口开始执行的（注意：方法就是函数的意思），main的固定格式：<br>\npublic static void main(String[] args){}</p>\n<p>&gt;在java中严格区分大小写，每一行代码都必须以;结尾</p>\n<p>4.打印语句的固定格式：<br>\nSystem.out.println(字符串);<br>\n注意：println方法是打印并换行</p>\n<p>5.注释<br>\n以/<em>开头，以</em>/结尾，可以注释一端代码<br>\n//可以注释一行代码</p>\n<p>6.java中的8种基本数据类型<br>\n整型：byte short int long<br>\n&gt;取值范围：<br>\nbyte ----- -2<sup>7到2</sup>7-1<br>\nshort ----- -2<sup>15到2</sup>15-1<br>\nint ----- -2<sup>31到2</sup>31-1<br>\nlong ----- -2<sup>63到2</sup>63-1</p>\n<p>浮点型：float double<br>\n&gt;取值范围：<br>\nfloat ----- -2<sup>128到2</sup>127<br>\ndouble ------ -2<sup>1024到2</sup>1023<br>\n注意：所有的整数，默认类型是int，所有的浮点数，默认类型是double</p>\n<p>字符型：char<br>\n&gt;char ----- 表示一个unicode编码中的单个符号，我们使用一对单引号，来表示其中一个字符<br>\n注意：如果需要存放多个字符，则使用字符串类型String，它使用一对双引号包着若干个字符<br>\n注意：\\在java中有特殊的含义，这叫转义字符<br>\n\\u可以加四位的十六进制数表示该数对应unicode编码中的某个字符<br>\n\\n表示一个换行符<br>\n\\t表示一个缩进符</p>\n<p>布尔型：boolean<br>\n&gt;boolean ----- 它只有两个值true和false 表示正确和错误<br>\n一般用来分支判断和循环语句中</p>\n<p>7.在java中，凡是自己起名字的地方称为“标识符”<br>\n标识符命名规范<br>\n①见名知意（建议使用单词）<br>\n②变量名和方法名：首字母小写，后面每个单词首字母大写，其余字母小写（驼峰原则）<br>\n③类名：首字母大写，后面每个单词首字母大写，其余字母小写<br>\n④常量名：全大写<br>\n⑤包名：全小写<br>\n⑥所有的标识符都必须以字母数字下划线_和$构成，不能以数字开头<br>\n⑦不能是java的关键字，但可以包含java关键字</p>\n<p>8.局部变量<br>\n凡是定义在方法中的变量就是局部变量，局部变量的作用范围是它所定义的当前这一对大括号</p>\n<p>9.成员变量<br>\n凡是定义在方法外面的变量就是成员变量<br>\n所有的成员变量都有默认的初始化值：<br>\n&gt;整型都是0<br>\n浮点型是0.0<br>\n字符型是空字符<br>\n布尔型是false</p>\n<p>所有的局部变量必须手动赋初始化值，否则无法使用d</p>\n<p>10.自动类型转换<br>\n1.不同类型的数值在相互运算的时候，会首先转为相同的类型然后再运算<br>\n2.等号=作为一个赋值运算符，它会将其右边的值赋给左边的变量，如果左右两边类型不一致，也会发生类型转换<br>\n注意：等号右边容量小的可以赋给等号左边容量大的变量<br>\n3.容量小的数据类型会自动往容量大的数据类型转换<br>\n4.在赋值运算符=的右边容量大的类型无法赋值给等号左边容量小的变量</p>\n<p>&gt;在自动转换的过程中：<br>\nbyte short char 这三种类型并列最小<br>\n他们之间相互运算统一转为int<br>\n除此之外从小到大顺序如下：<br>\nint long float double<br>\n注意：boolean不会和其他七种类型相互运算<br>\n注意：char型和其他基本数据类型运算时，是使用它背后的unicode编码来进行运算的</p>\n<p>11.强制类型转换<br>\n容量大的数据往容量小的类型转换，只需要使用一对小括号(目标类型)，就可以完成强制类型转换</p>\n<p>12.String和其他数据类型只能使用+进行运算，+不是加法，而是拼接，首先将其他数据类型转为字符串，然后和当前字符串拼接，返回拼接后的字符串</p>\n<p>13.++和–<br>\n++表示自增1<br>\n–表示自减1<br>\n++和–可以放在变量的前面或者后面，如果放到前面，则是先自增自减，然后使用，如果放到后面，则是先使用变量，然后再自增自减</p>\n	4	0	0	f	2021-04-22 22:36:25.051	2021-04-22 22:37:40.091871	3	https://cdn.zhoupb.com/image/generate/876904cfc6ce503d79a4fba0574ffde8.png	#JavaJava技术分类JavaSE----标准版JavaEE----企业版网络开发JavaME----移动版已淘汰诺基亚的塞班系统Java语言的特点①面向对象语言的发展始终都是朝着人类容易理解的方向在发展②跨平台jvm----Java的虚拟机，它是Java程序运行的基础平台jre----Java运行环境，它包含了jvm，还包含程序运行所必须的一些代码jdk----Java开发环境，它包含了jre，还包含一些编译和运行的工具③健壮性垃圾回收器GC----它是一个低级别的线程，它在cpu不怎么繁忙的时候出来工作，检查内存中有没有垃圾，如果有，就释放.–配置环境变量1.新增：JAVA_HOME值：jdk安装的根目录（注意：如果这个文件夹下有bin文件夹，那么这个文件夹就是jdk根目录）2.修改变量：Path在Path中追加：%JAVA_HOME%\\bin3.新增变量：CLASSPATH值：.,%JAVA_HOME%\\lib1.Java第一步打开编译文本notepad++，输入代码：classhello{publicstaticvoidmain(String[]args){System.out.println(&amp;quot;HelloWorld!&amp;quot;)}}保存为hello.java文件然后打开命令行，进行保存文件的路径，输入javachello.java然后文件旁边会生成一个后缀为class的文件，然后再命令行输入javahelloHelloWorld！就打印出来了。&gt;关于cmd窗口的常用命令e：-----直接进入e盘根目录（盘符：可以进入指定盘符）dir-----查看当前文件夹下的所有内容cd路径-----进入到指定的文件夹cd…-----返回上层目录md-----创建文件夹&gt;在cmd窗口下编译运行java程序的命令首先进入java原文件所在目录javac文件名.java-----将原文件编译出字节码文件java类名-----执行该java类2.在java中，使用class关键字来定义一个类格式：class类名{}注意：类名首字母大写，当前文件的文件名于类名一致3.所有的程序都是从main方法作为入口开始执行的（注意：方法就是函数的意思），main的固定格式：publicstaticvoidmain(String[]args){}&gt;在java中严格区分大小写，每一行代码都必须以;结尾4.打印语句的固定格式：System.out.println(字符串);注意：println方法是打印并换行5.注释以/开头，以/结尾，可以注释一端代码//可以注释一行代码6.java中的8种基本数据类型整型：byteshortintlong&gt;取值范围：byte------27到27-1short------215到215-1int------231到231-1long------263到263-1浮点型：floatdouble&gt;取值范围：float------2128到2127double-------21024到21023注意：所有的整数，默认类型是int，所有的浮点数，默认类型是double字符型：char&gt;char-----表示一个unicode编码中的单个符号，我们使用一对单引号，来表示其中一个字符注意：如果需要存放多个字符，则使用字符串类型String，它使用一对双引号包着若干个字符注意：\\在java中有特殊的含义，这叫转义字符\\u可以加四位的十六进制数表示该数对应unicode编码中的某个字符\\n表示一个换行符\\t表示一个缩进符布尔型：boolean&gt;boolean-----它只有两个值true和false表示正确和错误一般用来分支判断和循环语句中7.在java中，凡是自己起名字的地方称为“标识符”标识符命名规范①见名知意（建议使用单词）②变量名和方法名：首字母小写，后面每个单词首字母大写，其余字母小写（驼峰原则）③类名：首字母大写，后面每个单词首字母大写，其余字母小写④常量名：全大写⑤包名：全小写⑥所有的标识符都必须以字母数字下划线_和$构成，不能以数字开头⑦不能是java的关键字，但可以包含java关键字8.局部变量凡是定义在方法中的变量就是局部变量，局部变量的作用范围是它所定义的当前这一对大括号9.成员变量凡是定义在方法外面的变量就是成员变量所有的成员变量都有默认的初始化值：&gt;整型都是0浮点型是0.0字符型是空字符布尔型是false所有的局部变量必须手动赋初始化值，否则无法使用d10.自动类型转换1.不同类型的数值在相互运算的时候，会首先转为相同的类型然后再运算2.等号=作为一个赋值运算符，它会将其右边的值赋给左边的变量，如果左右两边类型不一致，也会发生类型转换注意：等号右边容量小的可以赋给等号左边容量大的变量3.容量小的数据类型会自动往容量大的数据类型转换4.在赋值运算符=的右边容量大的类型无法赋值给等号左边容量小的变量&gt;在自动转换的过程中：byteshortchar这三种类型并列最小他们之间相互运算统一转为int除此之外从小到大顺序如下：intlongfloatdouble注意：boolean不会和其他七种类型相互运算注意：char型和其他基本数据类型运算时，是使用它背后的unicode编码来进行运算的11.强制类型转换容量大的数据往容量小的类型转换，只需要使用一对小括号(目标类型)，就可以完成强制类型转换12.String和其他数据类型只能使用+进行运算，+不是加法，而是拼接，首先将其他数据类型转为字符串，然后和当前字符串拼接，返回拼接后的字符串13.++和–++表示自增1–表示自减1++和–可以放在变量的前面或者后面，如果放到前面，则是先自增自减，然后使用，如果放到后面，则是先使用变量，然后再自增自减
6	Spring学习	{Java,Spring}	# spring\r\n\r\n## spring简介\r\n\r\n### spring -- 春天，给软件行业带来春天\r\n\r\n\r\n官方文档地址：https://docs.spring.io/spring-framework/docs/current/reference/html/\r\n\r\n![image-20210312080911099](https://gitee.com/yigedabidou/images4mk/raw/master/img/image-20210312080911099.png)\r\n\r\n\r\n\r\n\r\n\r\n### spring及其扩展能做的事\r\n\r\n![image-20210312081128371](https://gitee.com/yigedabidou/images4mk/raw/master/img/image-20210312081128371.png)\r\n\r\n\r\n\r\n### 吹一下springBoot，创始人竟然是音乐专业的博士，离谱。。。。\r\n\r\n![image-20210312081235213](https://gitee.com/yigedabidou/images4mk/raw/master/img/image-20210312081235213.png)\r\n\r\n### 优点\r\n\r\n1、Spring是一个开源免费的框架 , 容器  .\r\n\r\n2、Spring是一个轻量级的框架 , 非侵入式的 .\r\n\r\n**3、控制反转 IoC  , 面向切面 Aop**\r\n\r\n4、对事物的支持 , 对框架的支持\r\n\r\n.......\r\n\r\n一句话概括：\r\n\r\n**Spring是一个轻量级的控制反转(IoC)和面向切面(AOP)的容器（框架）。**\r\n\r\n### 组成\r\n\r\n\r\nSpring 框架是一个分层架构，由 7 个定义良好的模块组成。Spring 模块构建在核心容器之上，核心容器定义了创建、配置和管理 bean 的方式 .\r\n\r\n\r\n组成 Spring 框架的每个模块（或组件）都可以单独存在，或者与其他一个或多个模块联合实现。每个模块的功能如下：\r\n\r\n#### 核心容器：\r\n\r\n核心容器提供 Spring 框架的基本功能。核心容器的主要组件是 BeanFactory，它是工厂模式的实现。BeanFactory 使用*控制反转*（IOC） 模式将应用程序的配置和依赖性规范与实际的应用程序代码分开。\r\n\r\n#### Spring 上下文：\r\n\r\nSpring 上下文是一个配置文件，向 Spring 框架提供上下文信息。Spring 上下文包括企业服务，例如 JNDI、EJB、电子邮件、国际化、校验和调度功能。\r\n\r\n#### Spring AOP：\r\n\r\n通过配置管理特性，Spring AOP 模块直接将面向切面的编程功能 , 集成到了 Spring 框架中。所以，可以很容易地使 Spring 框架管理任何支持 AOP的对象。Spring AOP 模块为基于 Spring 的应用程序中的对象提供了事务管理服务。通过使用 Spring AOP，不用依赖组件，就可以将声明性事务管理集成到应用程序中。\r\n\r\n#### Spring DAO：\r\n\r\nJDBC DAO 抽象层提供了有意义的异常层次结构，可用该结构来管理异常处理和不同数据库供应商抛出的错误消息。异常层次结构简化了错误处理，并且极大地降低了需要编写的异常代码数量（例如打开和关闭连接）。Spring DAO 的面向 JDBC 的异常遵从通用的 DAO 异常层次结构。\r\n\r\n#### Spring ORM：\r\n\r\nSpring 框架插入了若干个 ORM 框架，从而提供了 ORM 的对象关系工具，其中包括 JDO、Hibernate 和 iBatis SQL Map。所有这些都遵从 Spring 的通用事务和 DAO 异常层次结构。\r\n\r\n#### Spring Web 模块：\r\n\r\nWeb 上下文模块建立在应用程序上下文模块之上，为基于 Web 的应用程序提供了上下文。所以，Spring 框架支持与 Jakarta Struts 的集成。Web 模块还简化了处理多部分请求以及将请求参数绑定到域对象的工作。\r\n\r\n#### Spring MVC 框架：\r\n\r\nMVC 框架是一个全功能的构建 Web 应用程序的 MVC 实现。通过策略接口，MVC 框架变成为高度可配置的，MVC 容纳了大量视图技术，其中包括 JSP、Velocity、Tiles、iText 和 POI。\r\n\r\n### 核心\r\n\r\n#### **IoC是Spring框架的核心内容**\r\n\r\n**控制反转IoC(Inversion of Control)，是一种设计思想，是一种通过描述（XML或注解）并通过第三方去生产或获取特定对象的方式。在Spring中实现控制反转的是IoC容器，其实现方法是依赖注入（Dependency Injection,DI）。**\r\n\r\n控制反转 :\r\n\r\n- 控制 : 谁来控制对象的创建 , 传统应用程序的对象是由程序本身控制创建的 , 使用Spring后 , 对象是由Spring来创建的\r\n- 反转 : 程序本身不创建对象 , 而变成被动的接收对象 .\r\n\r\n依赖注入 : 就是利用set方法来进行注入的.\r\n\r\n\r\n#### spring实现ioc方式\r\n\r\nSpring容器在初始化时先读取配置文件，根据配置文件或元数据创建与组织对象存入容器中，程序使用时再从Ioc容器中取出需要的对象。\r\n\r\n![image-20210312082634879](https://gitee.com/yigedabidou/images4mk/raw/master/img/image-20210312082634879.png)\r\n\r\n-----------\r\n\r\nspring配置文件中的每一个bean都会在运行的时候创建一个对象，要保证一个配置文件中的中的所有bean都正常运行\r\n\r\n---------------------\r\n\r\n## spring入门\r\n\r\n<!--设置别名：在获取Bean的时候可以使用别名获取-->\r\n\r\n```xml\r\n<alias name="userT" alias="userNew"/>\r\n```\r\n\r\n#### Bean的配置\r\n\r\n<!--bean就是java对象,由Spring创建和管理-->\r\n\r\n```xml\r\n<!--\r\n    id 是bean的标识符,要唯一,如果没有配置id,name就是默认标识符\r\n    如果配置id,又配置了name,那么name是别名\r\n    name可以设置多个别名,可以用逗号,分号,空格隔开\r\n    如果不配置id和name,可以根据applicationContext.getBean(.class)获取对象;\r\n\r\n    class是bean的全限定名=包名+类名\r\n\r\n-->\r\n<bean id="hello" name="hello2 h2,h3;h4" class="com.kuang.pojo.Hello">\r\n    <property name="name" value="Spring"/>\r\n</bean>\r\n```\r\n\r\n#### import团队的合作通过import来实现 .\r\n\r\n```xml\r\n<import resource="{path}/beans.xml"/>\r\n```\r\n\r\n------------------\r\n\r\n```java\r\n//简单测试\r\nimport org.springframework.context.ApplicationContext;\r\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\r\nimport pojo.User;\r\n\r\nimport java.sql.SQLOutput;\r\n\r\npublic class Test {\r\n    public static void main(String[] args) {\r\n        ApplicationContext context = new ClassPathXmlApplicationContext("applicationContext.xml");\r\n        User user = context.getBean("user", User.class);\r\n        System.out.println(user.getName());\r\n    }\r\n}\r\n```\r\n\r\n\r\n\r\n\r\n\r\n## 依赖注入（DI）\r\n\r\n### 构造器注入\r\n\r\n```xml\r\n<!--        id = 变量名        -->\r\n<!--        class = 要new的对象-->\r\n\r\n        <bean id="hello" class="pojo.Hello">\r\n            <property name="str" value="spring"/>\r\n        </bean>\r\n```\r\n\r\n#### \t三种参数设置方法\r\n\r\n```xml\r\n<!--     第一种根据index参数下标设置 -->\r\n    <bean id="e" class="pojo.Hello">\r\n        <constructor-arg index="1" value="12"/>\r\n        <constructor-arg index="0" value="哇哇"/>\r\n    </bean>\r\n\r\n<!--     第二种根据参数名字设置 -->\r\n    <bean id="two" class="pojo.Hello">\r\n        <constructor-arg name="no" value="1112"/>\r\n        <constructor-arg name="str" value="哇哇的"/>\r\n    </bean>\r\n<!--     第三种根据参数类型设置 -->\r\n    <bean id="one" class="pojo.Hello">\r\n        <constructor-arg type="int" value="112"/>\r\n        <constructor-arg type="java.lang.String" value="拉拉"/>\r\n    </bean>\r\n```\r\n\r\n\r\n\r\n### Set 注入 （重点）\r\n\r\n要求被注入的属性 , 必须有set方法 , set方法的方法名由set + 属性首字母大写 , 如果属性是boolean类型 , 没有set方法 , 是 is .\r\n\r\n#### 测试pojo类 :\r\n\r\nAddress.java\r\n\r\n    public class Address {\r\n        private String address;\r\n    \r\n         public String getAddress() {\r\n             return address;\r\n         }\r\n    \r\n         public void setAddress(String address) {\r\n             this.address = address;\r\n         }\r\n    }\r\n\r\nStudent.java\r\n\r\n```java\r\n \r\npackage com.kuang.pojo;\r\n\r\n import java.util.List;\r\n import java.util.Map;\r\n import java.util.Properties;\r\n import java.util.Set;\r\n\r\n public class Student {\r\n     private String name;\r\n     private Address address;\r\n     private String[] books;\r\n     private List<String> hobbys;\r\n     private Map<String,String> card;\r\n     private Set<String> games;\r\n     private String wife;\r\n     private Properties info;\r\n\r\n     public void setName(String name) {\r\n         this.name = name;\r\n     }\r\n\r\n     public void setAddress(Address address) {\r\n         this.address = address;\r\n     }\r\n\r\n     public void setBooks(String[] books) {\r\n         this.books = books;\r\n     }\r\n\r\n     public void setHobbys(List<String> hobbys) {\r\n         this.hobbys = hobbys;\r\n     }\r\n\r\n     public void setCard(Map<String, String> card) {\r\n         this.card = card;\r\n     }\r\n\r\n     public void setGames(Set<String> games) {\r\n         this.games = games;\r\n     }\r\n\r\n     public void setWife(String wife) {\r\n         this.wife = wife;\r\n     }\r\n\r\n     public void setInfo(Properties info) {\r\n         this.info = info;\r\n     }\r\n\r\n     public void show(){\r\n         System.out.println("name="+ name\r\n                 + ",address="+ address.getAddress()\r\n                 + ",books="\r\n         );\r\n         for (String book:books){\r\n             System.out.print("<<"+book+">>\\t");\r\n         }\r\n         System.out.println("\\n爱好:"+hobbys);\r\n\r\n         System.out.println("card:"+card);\r\n\r\n         System.out.println("games:"+games);\r\n\r\n         System.out.println("wife:"+wife);\r\n\r\n         System.out.println("info:"+info);\r\n\r\n     }\r\n }\r\n```\r\n#### 1、常量注入\r\n\r\n```xml\r\n <bean id="student" class="com.kuang.pojo.Student">\r\n     <property name="name" value="小明"/>\r\n </bean>\r\n```\r\n\r\n#### 2、Bean注入\r\n\r\n**注意点：这里的值是一个引用，ref**\r\n\r\n ```xml\r\n<bean id="addr" class="com.kuang.pojo.Address">\r\n     <property name="address" value="重庆"/>\r\n </bean>\r\n\r\n <bean id="student" class="com.kuang.pojo.Student">\r\n     <property name="name" value="小明"/>\r\n     <property name="address" ref="addr"/>\r\n </bean>\r\n ```\r\n\r\n#### 3、数组注入\r\n\r\n ```xml\r\n<bean id="student" class="com.kuang.pojo.Student">\r\n     <property name="name" value="小明"/>\r\n     <property name="address" ref="addr"/>\r\n     <property name="books">\r\n         <array>\r\n             <value>西游记</value>\r\n             <value>红楼梦</value>\r\n             <value>水浒传</value>\r\n         </array>\r\n     </property>\r\n </bean>\r\n ```\r\n\r\n#### 4、List注入\r\n\r\n```xml\r\n <property name="hobbys">\r\n     <list>\r\n         <value>听歌</value>\r\n         <value>看电影</value>\r\n         <value>爬山</value>\r\n     </list>\r\n </property>\r\n```\r\n\r\n#### 5、Map注入\r\n\r\n ```xml\r\n<property name="card">\r\n     <map>\r\n         <entry key="中国邮政" value="456456456465456"/>\r\n         <entry key="建设" value="1456682255511"/>\r\n     </map>\r\n </property>\r\n ```\r\n\r\n#### 6、set注入\r\n\r\n```xml\r\n <property name="games">\r\n     <set>\r\n         <value>LOL</value>\r\n         <value>BOB</value>\r\n         <value>COC</value>\r\n     </set>\r\n </property>\r\n```\r\n\r\n#### 7、Null注入\r\n\r\n```xml\r\n <property name="wife"><null/></property>\r\n```\r\n\r\n#### 8、Properties注入\r\n\r\n```xml\r\n <property name="info">\r\n     <props>\r\n         <prop key="学号">20190604</prop>\r\n         <prop key="性别">男</prop>\r\n         <prop key="姓名">小明</prop>\r\n     </props>\r\n </property>\r\n```\r\n\r\n\r\n\r\n1、P命名空间注入 : 需要在头文件中加入约束文件\r\n\r\n```xml\r\n 导入约束 : xmlns:p="http://www.springframework.org/schema/p"\r\n\r\n <!--P(属性: properties)命名空间 , 属性依然要设置set方法-->\r\n <bean id="user" class="com.kuang.pojo.User" p:name="狂神" p:age="18"/>\r\n```\r\n\r\n2、c 命名空间注入 : 需要在头文件中加入约束文件\r\n\r\n```xml\r\n 导入约束 : xmlns:c="http://www.springframework.org/schema/c"\r\n <!--C(构造: Constructor)命名空间 , 属性依然要设置set方法-->\r\n <bean id="user" class="com.kuang.pojo.User" c:name="狂神" c:age="18"/>\r\n```\r\n\r\n### 作用域\r\n\r\n![image-20210312090810647](https://gitee.com/yigedabidou/images4mk/raw/master/img/image-20210312090810647.png)\r\n\r\n```xml\r\n <!-- bean的默认作用域是singleton，显式定义是这样-->\r\n<bean id="ServiceImpl" class="cn.csdn.service.ServiceImpl" scope="singleton">\r\n```\r\n\r\n![image-20210312090829463](https://gitee.com/yigedabidou/images4mk/raw/master/img/image-20210312090829463.png)\r\n\r\n```xml\r\n<bean id="account" class="com.foo.DefaultAccount" scope="prototype"/>  \r\n  或者\r\n <bean id="account" class="com.foo.DefaultAccount" singleton="false"/>\r\n```\r\n\r\n![image-20210312090842874](https://gitee.com/yigedabidou/images4mk/raw/master/img/image-20210312090842874.png)\r\n\r\n```xml\r\n<!-- wed里面用的 -->\r\n```\r\n\r\n可以使用注解改变作用域\r\n\r\n<a href="#@Component衍生注解">点击跳转</a>\r\n\r\n## 自动装配\r\n\r\nAutowired  xml中显式配置\r\n\r\n```php\r\n<bean id="user" class="com.kuang.pojo.User" autowire="byName">\r\n    <property name="str" value="qinjiang"/>\r\n</bean>\r\n    \r\n<bean id="user" class="com.kuang.pojo.User" autowire="byType">\r\n    <property name="str" value="qinjiang"/>\r\n</bean>\r\n```\r\n\r\n### 使用注解\r\n\r\n#### @Autowired(sprineg)\r\n\r\n准备工作：利用注解的方式注入属性。\r\n\r\n1、在spring配置文件中引入context文件头\r\n\r\n```xml\r\nxmlns:context="http://www.springframework.org/schema/context"\r\n\r\nhttp://www.springframework.org/schema/context\r\nhttp://www.springframework.org/schema/context/spring-context.xsd\r\n```\r\n\r\n2、开启属性注解支持！\r\n\r\n```xml\r\n<context:annotation-config/>\r\n```\r\n\r\n\r\n\r\n*@Autowired(required=false)  说明：false，对象可以为null；true，对象必须存对象，不能为null。*\r\n\r\n@Autowired可以不用写set方法，默认类型匹配，名字和类型都不对会报错。可以与@Qualifier("dog1")一起用\r\n\r\n#### @Resource（java）\r\n\r\n@Resource默认类型名字，名字和类型都不对会报错。像这样@Resource(name = "cat1")使用\r\n\r\n**姓名和类型都不能匹配的情况**\r\n\r\n![image-20210312091724434](https://gitee.com/yigedabidou/images4mk/raw/master/img/image-20210312091724434.png)\r\n\r\n-------------------\r\n\r\n同时引入p命名空间，c命名空间和@Autowired的spring配置头\r\n\r\n![image-20210312092834546](https://gitee.com/yigedabidou/images4mk/raw/master/img/image-20210312092834546.png)\r\n\r\n---------------\r\n\r\n## spring注解开发\r\n\r\n#### 属性如何注入\r\n\r\n```xml\r\n<!--扫描指定包下的注解-->\r\n    <context:component-scan base-package="pojo"/>\r\n```\r\n\r\n```java\r\npackage pojo;\r\n\r\nimport lombok.Data;\r\nimport org.springframework.beans.factory.annotation.Value;\r\nimport org.springframework.stereotype.Component;\r\n//@Component相当于<bean id="user2" class="pojo.User"></bean>\r\n\r\n@Component\r\n@Data\r\npublic class User {\r\n    @Value("王伟")//只适合简单注入\r\n    private String name;\r\n}\r\n\r\n```\r\n\r\n#### @Component衍生注解\r\n\r\n**按三层架构分层**，功能和@Component一样，都是将java类装载到spring容器中\r\n\r\n- dao【@Repository】\r\n- service【@Service】\r\n- controller【@Controller】\r\n\r\n```java\r\n@Component\r\n@Data\r\n//@Scope("singleton")单例\r\n@Scope("prototype")//原型\r\npublic class User {\r\n    @Value("王伟")\r\n    private String name;\r\n}\r\n```\r\n\r\nxml和注解的优劣\r\n\r\n**XML与注解比较**\r\n\r\n- XML可以适用任何场景 ，结构清晰，维护方便\r\n- 注解不是自己提供的类使用不了，开发简单方便\r\n\r\n**xml与注解整合开发** ：推荐最佳实践\r\n\r\n- xml管理Bean\r\n- 注解完成属性注入\r\n- 使用过程中， 可以不用扫描，扫描是为了类上的注解\r\n\r\n-----------\r\n\r\n### spring源码架构\r\n\r\n![image-20210313152636152](https://gitee.com/yigedabidou/images4mk/raw/master/img/image-20210313152636152.png)\r\n\r\n-------------\r\n\r\n\r\n\r\n## 使用java配置spring\r\n\r\n之前是spring的一个子项目，spring4之后成为了spring的一个核心，并因为灵活性推荐使用\r\n\r\n文件地址\r\n\r\n![image-20210313135155563](https://gitee.com/yigedabidou/images4mk/raw/master/img/image-20210313135155563.png)\r\n\r\n实体类\r\n\r\n```java\r\npackage com.pojo;\r\n\r\nimport org.springframework.beans.factory.annotation.Value;\r\nimport org.springframework.stereotype.Component;\r\n\r\n@Component\r\npublic class User {\r\n    @Value("王伟")\r\n    private String name;\r\n\r\n    public String getName() {\r\n        return name;\r\n    }\r\n    @Override\r\n    public String toString() {\r\n        return "User{" +\r\n                "name=&#39;" + name + &#39;\\&#39;&#39; +\r\n                &#39;}&#39;;\r\n    }\r\n}\r\n```\r\n\r\n\r\n\r\n配置类\r\n\r\n```java\r\npackage com.confige;\r\n\r\nimport com.pojo.User;\r\nimport org.springframework.beans.factory.annotation.Configurable;\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.context.annotation.ComponentScan;\r\nimport org.springframework.stereotype.Component;\r\n\r\n@Configurable\r\n@ComponentScan("com.pojo")\r\npublic class UserConfige {\r\n    //UserConfige中定义的对应的方法名,相当于.xml文件中的bean的id\r\n    //返回值相当于.xml文件中的class\r\n    @Bean\r\n    public User getUser(){\r\n        return new User();\r\n    }\r\n}\r\n```\r\n\r\n\r\n\r\n测试类\r\n\r\n```java\r\npackage com;\r\n\r\n\r\nimport com.confige.UserConfige;\r\nimport com.pojo.User;\r\nimport org.springframework.context.ApplicationContext;\r\nimport org.springframework.context.annotation.AnnotationConfigApplicationContext;\r\n\r\npublic class Test {\r\n    public static void main(String[] args) {\r\n        ApplicationContext Context = new AnnotationConfigApplicationContext(UserConfige.class);\r\n        User user = Context.getBean("getUser",User.class);//里面放的是UserConfige中定义的对应的方法名,相\r\n        // 当于.xml文件中的bean的id\r\n        System.out.println(user.getName());\r\n    }\r\n}\r\n```\r\n\r\n## 代理模式\r\n\r\n### 静态代理\r\n\r\n#### 静态代理角色分析\r\n\r\n- 抽象角色 : 一般使用接口或者抽象类来实现\r\n\r\n- 真实角色 : 被代理的角色\r\n\r\n- 代理角色 : 代理真实角色 ; 代理真实角色后 , 一般会做一些附属的操作 .\r\n\r\n- 客户  :  使用代理角色来进行一些操作 .\r\n\r\n\r\n#### 代码实现\r\n\r\nRent . java 即抽象角色\r\n\r\n```java\r\n//抽象角色：租房\r\npublic interface Rent {\r\n    public void rent();\r\n}\r\n```\r\n\r\nHost . java 即真实角色\r\n\r\n```java\r\n//真实角色: 房东，房东要出租房子\r\npublic class Host implements Rent{\r\n    public void rent() {\r\n        System.out.println("房屋出租");\r\n    }\r\n}\r\n```\r\n\r\nProxy . java 即代理角色\r\n\r\n```java\r\n//代理角色：中介\r\npublic class Proxy implements Rent {\r\n    private Host host;\r\n    public Proxy() { }\r\n    public Proxy(Host host) {\r\n        this.host = host;\r\n    }\r\n    //租房\r\n    public void rent(){\r\n        seeHouse();\r\n        host.rent();\r\n        fare();\r\n    }\r\n    //看房\r\n    public void seeHouse(){\r\n        System.out.println("带房客看房");\r\n    }\r\n    //收中介费\r\n    public void fare(){\r\n        System.out.println("收中介费");\r\n    }\r\n}\r\n```\r\n\r\nClient . java 即客户\r\n\r\n```java\r\n//客户类，一般客户都会去找代理！\r\npublic class Client {\r\n    public static void main(String[] args) {\r\n        //房东要租房\r\n        Host host = new Host();\r\n        //中介帮助房东\r\n        Proxy proxy = new Proxy(host);\r\n        //你去找中介！\r\n        proxy.rent();\r\n    }\r\n\r\n}\r\n```\r\n\r\n分析：在这个过程中，你直接接触的就是中介，就如同现实生活中的样子，你看不到房东，但是你依旧租到了房东的房子通过代理，这就是所谓的代理模式，程序源自于生活，所以学编程的人，一般能够更加抽象的看待生活中发生的事情。\r\n\r\n#### 静态代理的好处:\r\n\r\n可以使得我们的真实角色更加纯粹 . 不再去关注一些公共的事情 .\r\n\r\n公共的业务由代理来完成 . 实现了业务的分工 ,\r\n\r\n公共业务发生扩展时变得更加集中和方便 .\r\n\r\n缺点 :\r\n\r\n类多了 , 多了代理类 , 工作量变大了 . 开发效率降低 .\r\n\r\n我们想要静态代理的好处，又不想要静态代理的缺点，所以 , 就有了动态代理 !\r\n\r\n------------------\r\n\r\n从租房中看aop（面向切片编程）\r\n\r\n![image-20210313152244622](https://gitee.com/yigedabidou/images4mk/raw/master/img/image-20210313152244622.png)\r\n\r\n------------------\r\n\r\n### 动态代理\r\n\r\n![image-20210317081832492](https://gitee.com/yigedabidou/images4mk/raw/master/img/image-20210317081832492.png)![image-20210317081901730](https://gitee.com/yigedabidou/images4mk/raw/master/img/image-20210317081901730.png)\r\n\r\n生成代理类的类的参数\r\n\r\n![image-20210317081647145](https://gitee.com/yigedabidou/images4mk/raw/master/img/image-20210317081647145.png)\r\n\r\n可以将set方法改成有参构造，但每次要新建一次ProInvocationHandler\r\n\r\n![image-20210317081925651](https://gitee.com/yigedabidou/images4mk/raw/master/img/image-20210317081925651.png)\r\n\r\n动态代理的好处\r\n\r\n静态代理有的它都有，静态代理没有的，它也有！\r\n\r\n可以使得我们的真实角色更加纯粹 . 不再去关注一些公共的事情 .\r\n\r\n公共的业务由代理来完成 . 实现了业务的分工 ,\r\n\r\n公共业务发生扩展时变得更加集中和方便 .\r\n\r\n一个动态代理 , 一般代理某一类业务\r\n\r\n一个动态代理可以代理多个类，代理的是接口！\r\n\r\n\r\n## AOP\r\n\r\n### 原生api接口实现\r\n\r\nUserServer.java,相当于之前租房的动作，抽象的接口\r\n\r\n```java\r\npackage com.wang.pojo;\r\n\r\npublic interface UserService {\r\n\r\n    public void add();\r\n\r\n    public void delete();\r\n\r\n    public void update();\r\n\r\n    public void search();\r\n\r\n}\r\n\r\n```\r\n\r\nUserServerImpl.java，相当于之前的房东，真实的对象\r\n\r\n```java\r\npackage com.wang.pojo;\r\n\r\npublic class UserServiceImpl implements UserService {\r\n    public void add() {\r\n        System.out.println("增加");\r\n    }\r\n\r\n    public void delete() {\r\n        System.out.println("删除");\r\n    }\r\n\r\n    public void update() {\r\n        System.out.println("修改");\r\n    }\r\n\r\n    public void search() {\r\n        System.out.println("查询");\r\n    }\r\n}\r\n\r\n```\r\n\r\nContext.xml,spring-aop的配置，要导包和添头\r\n\r\n切入点参数要注意\r\n\r\n```xml\r\n<?xml version="1.0" encoding="UTF-8"?>\r\n<beans xmlns="http://www.springframework.org/schema/beans"\r\n       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\r\n       xmlns:aop="http://www.springframework.org/schema/aop"\r\n       xsi:schemaLocation="http://www.springframework.org/schema/beans\r\n        https://www.springframework.org/schema/beans/spring-beans.xsd\r\n        http://www.springframework.org/schema/aop\r\n        https://www.springframework.org/schema/aop/spring-aop.xsd">\r\n<!--注册Bean-->\r\n    <bean id="userService" class="com.wang.pojo.UserServiceImpl"/>\r\n    <bean id="log" class="com.wang.log.Log"/>\r\n    <bean id="afterLog" class="com.wang.log.AfterLog"/>\r\n<!--我尼玛-->\r\n    <aop:config>\r\n<!--        切入点-->\r\n        <aop:pointcut id="pointcut" expression="execution(* com.wang.pojo.UserServiceImpl.*(..))"/>\r\n<!--        前置通知-->\r\n        <aop:advisor advice-ref="log" pointcut-ref="pointcut"/>\r\n<!--        后置通知-->\r\n        <aop:advisor advice-ref="afterLog" pointcut-ref="pointcut"/>\r\n    </aop:config>\r\n</beans>\r\n\r\n```\r\n\r\nLog.java,相当于租房之前先看房\r\n\r\n```java\r\npackage com.wang.log;\r\n\r\nimport org.springframework.aop.MethodBeforeAdvice;\r\n\r\nimport java.lang.reflect.Method;\r\n\r\npublic class Log implements MethodBeforeAdvice {\r\n    //要执行目标的方法\r\n    //参数\r\n    //目标对象\r\n\r\n    public void before(Method method, Object[] objects, Object o) throws Throwable {\r\n        System.out.println("wang");\r\n    }\r\n}\r\n\r\n```\r\n\r\n\r\n\r\nAfterLog.java，相当于租房之后交中介费\r\n\r\n```java\r\npackage com.wang.log;\r\n\r\nimport org.springframework.aop.AfterReturningAdvice;\r\n\r\nimport java.lang.reflect.Method;\r\n\r\npublic class AfterLog implements AfterReturningAdvice {\r\n    //返回值\r\n    //方法\r\n    //参数\r\n    //对象\r\n    public void afterReturning(Object o, Method method, Object[] objects, Object o1) throws Throwable {\r\n        System.out.println("wei"+o);\r\n    }\r\n}\r\n```\r\n\r\n\r\n\r\n前置通知和后置通知在aop包中的位置\r\n\r\n![image-20210317083305490](https://gitee.com/yigedabidou/images4mk/raw/master/img/image-20210317083305490.png)\r\n\r\n### 自定义类当切面实现（推荐）\r\n\r\nDiyPointcut.java将之前的Log，AfterLog当成了自己的方法，只用写一个\r\n\r\n```java\r\npackage diy;\r\n\r\npublic class DiyPointcat {\r\n    public void before() {\r\n        System.out.println("---------方法执行前---------");\r\n    }\r\n\r\n    public void after() {\r\n        System.out.println("---------方法执行后---------");\r\n    }\r\n\r\n}\r\n\r\n```\r\n\r\n\r\n\r\nContext.xml\r\n\r\n```xml\r\n<?xml version="1.0" encoding="UTF-8"?>\r\n<beans xmlns="http://www.springframework.org/schema/beans"\r\n       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\r\n       xmlns:aop="http://www.springframework.org/schema/aop"\r\n       xsi:schemaLocation="http://www.springframework.org/schema/beans\r\n        https://www.springframework.org/schema/beans/spring-beans.xsd\r\n        http://www.springframework.org/schema/aop\r\n        https://www.springframework.org/schema/aop/spring-aop.xsd">\r\n<!--注册Bean-->\r\n    <bean id="userService" class="pojo.UserServiceImpl"/>\r\n    <bean id="point" class="diy.DiyPointcat"/>\r\n    \r\n    <aop:config>\r\n        <aop:aspect ref="point">\r\n            <aop:pointcut id="diy" expression="execution(* pojo.UserServiceImpl.*(..))"/>\r\n            <aop:before method="before" pointcut-ref="diy"/>\r\n            <aop:after method="after" pointcut-ref="diy"/>\r\n        </aop:aspect>\r\n    </aop:config>\r\n</beans>\r\n\r\n```\r\n\r\n\r\n\r\n\r\n\r\n### 注解实现\r\n\r\nautoPoint.java和之前的一样\r\n\r\n```java\r\npackage diy;\r\n\r\nimport org.aspectj.lang.annotation.After;\r\nimport org.aspectj.lang.annotation.Aspect;\r\nimport org.aspectj.lang.annotation.Before;\r\nimport org.springframework.stereotype.Component;\r\n\r\n\r\n@Aspect//表明这是个切面\r\npublic class autoPoint {\r\n    @Before("execution(* pojo.UserServiceImpl.*(..))")//标记插入点\r\n    public void before() {\r\n        System.out.println("---------方法执行前---------");\r\n    }\r\n@After("execution(* pojo.UserServiceImpl.*(..))")\r\n    public void after() {\r\n        System.out.println("---------方法执行后---------");\r\n    }\r\n\r\n}\r\n```\r\n\r\nContext.xml\r\n\r\n```xml\r\n<?xml version="1.0" encoding="UTF-8"?>\r\n<beans xmlns="http://www.springframework.org/schema/beans"\r\n       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\r\n       xmlns:aop="http://www.springframework.org/schema/aop"\r\n       xsi:schemaLocation="http://www.springframework.org/schema/beans\r\n        https://www.springframework.org/schema/beans/spring-beans.xsd\r\n        http://www.springframework.org/schema/aop\r\n        https://www.springframework.org/schema/aop/spring-aop.xsd">\r\n<!--注册Bean-->\r\n    <bean id="userService" class="pojo.UserServiceImpl"/>\r\n\r\n    <bean id="annotationPointcut" class="diy.autoPoint"/>\r\n    <!--通过aop命名空间的<aop:aspectj-autoproxy />声明自动为spring容器中那些配置@aspectJ切面的bean创建代理，织入切面。当然，spring 在内部依旧采用AnnotationAwareAspectJAutoProxyCreator进行自动代理的创建工作，但具体实现的细节已经被<aop:aspectj-autoproxy />隐藏起来了\r\n \r\n<aop:aspectj-autoproxy />有一个proxy-target-class属性，默认为false，表示使用jdk动态代理织入增强，当配为<aop:aspectj-autoproxy  poxy-target-class="true"/>时，表示使用CGLib动态代理技术织入增强。不过即使proxy-target-class设置为false，如果目标类没有声明接口，则spring将自动使用CGLib动态代理。\r\n-->\r\n    <aop:aspectj-autoproxy/>\r\n    \r\n    \r\n    \r\n</beans>\r\n```\r\n\r\n\r\n\r\n\r\n\r\n## spring整合mybatis\r\n\r\n### 第一种方法\r\n\r\n1. #### 导包\r\n\r\n   - junit\r\n   - spring\r\n   - aop织入\r\n   - mybatis\r\n   - mybatis-spring\r\n   - jdbc\r\n\r\n2. #### 编写配置文件\r\n\r\n   spring-dao.xml,不用动\r\n\r\n   ```xml\r\n   <?xml version="1.0" encoding="UTF-8"?>\r\n   <beans xmlns="http://www.springframework.org/schema/beans"\r\n          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\r\n          xmlns:aop="http://www.springframework.org/schema/aop"\r\n          xsi:schemaLocation="http://www.springframework.org/schema/beans\r\n           https://www.springframework.org/schema/beans/spring-beans.xsd\r\n           http://www.springframework.org/schema/aop\r\n           https://www.springframework.org/schema/aop/spring-aop.xsd">\r\n   <!--要引入spring-jdbc包-->\r\n       <bean id="datasource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">\r\n       <property name="driverClassName" value="com.mysql.cj.jdbc.Driver"/>\r\n       <property name="url" value="jdbc:mysql://127.0.0.1:3306/mybatis?useSSL=true&amp;amp;useUnicode=true&amp;amp;characterEncoding=utf-8&amp;amp;serverTimezone=Asia/Shanghai\r\n   "/>\r\n       <property name="username" value="root"/>\r\n       <property name="password" value="123456"/>\r\n   </bean>\r\n   <!--    核心-->\r\n       <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">\r\n   <!--        绑定-->\r\n           <property name="dataSource" ref="datasource"/>\r\n           <property name="configLocation" value="classpath:mybatis-config.xml"/>\r\n           <property name="mapperLocations" value="mapper/UserMapper.xml"/>\r\n       </bean>\r\n   <!--    核心-->\r\n       <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">\r\n   <!--        只能用构造器注入，因为它没有set方法-->\r\n           <constructor-arg index="0" ref="sqlSessionFactory"/>\r\n       </bean>\r\n   \r\n   </beans>\r\n   \r\n   ```\r\n\r\n   applicationContext.xml\r\n\r\n   ```xml\r\n   <?xml version="1.0" encoding="UTF-8"?>\r\n   <beans xmlns="http://www.springframework.org/schema/beans"\r\n          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\r\n          xmlns:aop="http://www.springframework.org/schema/aop"\r\n          xsi:schemaLocation="http://www.springframework.org/schema/beans\r\n           https://www.springframework.org/schema/beans/spring-beans.xsd\r\n           http://www.springframework.org/schema/aop\r\n           https://www.springframework.org/schema/aop/spring-aop.xsd">\r\n   <!--使用联合开发，让spring-dao。xml不用动-->\r\n       <import resource="spring-dao.xml"/>\r\n       <bean id="userMapper" class="mapper.UserMapperImpl">\r\n           <property name="sqlSession" ref="sqlSession"/>\r\n       </bean>\r\n   \r\n   </beans>\r\n   ```\r\n\r\n   MybatisUtil.java,不用动\r\n\r\n   ```java\r\n   package util;\r\n   \r\n   import org.apache.ibatis.io.Resources;\r\n   import org.apache.ibatis.session.SqlSession;\r\n   import org.apache.ibatis.session.SqlSessionFactory;\r\n   import org.apache.ibatis.session.SqlSessionFactoryBuilder;\r\n   import java.io.IOException;\r\n   import java.io.InputStream;\r\n   \r\n   public class MybatisUtil {\r\n       private static SqlSessionFactory sqlSessionFactory;\r\n       static\r\n       {\r\n   \r\n           try {\r\n               String resource = "mybatis-config.xml";\r\n               InputStream inputStream = Resources.getResourceAsStream(resource);\r\n   \r\n   \r\n               sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);\r\n   \r\n   \r\n           }catch (IOException e){\r\n               e.printStackTrace();\r\n           }\r\n   \r\n       }\r\n       public static SqlSession getsqlsession(){\r\n   \r\n           return sqlSessionFactory.openSession();\r\n       }\r\n   }\r\n   \r\n   ```\r\n\r\n   db.properties,不用动\r\n\r\n   ```properties\r\n   driver=com.mysql.cj.jdbc.Driver\r\n   url=jdbc:mysql://127.0.0.1:3306/mybatis?useSSL=true&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;serverTimezone=Asia/Shanghai\r\n   username=root\r\n   password=123456\r\n   ```\r\n\r\n   \r\n\r\n   ![image-20210317105435975](https://gitee.com/yigedabidou/images4mk/raw/master/img/image-20210317105435975.png)\r\n\r\n3. #### 测试\r\n\r\n   ```java\r\n   import mapper.UserMapper;\r\n   import org.apache.ibatis.session.SqlSession;\r\n   import org.junit.jupiter.api.Test;\r\n   import org.springframework.context.ApplicationContext;\r\n   import org.springframework.context.support.ClassPathXmlApplicationContext;\r\n   import pojo.User;\r\n   import util.MybatisUtil;\r\n   import java.util.List;\r\n   \r\n   public class Tesr {\r\n       @Test\r\n       public void getUser2(){\r\n           //这句不用动\r\n           ApplicationContext context = new ClassPathXmlApplicationContext("applicationContext.xml");\r\n           \r\n           UserMapper userMapper = context.getBean("userMapper",UserMapper.class);\r\n           \r\n           for (User user : userMapper.getUser()) {\r\n               System.out.println(user);\r\n           }\r\n       }\r\n   }\r\n   \r\n   ```\r\n\r\n   **mybatis-config.xml里面最好什么都不写，全让spring做，不然会扫描两次Mapper.xml,报错**\r\n\r\n#### 步骤\r\n\r\n实体类----->接口类------>Mapper.xml------>spring中配置mybatis----->写实现类------>注入spring\r\n\r\n### 回顾mybatis\r\n\r\n1. #### 构建数据库\r\n\r\n2. #### 编写实体类\r\n\r\n3. #### 编写核心配置文件\r\n\r\n4. #### 编写接口\r\n\r\n5. #### 编写Mapper.xml文件\r\n\r\n6. #### 测试\r\n\r\n### 第二种方法\r\n\r\n之前的接口实现类，多继承了一个SqlSessionDaoSupport类，可以直接get获得SqlSession，不用从SqlsessionFactory注入\r\n\r\n```java\r\npackage mapper;\r\n\r\nimport org.apache.ibatis.session.SqlSession;\r\nimport org.mybatis.spring.support.SqlSessionDaoSupport;\r\nimport pojo.User;\r\n\r\nimport java.util.List;\r\n\r\npublic class UserMapperImpl2 extends SqlSessionDaoSupport implements UserMapper{\r\n    public List<User> getUser() {\r\n//        SqlSession sqlSession = getSqlSession();\r\n//        UserMapper mapper = sqlSession.getMapper(UserMapper.class);\r\n//        return mapper.getUser();\r\n        return getSqlSession().getMapper(UserMapper.class).getUser();\r\n    }\r\n}\r\n\r\n```\r\n\r\nspring-dao相比之前可以少一个sqlSession的核心Bean\r\n\r\n```xml\r\n<?xml version="1.0" encoding="UTF-8"?>\r\n<beans xmlns="http://www.springframework.org/schema/beans"\r\n       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\r\n       xmlns:aop="http://www.springframework.org/schema/aop"\r\n       xsi:schemaLocation="http://www.springframework.org/schema/beans\r\n        https://www.springframework.org/schema/beans/spring-beans.xsd\r\n        http://www.springframework.org/schema/aop\r\n        https://www.springframework.org/schema/aop/spring-aop.xsd">\r\n<!--要引入spring-jdbc包-->\r\n    <bean id="datasource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">\r\n    <property name="driverClassName" value="com.mysql.cj.jdbc.Driver"/>\r\n    <property name="url" value="jdbc:mysql://127.0.0.1:3306/mybatis?useSSL=true&amp;amp;useUnicode=true&amp;amp;characterEncoding=utf-8&amp;amp;serverTimezone=Asia/Shanghai\r\n"/>\r\n    <property name="username" value="root"/>\r\n    <property name="password" value="123456"/>\r\n</bean>\r\n<!--    核心-->\r\n    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">\r\n<!--        绑定-->\r\n        <property name="dataSource" ref="datasource"/>\r\n        <property name="configLocation" value="classpath:mybatis-config.xml"/>\r\n        <property name="mapperLocations" value="mapper/UserMapper.xml"/>\r\n    </bean>\r\n\r\n</beans>\r\n\r\n```\r\n\r\n之前applicationContext.xml中Bean丢入的的是SqlSession，现在是SqlSessionFactory\r\n\r\n```xml\r\n<?xml version="1.0" encoding="UTF-8"?>\r\n<beans xmlns="http://www.springframework.org/schema/beans"\r\n       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\r\n       xmlns:aop="http://www.springframework.org/schema/aop"\r\n       xsi:schemaLocation="http://www.springframework.org/schema/beans\r\n        https://www.springframework.org/schema/beans/spring-beans.xsd\r\n        http://www.springframework.org/schema/aop\r\n        https://www.springframework.org/schema/aop/spring-aop.xsd">\r\n    <!--使用联合开发，让spring-dao。xml不用动-->\r\n    <import resource="spring-dao.xml"/>\r\n    \r\n    <bean id="userMapper2" class="mapper.UserMapperImpl2">\r\n        <property name="sqlSessionFactory" ref="sqlSessionFactory"/>\r\n    </bean>\r\n    \r\n</beans>\r\n```\r\n\r\n其他都不变\r\n\r\n`公司常用mybatis-plus或通用Mapper，更简单`\r\n\r\n## 声明式事务管理\r\n\r\n\r\n\r\n##  完结撒花	<h1>spring</h1>\n<h2>spring简介</h2>\n<h3>spring – 春天，给软件行业带来春天</h3>\n<p>官方文档地址：<a href="https://docs.spring.io/spring-framework/docs/current/reference/html/">https://docs.spring.io/spring-framework/docs/current/reference/html/</a></p>\n<p><img src="https://gitee.com/yigedabidou/images4mk/raw/master/img/image-20210312080911099.png" alt="image-20210312080911099"></p>\n<h3>spring及其扩展能做的事</h3>\n<p><img src="https://gitee.com/yigedabidou/images4mk/raw/master/img/image-20210312081128371.png" alt="image-20210312081128371"></p>\n<h3>吹一下springBoot，创始人竟然是音乐专业的博士，离谱。。。。</h3>\n<p><img src="https://gitee.com/yigedabidou/images4mk/raw/master/img/image-20210312081235213.png" alt="image-20210312081235213"></p>\n<h3>优点</h3>\n<p>1、Spring是一个开源免费的框架 , 容器  .</p>\n<p>2、Spring是一个轻量级的框架 , 非侵入式的 .</p>\n<p><strong>3、控制反转 IoC  , 面向切面 Aop</strong></p>\n<p>4、对事物的支持 , 对框架的支持</p>\n<p>…</p>\n<p>一句话概括：</p>\n<p><strong>Spring是一个轻量级的控制反转(IoC)和面向切面(AOP)的容器（框架）。</strong></p>\n<h3>组成</h3>\n<p>Spring 框架是一个分层架构，由 7 个定义良好的模块组成。Spring 模块构建在核心容器之上，核心容器定义了创建、配置和管理 bean 的方式 .</p>\n<p>组成 Spring 框架的每个模块（或组件）都可以单独存在，或者与其他一个或多个模块联合实现。每个模块的功能如下：</p>\n<h4>核心容器：</h4>\n<p>核心容器提供 Spring 框架的基本功能。核心容器的主要组件是 BeanFactory，它是工厂模式的实现。BeanFactory 使用<em>控制反转</em>（IOC） 模式将应用程序的配置和依赖性规范与实际的应用程序代码分开。</p>\n<h4>Spring 上下文：</h4>\n<p>Spring 上下文是一个配置文件，向 Spring 框架提供上下文信息。Spring 上下文包括企业服务，例如 JNDI、EJB、电子邮件、国际化、校验和调度功能。</p>\n<h4>Spring AOP：</h4>\n<p>通过配置管理特性，Spring AOP 模块直接将面向切面的编程功能 , 集成到了 Spring 框架中。所以，可以很容易地使 Spring 框架管理任何支持 AOP的对象。Spring AOP 模块为基于 Spring 的应用程序中的对象提供了事务管理服务。通过使用 Spring AOP，不用依赖组件，就可以将声明性事务管理集成到应用程序中。</p>\n<h4>Spring DAO：</h4>\n<p>JDBC DAO 抽象层提供了有意义的异常层次结构，可用该结构来管理异常处理和不同数据库供应商抛出的错误消息。异常层次结构简化了错误处理，并且极大地降低了需要编写的异常代码数量（例如打开和关闭连接）。Spring DAO 的面向 JDBC 的异常遵从通用的 DAO 异常层次结构。</p>\n<h4>Spring ORM：</h4>\n<p>Spring 框架插入了若干个 ORM 框架，从而提供了 ORM 的对象关系工具，其中包括 JDO、Hibernate 和 iBatis SQL Map。所有这些都遵从 Spring 的通用事务和 DAO 异常层次结构。</p>\n<h4>Spring Web 模块：</h4>\n<p>Web 上下文模块建立在应用程序上下文模块之上，为基于 Web 的应用程序提供了上下文。所以，Spring 框架支持与 Jakarta Struts 的集成。Web 模块还简化了处理多部分请求以及将请求参数绑定到域对象的工作。</p>\n<h4>Spring MVC 框架：</h4>\n<p>MVC 框架是一个全功能的构建 Web 应用程序的 MVC 实现。通过策略接口，MVC 框架变成为高度可配置的，MVC 容纳了大量视图技术，其中包括 JSP、Velocity、Tiles、iText 和 POI。</p>\n<h3>核心</h3>\n<h4><strong>IoC是Spring框架的核心内容</strong></h4>\n<p><strong>控制反转IoC(Inversion of Control)，是一种设计思想，是一种通过描述（XML或注解）并通过第三方去生产或获取特定对象的方式。在Spring中实现控制反转的是IoC容器，其实现方法是依赖注入（Dependency Injection,DI）。</strong></p>\n<p>控制反转 :</p>\n<ul>\n<li>控制 : 谁来控制对象的创建 , 传统应用程序的对象是由程序本身控制创建的 , 使用Spring后 , 对象是由Spring来创建的</li>\n<li>反转 : 程序本身不创建对象 , 而变成被动的接收对象 .</li>\n</ul>\n<p>依赖注入 : 就是利用set方法来进行注入的.</p>\n<h4>spring实现ioc方式</h4>\n<p>Spring容器在初始化时先读取配置文件，根据配置文件或元数据创建与组织对象存入容器中，程序使用时再从Ioc容器中取出需要的对象。</p>\n<p><img src="https://gitee.com/yigedabidou/images4mk/raw/master/img/image-20210312082634879.png" alt="image-20210312082634879"></p>\n<hr>\n<p>spring配置文件中的每一个bean都会在运行的时候创建一个对象，要保证一个配置文件中的中的所有bean都正常运行</p>\n<hr>\n<h2>spring入门</h2>\n<p>&lt;!–设置别名：在获取Bean的时候可以使用别名获取–&gt;</p>\n<pre class="code-block"><code class="code hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">alias</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;userT&quot;</span> <span class="hljs-attr">alias</span>=<span class="hljs-string">&quot;userNew&quot;</span>/&gt;</span><br /></code></pre>\n<h4>Bean的配置</h4>\n<p>&lt;!–bean就是java对象,由Spring创建和管理–&gt;</p>\n<pre class="code-block"><code class="code hljs xml"><span class="hljs-comment">&lt;!--<br />    id 是bean的标识符,要唯一,如果没有配置id,name就是默认标识符<br />    如果配置id,又配置了name,那么name是别名<br />    name可以设置多个别名,可以用逗号,分号,空格隔开<br />    如果不配置id和name,可以根据applicationContext.getBean(.class)获取对象;<br /><br />    class是bean的全限定名=包名+类名<br /><br />--&gt;</span><br /><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;hello&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hello2 h2,h3;h4&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.kuang.pojo.Hello&quot;</span>&gt;</span><br />    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Spring&quot;</span>/&gt;</span><br /><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br /></code></pre>\n<h4>import团队的合作通过import来实现 .</h4>\n<pre class="code-block"><code class="code hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">import</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;{path}/beans.xml&quot;</span>/&gt;</span><br /></code></pre>\n<hr>\n<pre class="code-block"><code class="code hljs java"><span class="hljs-comment">//简单测试</span><br /><span class="hljs-keyword">import</span> org.springframework.context.ApplicationContext;<br /><span class="hljs-keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;<br /><span class="hljs-keyword">import</span> pojo.User;<br /><br /><span class="hljs-keyword">import</span> java.sql.SQLOutput;<br /><br /><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>{<br />    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br />        ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);<br />        User user = context.getBean(<span class="hljs-string">&quot;user&quot;</span>, User.class);<br />        System.out.println(user.getName());<br />    }<br />}<br /></code></pre>\n<h2>依赖注入（DI）</h2>\n<h3>构造器注入</h3>\n<pre class="code-block"><code class="code hljs xml"><span class="hljs-comment">&lt;!--        id = 变量名        --&gt;</span><br /><span class="hljs-comment">&lt;!--        class = 要new的对象--&gt;</span><br /><br />        <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;hello&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;pojo.Hello&quot;</span>&gt;</span><br />            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;str&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;spring&quot;</span>/&gt;</span><br />        <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br /></code></pre>\n<h4>三种参数设置方法</h4>\n<pre class="code-block"><code class="code hljs xml"><span class="hljs-comment">&lt;!--     第一种根据index参数下标设置 --&gt;</span><br />    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;e&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;pojo.Hello&quot;</span>&gt;</span><br />        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;12&quot;</span>/&gt;</span><br />        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;哇哇&quot;</span>/&gt;</span><br />    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br /><br /><span class="hljs-comment">&lt;!--     第二种根据参数名字设置 --&gt;</span><br />    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;two&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;pojo.Hello&quot;</span>&gt;</span><br />        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;no&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1112&quot;</span>/&gt;</span><br />        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;str&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;哇哇的&quot;</span>/&gt;</span><br />    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br /><span class="hljs-comment">&lt;!--     第三种根据参数类型设置 --&gt;</span><br />    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;one&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;pojo.Hello&quot;</span>&gt;</span><br />        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;int&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;112&quot;</span>/&gt;</span><br />        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;java.lang.String&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;拉拉&quot;</span>/&gt;</span><br />    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br /></code></pre>\n<h3>Set 注入 （重点）</h3>\n<p>要求被注入的属性 , 必须有set方法 , set方法的方法名由set + 属性首字母大写 , 如果属性是boolean类型 , 没有set方法 , 是 is .</p>\n<h4>测试pojo类 :</h4>\n<p>Address.java</p>\n<pre><code>public class Address {\n    private String address;\n\n     public String getAddress() {\n         return address;\n     }\n\n     public void setAddress(String address) {\n         this.address = address;\n     }\n}\n</code></pre>\n<p>Student.java</p>\n<pre class="code-block"><code class="code hljs java"> <br /><span class="hljs-keyword">package</span> com.kuang.pojo;<br /><br /> <span class="hljs-keyword">import</span> java.util.List;<br /> <span class="hljs-keyword">import</span> java.util.Map;<br /> <span class="hljs-keyword">import</span> java.util.Properties;<br /> <span class="hljs-keyword">import</span> java.util.Set;<br /><br /> <span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> </span>{<br />     <span class="hljs-keyword">private</span> String name;<br />     <span class="hljs-keyword">private</span> Address address;<br />     <span class="hljs-keyword">private</span> String[] books;<br />     <span class="hljs-keyword">private</span> List&lt;String&gt; hobbys;<br />     <span class="hljs-keyword">private</span> Map&lt;String,String&gt; card;<br />     <span class="hljs-keyword">private</span> Set&lt;String&gt; games;<br />     <span class="hljs-keyword">private</span> String wife;<br />     <span class="hljs-keyword">private</span> Properties info;<br /><br />     <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>{<br />         <span class="hljs-keyword">this</span>.name = name;<br />     }<br /><br />     <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAddress</span><span class="hljs-params">(Address address)</span> </span>{<br />         <span class="hljs-keyword">this</span>.address = address;<br />     }<br /><br />     <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setBooks</span><span class="hljs-params">(String[] books)</span> </span>{<br />         <span class="hljs-keyword">this</span>.books = books;<br />     }<br /><br />     <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setHobbys</span><span class="hljs-params">(List&lt;String&gt; hobbys)</span> </span>{<br />         <span class="hljs-keyword">this</span>.hobbys = hobbys;<br />     }<br /><br />     <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setCard</span><span class="hljs-params">(Map&lt;String, String&gt; card)</span> </span>{<br />         <span class="hljs-keyword">this</span>.card = card;<br />     }<br /><br />     <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setGames</span><span class="hljs-params">(Set&lt;String&gt; games)</span> </span>{<br />         <span class="hljs-keyword">this</span>.games = games;<br />     }<br /><br />     <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setWife</span><span class="hljs-params">(String wife)</span> </span>{<br />         <span class="hljs-keyword">this</span>.wife = wife;<br />     }<br /><br />     <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setInfo</span><span class="hljs-params">(Properties info)</span> </span>{<br />         <span class="hljs-keyword">this</span>.info = info;<br />     }<br /><br />     <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span></span>{<br />         System.out.println(<span class="hljs-string">&quot;name=&quot;</span>+ name<br />                 + <span class="hljs-string">&quot;,address=&quot;</span>+ address.getAddress()<br />                 + <span class="hljs-string">&quot;,books=&quot;</span><br />         );<br />         <span class="hljs-keyword">for</span> (String book:books){<br />             System.out.print(<span class="hljs-string">&quot;&lt;&lt;&quot;</span>+book+<span class="hljs-string">&quot;&gt;&gt;\\t&quot;</span>);<br />         }<br />         System.out.println(<span class="hljs-string">&quot;\\n爱好:&quot;</span>+hobbys);<br /><br />         System.out.println(<span class="hljs-string">&quot;card:&quot;</span>+card);<br /><br />         System.out.println(<span class="hljs-string">&quot;games:&quot;</span>+games);<br /><br />         System.out.println(<span class="hljs-string">&quot;wife:&quot;</span>+wife);<br /><br />         System.out.println(<span class="hljs-string">&quot;info:&quot;</span>+info);<br /><br />     }<br /> }<br /></code></pre>\n<h4>1、常量注入</h4>\n<pre class="code-block"><code class="code hljs xml"> <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;student&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.kuang.pojo.Student&quot;</span>&gt;</span><br />     <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;小明&quot;</span>/&gt;</span><br /> <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br /></code></pre>\n<h4>2、Bean注入</h4>\n<p><strong>注意点：这里的值是一个引用，ref</strong></p>\n<pre class="code-block"><code class="code hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;addr&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.kuang.pojo.Address&quot;</span>&gt;</span><br />    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;address&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;重庆&quot;</span>/&gt;</span><br /><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br /><br /><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;student&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.kuang.pojo.Student&quot;</span>&gt;</span><br />    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;小明&quot;</span>/&gt;</span><br />    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;address&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;addr&quot;</span>/&gt;</span><br /><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br /></code></pre>\n<h4>3、数组注入</h4>\n<pre class="code-block"><code class="code hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;student&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.kuang.pojo.Student&quot;</span>&gt;</span><br />    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;小明&quot;</span>/&gt;</span><br />    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;address&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;addr&quot;</span>/&gt;</span><br />    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;books&quot;</span>&gt;</span><br />        <span class="hljs-tag">&lt;<span class="hljs-name">array</span>&gt;</span><br />            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>西游记<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br />            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>红楼梦<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br />            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>水浒传<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br />        <span class="hljs-tag">&lt;/<span class="hljs-name">array</span>&gt;</span><br />    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br /><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br /></code></pre>\n<h4>4、List注入</h4>\n<pre class="code-block"><code class="code hljs xml"> <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobbys&quot;</span>&gt;</span><br />     <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span><br />         <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>听歌<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br />         <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>看电影<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br />         <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>爬山<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br />     <span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span><br /> <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br /></code></pre>\n<h4>5、Map注入</h4>\n<pre class="code-block"><code class="code hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;card&quot;</span>&gt;</span><br />    <span class="hljs-tag">&lt;<span class="hljs-name">map</span>&gt;</span><br />        <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;中国邮政&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;456456456465456&quot;</span>/&gt;</span><br />        <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;建设&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1456682255511&quot;</span>/&gt;</span><br />    <span class="hljs-tag">&lt;/<span class="hljs-name">map</span>&gt;</span><br /><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br /></code></pre>\n<h4>6、set注入</h4>\n<pre class="code-block"><code class="code hljs xml"> <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;games&quot;</span>&gt;</span><br />     <span class="hljs-tag">&lt;<span class="hljs-name">set</span>&gt;</span><br />         <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>LOL<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br />         <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>BOB<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br />         <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>COC<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br />     <span class="hljs-tag">&lt;/<span class="hljs-name">set</span>&gt;</span><br /> <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br /></code></pre>\n<h4>7、Null注入</h4>\n<pre class="code-block"><code class="code hljs xml"> <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;wife&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">null</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br /></code></pre>\n<h4>8、Properties注入</h4>\n<pre class="code-block"><code class="code hljs xml"> <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;info&quot;</span>&gt;</span><br />     <span class="hljs-tag">&lt;<span class="hljs-name">props</span>&gt;</span><br />         <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;学号&quot;</span>&gt;</span>20190604<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br />         <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;性别&quot;</span>&gt;</span>男<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br />         <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;姓名&quot;</span>&gt;</span>小明<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br />     <span class="hljs-tag">&lt;/<span class="hljs-name">props</span>&gt;</span><br /> <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br /></code></pre>\n<p>1、P命名空间注入 : 需要在头文件中加入约束文件</p>\n<pre class="code-block"><code class="code hljs xml"> 导入约束 : xmlns:p=&quot;http://www.springframework.org/schema/p&quot;<br /><br /> <span class="hljs-comment">&lt;!--P(属性: properties)命名空间 , 属性依然要设置set方法--&gt;</span><br /> <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.kuang.pojo.User&quot;</span> <span class="hljs-attr">p:name</span>=<span class="hljs-string">&quot;狂神&quot;</span> <span class="hljs-attr">p:age</span>=<span class="hljs-string">&quot;18&quot;</span>/&gt;</span><br /></code></pre>\n<p>2、c 命名空间注入 : 需要在头文件中加入约束文件</p>\n<pre class="code-block"><code class="code hljs xml"> 导入约束 : xmlns:c=&quot;http://www.springframework.org/schema/c&quot;<br /> <span class="hljs-comment">&lt;!--C(构造: Constructor)命名空间 , 属性依然要设置set方法--&gt;</span><br /> <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.kuang.pojo.User&quot;</span> <span class="hljs-attr">c:name</span>=<span class="hljs-string">&quot;狂神&quot;</span> <span class="hljs-attr">c:age</span>=<span class="hljs-string">&quot;18&quot;</span>/&gt;</span><br /></code></pre>\n<h3>作用域</h3>\n<p><img src="https://gitee.com/yigedabidou/images4mk/raw/master/img/image-20210312090810647.png" alt="image-20210312090810647"></p>\n<pre class="code-block"><code class="code hljs xml"> <span class="hljs-comment">&lt;!-- bean的默认作用域是singleton，显式定义是这样--&gt;</span><br /><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;ServiceImpl&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cn.csdn.service.ServiceImpl&quot;</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;singleton&quot;</span>&gt;</span><br /></code></pre>\n<p><img src="https://gitee.com/yigedabidou/images4mk/raw/master/img/image-20210312090829463.png" alt="image-20210312090829463"></p>\n<pre class="code-block"><code class="code hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;account&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.foo.DefaultAccount&quot;</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;prototype&quot;</span>/&gt;</span>  <br />  或者<br /> <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;account&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.foo.DefaultAccount&quot;</span> <span class="hljs-attr">singleton</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span><br /></code></pre>\n<p><img src="https://gitee.com/yigedabidou/images4mk/raw/master/img/image-20210312090842874.png" alt="image-20210312090842874"></p>\n<pre class="code-block"><code class="code hljs xml"><span class="hljs-comment">&lt;!-- wed里面用的 --&gt;</span><br /></code></pre>\n<p>可以使用注解改变作用域</p>\n<p>&lt;a href=“#@Component衍生注解”&gt;点击跳转&lt;/a&gt;</p>\n<h2>自动装配</h2>\n<p>Autowired  xml中显式配置</p>\n<pre class="code-block"><code class="code hljs php">&lt;bean id=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span>=&quot;<span class="hljs-title">com</span>.<span class="hljs-title">kuang</span>.<span class="hljs-title">pojo</span>.<span class="hljs-title">User</span>&quot; <span class="hljs-title">autowire</span>=&quot;<span class="hljs-title">byName</span>&quot;&gt;<br />    &lt;<span class="hljs-title">property</span> <span class="hljs-title">name</span>=&quot;<span class="hljs-title">str</span>&quot; <span class="hljs-title">value</span>=&quot;<span class="hljs-title">qinjiang</span>&quot;/&gt;<br />&lt;/<span class="hljs-title">bean</span>&gt;<br />    <br />&lt;<span class="hljs-title">bean</span> <span class="hljs-title">id</span>=&quot;<span class="hljs-title">user</span>&quot; <span class="hljs-title">class</span>=&quot;<span class="hljs-title">com</span>.<span class="hljs-title">kuang</span>.<span class="hljs-title">pojo</span>.<span class="hljs-title">User</span>&quot; <span class="hljs-title">autowire</span>=&quot;<span class="hljs-title">byType</span>&quot;&gt;<br />    &lt;<span class="hljs-title">property</span> <span class="hljs-title">name</span>=&quot;<span class="hljs-title">str</span>&quot; <span class="hljs-title">value</span>=&quot;<span class="hljs-title">qinjiang</span>&quot;/&gt;<br />&lt;/<span class="hljs-title">bean</span>&gt;<br /></span></code></pre>\n<h3>使用注解</h3>\n<h4>@Autowired(sprineg)</h4>\n<p>准备工作：利用注解的方式注入属性。</p>\n<p>1、在spring配置文件中引入context文件头</p>\n<pre class="code-block"><code class="code hljs xml">xmlns:context=&quot;http://www.springframework.org/schema/context&quot;<br /><br />http://www.springframework.org/schema/context<br />http://www.springframework.org/schema/context/spring-context.xsd<br /></code></pre>\n<p>2、开启属性注解支持！</p>\n<pre class="code-block"><code class="code hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">context:annotation-config</span>/&gt;</span><br /></code></pre>\n<p><em>@Autowired(required=false)  说明：false，对象可以为null；true，对象必须存对象，不能为null。</em></p>\n<p>@Autowired可以不用写set方法，默认类型匹配，名字和类型都不对会报错。可以与@Qualifier(“dog1”)一起用</p>\n<h4>@Resource（java）</h4>\n<p>@Resource默认类型名字，名字和类型都不对会报错。像这样@Resource(name = “cat1”)使用</p>\n<p><strong>姓名和类型都不能匹配的情况</strong></p>\n<p><img src="https://gitee.com/yigedabidou/images4mk/raw/master/img/image-20210312091724434.png" alt="image-20210312091724434"></p>\n<hr>\n<p>同时引入p命名空间，c命名空间和@Autowired的spring配置头</p>\n<p><img src="https://gitee.com/yigedabidou/images4mk/raw/master/img/image-20210312092834546.png" alt="image-20210312092834546"></p>\n<hr>\n<h2>spring注解开发</h2>\n<h4>属性如何注入</h4>\n<pre class="code-block"><code class="code hljs xml"><span class="hljs-comment">&lt;!--扫描指定包下的注解--&gt;</span><br />    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;pojo&quot;</span>/&gt;</span><br /></code></pre>\n<pre class="code-block"><code class="code hljs java"><span class="hljs-keyword">package</span> pojo;<br /><br /><span class="hljs-keyword">import</span> lombok.Data;<br /><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<br /><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br /><span class="hljs-comment">//@Component相当于&lt;bean id=&quot;user2&quot; class=&quot;pojo.User&quot;&gt;&lt;/bean&gt;</span><br /><br /><span class="hljs-meta">@Component</span><br /><span class="hljs-meta">@Data</span><br /><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>{<br />    <span class="hljs-meta">@Value(&quot;王伟&quot;)</span><span class="hljs-comment">//只适合简单注入</span><br />    <span class="hljs-keyword">private</span> String name;<br />}<br /><br /></code></pre>\n<h4>@Component衍生注解</h4>\n<p><strong>按三层架构分层</strong>，功能和@Component一样，都是将java类装载到spring容器中</p>\n<ul>\n<li>dao【@Repository】</li>\n<li>service【@Service】</li>\n<li>controller【@Controller】</li>\n</ul>\n<pre class="code-block"><code class="code hljs java"><span class="hljs-meta">@Component</span><br /><span class="hljs-meta">@Data</span><br /><span class="hljs-comment">//@Scope(&quot;singleton&quot;)单例</span><br /><span class="hljs-meta">@Scope(&quot;prototype&quot;)</span><span class="hljs-comment">//原型</span><br /><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>{<br />    <span class="hljs-meta">@Value(&quot;王伟&quot;)</span><br />    <span class="hljs-keyword">private</span> String name;<br />}<br /></code></pre>\n<p>xml和注解的优劣</p>\n<p><strong>XML与注解比较</strong></p>\n<ul>\n<li>XML可以适用任何场景 ，结构清晰，维护方便</li>\n<li>注解不是自己提供的类使用不了，开发简单方便</li>\n</ul>\n<p><strong>xml与注解整合开发</strong> ：推荐最佳实践</p>\n<ul>\n<li>xml管理Bean</li>\n<li>注解完成属性注入</li>\n<li>使用过程中， 可以不用扫描，扫描是为了类上的注解</li>\n</ul>\n<hr>\n<h3>spring源码架构</h3>\n<p><img src="https://gitee.com/yigedabidou/images4mk/raw/master/img/image-20210313152636152.png" alt="image-20210313152636152"></p>\n<hr>\n<h2>使用java配置spring</h2>\n<p>之前是spring的一个子项目，spring4之后成为了spring的一个核心，并因为灵活性推荐使用</p>\n<p>文件地址</p>\n<p><img src="https://gitee.com/yigedabidou/images4mk/raw/master/img/image-20210313135155563.png" alt="image-20210313135155563"></p>\n<p>实体类</p>\n<pre class="code-block"><code class="code hljs java"><span class="hljs-keyword">package</span> com.pojo;<br /><br /><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<br /><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br /><br /><span class="hljs-meta">@Component</span><br /><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>{<br />    <span class="hljs-meta">@Value(&quot;王伟&quot;)</span><br />    <span class="hljs-keyword">private</span> String name;<br /><br />    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>{<br />        <span class="hljs-keyword">return</span> name;<br />    }<br />    <span class="hljs-meta">@Override</span><br />    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>{<br />        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;User{&quot;</span> +<br />                <span class="hljs-string">&quot;name=&amp;#39;&quot;</span> + name + &amp;#<span class="hljs-number">39</span>;\\&amp;#<span class="hljs-number">39</span>;&amp;#<span class="hljs-number">39</span>; +<br />                &amp;#<span class="hljs-number">39</span>;}&amp;#<span class="hljs-number">39</span>;;<br />    }<br />}<br /></code></pre>\n<p>配置类</p>\n<pre class="code-block"><code class="code hljs java"><span class="hljs-keyword">package</span> com.confige;<br /><br /><span class="hljs-keyword">import</span> com.pojo.User;<br /><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Configurable;<br /><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br /><span class="hljs-keyword">import</span> org.springframework.context.annotation.ComponentScan;<br /><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br /><br /><span class="hljs-meta">@Configurable</span><br /><span class="hljs-meta">@ComponentScan(&quot;com.pojo&quot;)</span><br /><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserConfige</span> </span>{<br />    <span class="hljs-comment">//UserConfige中定义的对应的方法名,相当于.xml文件中的bean的id</span><br />    <span class="hljs-comment">//返回值相当于.xml文件中的class</span><br />    <span class="hljs-meta">@Bean</span><br />    <span class="hljs-function"><span class="hljs-keyword">public</span> User <span class="hljs-title">getUser</span><span class="hljs-params">()</span></span>{<br />        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> User();<br />    }<br />}<br /></code></pre>\n<p>测试类</p>\n<pre class="code-block"><code class="code hljs java"><span class="hljs-keyword">package</span> com;<br /><br /><br /><span class="hljs-keyword">import</span> com.confige.UserConfige;<br /><span class="hljs-keyword">import</span> com.pojo.User;<br /><span class="hljs-keyword">import</span> org.springframework.context.ApplicationContext;<br /><span class="hljs-keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;<br /><br /><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>{<br />    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br />        ApplicationContext Context = <span class="hljs-keyword">new</span> AnnotationConfigApplicationContext(UserConfige.class);<br />        User user = Context.getBean(<span class="hljs-string">&quot;getUser&quot;</span>,User.class);<span class="hljs-comment">//里面放的是UserConfige中定义的对应的方法名,相</span><br />        <span class="hljs-comment">// 当于.xml文件中的bean的id</span><br />        System.out.println(user.getName());<br />    }<br />}<br /></code></pre>\n<h2>代理模式</h2>\n<h3>静态代理</h3>\n<h4>静态代理角色分析</h4>\n<ul>\n<li>\n<p>抽象角色 : 一般使用接口或者抽象类来实现</p>\n</li>\n<li>\n<p>真实角色 : 被代理的角色</p>\n</li>\n<li>\n<p>代理角色 : 代理真实角色 ; 代理真实角色后 , 一般会做一些附属的操作 .</p>\n</li>\n<li>\n<p>客户  :  使用代理角色来进行一些操作 .</p>\n</li>\n</ul>\n<h4>代码实现</h4>\n<p>Rent . java 即抽象角色</p>\n<pre class="code-block"><code class="code hljs java"><span class="hljs-comment">//抽象角色：租房</span><br /><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Rent</span> </span>{<br />    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">rent</span><span class="hljs-params">()</span></span>;<br />}<br /></code></pre>\n<p>Host . java 即真实角色</p>\n<pre class="code-block"><code class="code hljs java"><span class="hljs-comment">//真实角色: 房东，房东要出租房子</span><br /><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Host</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Rent</span></span>{<br />    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">rent</span><span class="hljs-params">()</span> </span>{<br />        System.out.println(<span class="hljs-string">&quot;房屋出租&quot;</span>);<br />    }<br />}<br /></code></pre>\n<p>Proxy . java 即代理角色</p>\n<pre class="code-block"><code class="code hljs java"><span class="hljs-comment">//代理角色：中介</span><br /><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Proxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Rent</span> </span>{<br />    <span class="hljs-keyword">private</span> Host host;<br />    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Proxy</span><span class="hljs-params">()</span> </span>{ }<br />    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Proxy</span><span class="hljs-params">(Host host)</span> </span>{<br />        <span class="hljs-keyword">this</span>.host = host;<br />    }<br />    <span class="hljs-comment">//租房</span><br />    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">rent</span><span class="hljs-params">()</span></span>{<br />        seeHouse();<br />        host.rent();<br />        fare();<br />    }<br />    <span class="hljs-comment">//看房</span><br />    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">seeHouse</span><span class="hljs-params">()</span></span>{<br />        System.out.println(<span class="hljs-string">&quot;带房客看房&quot;</span>);<br />    }<br />    <span class="hljs-comment">//收中介费</span><br />    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">fare</span><span class="hljs-params">()</span></span>{<br />        System.out.println(<span class="hljs-string">&quot;收中介费&quot;</span>);<br />    }<br />}<br /></code></pre>\n<p>Client . java 即客户</p>\n<pre class="code-block"><code class="code hljs java"><span class="hljs-comment">//客户类，一般客户都会去找代理！</span><br /><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span> </span>{<br />    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br />        <span class="hljs-comment">//房东要租房</span><br />        Host host = <span class="hljs-keyword">new</span> Host();<br />        <span class="hljs-comment">//中介帮助房东</span><br />        Proxy proxy = <span class="hljs-keyword">new</span> Proxy(host);<br />        <span class="hljs-comment">//你去找中介！</span><br />        proxy.rent();<br />    }<br /><br />}<br /></code></pre>\n<p>分析：在这个过程中，你直接接触的就是中介，就如同现实生活中的样子，你看不到房东，但是你依旧租到了房东的房子通过代理，这就是所谓的代理模式，程序源自于生活，所以学编程的人，一般能够更加抽象的看待生活中发生的事情。</p>\n<h4>静态代理的好处:</h4>\n<p>可以使得我们的真实角色更加纯粹 . 不再去关注一些公共的事情 .</p>\n<p>公共的业务由代理来完成 . 实现了业务的分工 ,</p>\n<p>公共业务发生扩展时变得更加集中和方便 .</p>\n<p>缺点 :</p>\n<p>类多了 , 多了代理类 , 工作量变大了 . 开发效率降低 .</p>\n<p>我们想要静态代理的好处，又不想要静态代理的缺点，所以 , 就有了动态代理 !</p>\n<hr>\n<p>从租房中看aop（面向切片编程）</p>\n<p><img src="https://gitee.com/yigedabidou/images4mk/raw/master/img/image-20210313152244622.png" alt="image-20210313152244622"></p>\n<hr>\n<h3>动态代理</h3>\n<p><img src="https://gitee.com/yigedabidou/images4mk/raw/master/img/image-20210317081832492.png" alt="image-20210317081832492"><img src="https://gitee.com/yigedabidou/images4mk/raw/master/img/image-20210317081901730.png" alt="image-20210317081901730"></p>\n<p>生成代理类的类的参数</p>\n<p><img src="https://gitee.com/yigedabidou/images4mk/raw/master/img/image-20210317081647145.png" alt="image-20210317081647145"></p>\n<p>可以将set方法改成有参构造，但每次要新建一次ProInvocationHandler</p>\n<p><img src="https://gitee.com/yigedabidou/images4mk/raw/master/img/image-20210317081925651.png" alt="image-20210317081925651"></p>\n<p>动态代理的好处</p>\n<p>静态代理有的它都有，静态代理没有的，它也有！</p>\n<p>可以使得我们的真实角色更加纯粹 . 不再去关注一些公共的事情 .</p>\n<p>公共的业务由代理来完成 . 实现了业务的分工 ,</p>\n<p>公共业务发生扩展时变得更加集中和方便 .</p>\n<p>一个动态代理 , 一般代理某一类业务</p>\n<p>一个动态代理可以代理多个类，代理的是接口！</p>\n<h2>AOP</h2>\n<h3>原生api接口实现</h3>\n<p>UserServer.java,相当于之前租房的动作，抽象的接口</p>\n<pre class="code-block"><code class="code hljs java"><span class="hljs-keyword">package</span> com.wang.pojo;<br /><br /><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserService</span> </span>{<br /><br />    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">()</span></span>;<br /><br />    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">delete</span><span class="hljs-params">()</span></span>;<br /><br />    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">()</span></span>;<br /><br />    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">search</span><span class="hljs-params">()</span></span>;<br /><br />}<br /><br /></code></pre>\n<p>UserServerImpl.java，相当于之前的房东，真实的对象</p>\n<pre class="code-block"><code class="code hljs java"><span class="hljs-keyword">package</span> com.wang.pojo;<br /><br /><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserService</span> </span>{<br />    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">()</span> </span>{<br />        System.out.println(<span class="hljs-string">&quot;增加&quot;</span>);<br />    }<br /><br />    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">delete</span><span class="hljs-params">()</span> </span>{<br />        System.out.println(<span class="hljs-string">&quot;删除&quot;</span>);<br />    }<br /><br />    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">()</span> </span>{<br />        System.out.println(<span class="hljs-string">&quot;修改&quot;</span>);<br />    }<br /><br />    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">search</span><span class="hljs-params">()</span> </span>{<br />        System.out.println(<span class="hljs-string">&quot;查询&quot;</span>);<br />    }<br />}<br /><br /></code></pre>\n<p>Context.xml,spring-aop的配置，要导包和添头</p>\n<p>切入点参数要注意</p>\n<pre class="code-block"><code class="code hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br /><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span><br />       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br />       <span class="hljs-attr">xmlns:aop</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/aop&quot;</span><br />       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans<br />        https://www.springframework.org/schema/beans/spring-beans.xsd<br />        http://www.springframework.org/schema/aop<br />        https://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span><br /><span class="hljs-comment">&lt;!--注册Bean--&gt;</span><br />    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wang.pojo.UserServiceImpl&quot;</span>/&gt;</span><br />    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;log&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wang.log.Log&quot;</span>/&gt;</span><br />    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;afterLog&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wang.log.AfterLog&quot;</span>/&gt;</span><br /><span class="hljs-comment">&lt;!--我尼玛--&gt;</span><br />    <span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span>&gt;</span><br /><span class="hljs-comment">&lt;!--        切入点--&gt;</span><br />        <span class="hljs-tag">&lt;<span class="hljs-name">aop:pointcut</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;pointcut&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;execution(* com.wang.pojo.UserServiceImpl.*(..))&quot;</span>/&gt;</span><br /><span class="hljs-comment">&lt;!--        前置通知--&gt;</span><br />        <span class="hljs-tag">&lt;<span class="hljs-name">aop:advisor</span> <span class="hljs-attr">advice-ref</span>=<span class="hljs-string">&quot;log&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;pointcut&quot;</span>/&gt;</span><br /><span class="hljs-comment">&lt;!--        后置通知--&gt;</span><br />        <span class="hljs-tag">&lt;<span class="hljs-name">aop:advisor</span> <span class="hljs-attr">advice-ref</span>=<span class="hljs-string">&quot;afterLog&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;pointcut&quot;</span>/&gt;</span><br />    <span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span><br /><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br /><br /></code></pre>\n<p>Log.java,相当于租房之前先看房</p>\n<pre class="code-block"><code class="code hljs java"><span class="hljs-keyword">package</span> com.wang.log;<br /><br /><span class="hljs-keyword">import</span> org.springframework.aop.MethodBeforeAdvice;<br /><br /><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br /><br /><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Log</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">MethodBeforeAdvice</span> </span>{<br />    <span class="hljs-comment">//要执行目标的方法</span><br />    <span class="hljs-comment">//参数</span><br />    <span class="hljs-comment">//目标对象</span><br /><br />    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">before</span><span class="hljs-params">(Method method, Object[] objects, Object o)</span> <span class="hljs-keyword">throws</span> Throwable </span>{<br />        System.out.println(<span class="hljs-string">&quot;wang&quot;</span>);<br />    }<br />}<br /><br /></code></pre>\n<p>AfterLog.java，相当于租房之后交中介费</p>\n<pre class="code-block"><code class="code hljs java"><span class="hljs-keyword">package</span> com.wang.log;<br /><br /><span class="hljs-keyword">import</span> org.springframework.aop.AfterReturningAdvice;<br /><br /><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br /><br /><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AfterLog</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">AfterReturningAdvice</span> </span>{<br />    <span class="hljs-comment">//返回值</span><br />    <span class="hljs-comment">//方法</span><br />    <span class="hljs-comment">//参数</span><br />    <span class="hljs-comment">//对象</span><br />    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">afterReturning</span><span class="hljs-params">(Object o, Method method, Object[] objects, Object o1)</span> <span class="hljs-keyword">throws</span> Throwable </span>{<br />        System.out.println(<span class="hljs-string">&quot;wei&quot;</span>+o);<br />    }<br />}<br /></code></pre>\n<p>前置通知和后置通知在aop包中的位置</p>\n<p><img src="https://gitee.com/yigedabidou/images4mk/raw/master/img/image-20210317083305490.png" alt="image-20210317083305490"></p>\n<h3>自定义类当切面实现（推荐）</h3>\n<p>DiyPointcut.java将之前的Log，AfterLog当成了自己的方法，只用写一个</p>\n<pre class="code-block"><code class="code hljs java"><span class="hljs-keyword">package</span> diy;<br /><br /><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DiyPointcat</span> </span>{<br />    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">before</span><span class="hljs-params">()</span> </span>{<br />        System.out.println(<span class="hljs-string">&quot;---------方法执行前---------&quot;</span>);<br />    }<br /><br />    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">after</span><span class="hljs-params">()</span> </span>{<br />        System.out.println(<span class="hljs-string">&quot;---------方法执行后---------&quot;</span>);<br />    }<br /><br />}<br /><br /></code></pre>\n<p>Context.xml</p>\n<pre class="code-block"><code class="code hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br /><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span><br />       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br />       <span class="hljs-attr">xmlns:aop</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/aop&quot;</span><br />       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans<br />        https://www.springframework.org/schema/beans/spring-beans.xsd<br />        http://www.springframework.org/schema/aop<br />        https://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span><br /><span class="hljs-comment">&lt;!--注册Bean--&gt;</span><br />    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;pojo.UserServiceImpl&quot;</span>/&gt;</span><br />    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;point&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;diy.DiyPointcat&quot;</span>/&gt;</span><br />    <br />    <span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span>&gt;</span><br />        <span class="hljs-tag">&lt;<span class="hljs-name">aop:aspect</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;point&quot;</span>&gt;</span><br />            <span class="hljs-tag">&lt;<span class="hljs-name">aop:pointcut</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;diy&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;execution(* pojo.UserServiceImpl.*(..))&quot;</span>/&gt;</span><br />            <span class="hljs-tag">&lt;<span class="hljs-name">aop:before</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;before&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;diy&quot;</span>/&gt;</span><br />            <span class="hljs-tag">&lt;<span class="hljs-name">aop:after</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;after&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;diy&quot;</span>/&gt;</span><br />        <span class="hljs-tag">&lt;/<span class="hljs-name">aop:aspect</span>&gt;</span><br />    <span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span><br /><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br /><br /></code></pre>\n<h3>注解实现</h3>\n<p>autoPoint.java和之前的一样</p>\n<pre class="code-block"><code class="code hljs java"><span class="hljs-keyword">package</span> diy;<br /><br /><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.After;<br /><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.Aspect;<br /><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.Before;<br /><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br /><br /><br /><span class="hljs-meta">@Aspect</span><span class="hljs-comment">//表明这是个切面</span><br /><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">autoPoint</span> </span>{<br />    <span class="hljs-meta">@Before(&quot;execution(* pojo.UserServiceImpl.*(..))&quot;)</span><span class="hljs-comment">//标记插入点</span><br />    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">before</span><span class="hljs-params">()</span> </span>{<br />        System.out.println(<span class="hljs-string">&quot;---------方法执行前---------&quot;</span>);<br />    }<br /><span class="hljs-meta">@After(&quot;execution(* pojo.UserServiceImpl.*(..))&quot;)</span><br />    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">after</span><span class="hljs-params">()</span> </span>{<br />        System.out.println(<span class="hljs-string">&quot;---------方法执行后---------&quot;</span>);<br />    }<br /><br />}<br /></code></pre>\n<p>Context.xml</p>\n<pre class="code-block"><code class="code hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br /><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span><br />       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br />       <span class="hljs-attr">xmlns:aop</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/aop&quot;</span><br />       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans<br />        https://www.springframework.org/schema/beans/spring-beans.xsd<br />        http://www.springframework.org/schema/aop<br />        https://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span><br /><span class="hljs-comment">&lt;!--注册Bean--&gt;</span><br />    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;pojo.UserServiceImpl&quot;</span>/&gt;</span><br /><br />    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;annotationPointcut&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;diy.autoPoint&quot;</span>/&gt;</span><br />    <span class="hljs-comment">&lt;!--通过aop命名空间的&lt;aop:aspectj-autoproxy /&gt;声明自动为spring容器中那些配置@aspectJ切面的bean创建代理，织入切面。当然，spring 在内部依旧采用AnnotationAwareAspectJAutoProxyCreator进行自动代理的创建工作，但具体实现的细节已经被&lt;aop:aspectj-autoproxy /&gt;隐藏起来了<br /> <br />&lt;aop:aspectj-autoproxy /&gt;有一个proxy-target-class属性，默认为false，表示使用jdk动态代理织入增强，当配为&lt;aop:aspectj-autoproxy  poxy-target-class=&quot;true&quot;/&gt;时，表示使用CGLib动态代理技术织入增强。不过即使proxy-target-class设置为false，如果目标类没有声明接口，则spring将自动使用CGLib动态代理。<br />--&gt;</span><br />    <span class="hljs-tag">&lt;<span class="hljs-name">aop:aspectj-autoproxy</span>/&gt;</span><br />    <br />    <br />    <br /><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br /></code></pre>\n<h2>spring整合mybatis</h2>\n<h3>第一种方法</h3>\n<ol>\n<li>\n<h4>导包</h4>\n<ul>\n<li>junit</li>\n<li>spring</li>\n<li>aop织入</li>\n<li>mybatis</li>\n<li>mybatis-spring</li>\n<li>jdbc</li>\n</ul>\n</li>\n<li>\n<h4>编写配置文件</h4>\n<p>spring-dao.xml,不用动</p>\n<pre class="code-block"><code class="code hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br /><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span><br />       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br />       <span class="hljs-attr">xmlns:aop</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/aop&quot;</span><br />       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans<br />        https://www.springframework.org/schema/beans/spring-beans.xsd<br />        http://www.springframework.org/schema/aop<br />        https://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span><br /><span class="hljs-comment">&lt;!--要引入spring-jdbc包--&gt;</span><br />    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;datasource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;</span>&gt;</span><br />    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClassName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span><br />    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql://127.0.0.1:3306/mybatis?useSSL=true<span class="hljs-symbol">&amp;amp;</span>amp;useUnicode=true<span class="hljs-symbol">&amp;amp;</span>amp;characterEncoding=utf-8<span class="hljs-symbol">&amp;amp;</span>amp;serverTimezone=Asia/Shanghai<br />&quot;</span>/&gt;</span><br />    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br />    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;123456&quot;</span>/&gt;</span><br /><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br /><span class="hljs-comment">&lt;!--    核心--&gt;</span><br />    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sqlSessionFactory&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span><br /><span class="hljs-comment">&lt;!--        绑定--&gt;</span><br />        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;datasource&quot;</span>/&gt;</span><br />        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;configLocation&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;classpath:mybatis-config.xml&quot;</span>/&gt;</span><br />        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;mapperLocations&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;mapper/UserMapper.xml&quot;</span>/&gt;</span><br />    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br /><span class="hljs-comment">&lt;!--    核心--&gt;</span><br />    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sqlSession&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.spring.SqlSessionTemplate&quot;</span>&gt;</span><br /><span class="hljs-comment">&lt;!--        只能用构造器注入，因为它没有set方法--&gt;</span><br />        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;sqlSessionFactory&quot;</span>/&gt;</span><br />    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br /><br /><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br /><br /></code></pre>\n<p>applicationContext.xml</p>\n<pre class="code-block"><code class="code hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br /><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span><br />       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br />       <span class="hljs-attr">xmlns:aop</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/aop&quot;</span><br />       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans<br />        https://www.springframework.org/schema/beans/spring-beans.xsd<br />        http://www.springframework.org/schema/aop<br />        https://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span><br /><span class="hljs-comment">&lt;!--使用联合开发，让spring-dao。xml不用动--&gt;</span><br />    <span class="hljs-tag">&lt;<span class="hljs-name">import</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;spring-dao.xml&quot;</span>/&gt;</span><br />    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userMapper&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mapper.UserMapperImpl&quot;</span>&gt;</span><br />        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sqlSession&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;sqlSession&quot;</span>/&gt;</span><br />    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br /><br /><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br /></code></pre>\n<p>MybatisUtil.java,不用动</p>\n<pre class="code-block"><code class="code hljs java"><span class="hljs-keyword">package</span> util;<br /><br /><span class="hljs-keyword">import</span> org.apache.ibatis.io.Resources;<br /><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSession;<br /><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;<br /><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;<br /><span class="hljs-keyword">import</span> java.io.IOException;<br /><span class="hljs-keyword">import</span> java.io.InputStream;<br /><br /><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MybatisUtil</span> </span>{<br />    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> SqlSessionFactory sqlSessionFactory;<br />    <span class="hljs-keyword">static</span><br />    {<br /><br />        <span class="hljs-keyword">try</span> {<br />            String resource = <span class="hljs-string">&quot;mybatis-config.xml&quot;</span>;<br />            InputStream inputStream = Resources.getResourceAsStream(resource);<br /><br /><br />            sqlSessionFactory = <span class="hljs-keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);<br /><br /><br />        }<span class="hljs-keyword">catch</span> (IOException e){<br />            e.printStackTrace();<br />        }<br /><br />    }<br />    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SqlSession <span class="hljs-title">getsqlsession</span><span class="hljs-params">()</span></span>{<br /><br />        <span class="hljs-keyword">return</span> sqlSessionFactory.openSession();<br />    }<br />}<br /><br /></code></pre>\n<p>db.properties,不用动</p>\n<pre class="code-block"><code class="code hljs properties"><span class="hljs-attr">driver</span>=<span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br /><span class="hljs-attr">url</span>=<span class="hljs-string">jdbc:mysql://127.0.0.1:3306/mybatis?useSSL=true&amp;amp;useUnicode=true&amp;amp;characterEncoding=utf-8&amp;amp;serverTimezone=Asia/Shanghai</span><br /><span class="hljs-attr">username</span>=<span class="hljs-string">root</span><br /><span class="hljs-attr">password</span>=<span class="hljs-string">123456</span><br /></code></pre>\n<p><img src="https://gitee.com/yigedabidou/images4mk/raw/master/img/image-20210317105435975.png" alt="image-20210317105435975"></p>\n</li>\n<li>\n<h4>测试</h4>\n<pre class="code-block"><code class="code hljs java"><span class="hljs-keyword">import</span> mapper.UserMapper;<br /><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSession;<br /><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br /><span class="hljs-keyword">import</span> org.springframework.context.ApplicationContext;<br /><span class="hljs-keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;<br /><span class="hljs-keyword">import</span> pojo.User;<br /><span class="hljs-keyword">import</span> util.MybatisUtil;<br /><span class="hljs-keyword">import</span> java.util.List;<br /><br /><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Tesr</span> </span>{<br />    <span class="hljs-meta">@Test</span><br />    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getUser2</span><span class="hljs-params">()</span></span>{<br />        <span class="hljs-comment">//这句不用动</span><br />        ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);<br />        <br />        UserMapper userMapper = context.getBean(<span class="hljs-string">&quot;userMapper&quot;</span>,UserMapper.class);<br />        <br />        <span class="hljs-keyword">for</span> (User user : userMapper.getUser()) {<br />            System.out.println(user);<br />        }<br />    }<br />}<br /><br /></code></pre>\n<p><strong>mybatis-config.xml里面最好什么都不写，全让spring做，不然会扫描两次Mapper.xml,报错</strong></p>\n</li>\n</ol>\n<h4>步骤</h4>\n<p>实体类-----&gt;接口类------&gt;Mapper.xml------&gt;spring中配置mybatis-----&gt;写实现类------&gt;注入spring</p>\n<h3>回顾mybatis</h3>\n<ol>\n<li>\n<h4>构建数据库</h4>\n</li>\n<li>\n<h4>编写实体类</h4>\n</li>\n<li>\n<h4>编写核心配置文件</h4>\n</li>\n<li>\n<h4>编写接口</h4>\n</li>\n<li>\n<h4>编写Mapper.xml文件</h4>\n</li>\n<li>\n<h4>测试</h4>\n</li>\n</ol>\n<h3>第二种方法</h3>\n<p>之前的接口实现类，多继承了一个SqlSessionDaoSupport类，可以直接get获得SqlSession，不用从SqlsessionFactory注入</p>\n<pre class="code-block"><code class="code hljs java"><span class="hljs-keyword">package</span> mapper;<br /><br /><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSession;<br /><span class="hljs-keyword">import</span> org.mybatis.spring.support.SqlSessionDaoSupport;<br /><span class="hljs-keyword">import</span> pojo.User;<br /><br /><span class="hljs-keyword">import</span> java.util.List;<br /><br /><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserMapperImpl2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">SqlSessionDaoSupport</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserMapper</span></span>{<br />    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title">getUser</span><span class="hljs-params">()</span> </span>{<br /><span class="hljs-comment">//        SqlSession sqlSession = getSqlSession();</span><br /><span class="hljs-comment">//        UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br /><span class="hljs-comment">//        return mapper.getUser();</span><br />        <span class="hljs-keyword">return</span> getSqlSession().getMapper(UserMapper.class).getUser();<br />    }<br />}<br /><br /></code></pre>\n<p>spring-dao相比之前可以少一个sqlSession的核心Bean</p>\n<pre class="code-block"><code class="code hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br /><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span><br />       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br />       <span class="hljs-attr">xmlns:aop</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/aop&quot;</span><br />       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans<br />        https://www.springframework.org/schema/beans/spring-beans.xsd<br />        http://www.springframework.org/schema/aop<br />        https://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span><br /><span class="hljs-comment">&lt;!--要引入spring-jdbc包--&gt;</span><br />    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;datasource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;</span>&gt;</span><br />    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClassName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span><br />    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql://127.0.0.1:3306/mybatis?useSSL=true<span class="hljs-symbol">&amp;amp;</span>amp;useUnicode=true<span class="hljs-symbol">&amp;amp;</span>amp;characterEncoding=utf-8<span class="hljs-symbol">&amp;amp;</span>amp;serverTimezone=Asia/Shanghai<br />&quot;</span>/&gt;</span><br />    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br />    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;123456&quot;</span>/&gt;</span><br /><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br /><span class="hljs-comment">&lt;!--    核心--&gt;</span><br />    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sqlSessionFactory&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span><br /><span class="hljs-comment">&lt;!--        绑定--&gt;</span><br />        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;datasource&quot;</span>/&gt;</span><br />        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;configLocation&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;classpath:mybatis-config.xml&quot;</span>/&gt;</span><br />        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;mapperLocations&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;mapper/UserMapper.xml&quot;</span>/&gt;</span><br />    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br /><br /><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br /><br /></code></pre>\n<p>之前applicationContext.xml中Bean丢入的的是SqlSession，现在是SqlSessionFactory</p>\n<pre class="code-block"><code class="code hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br /><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span><br />       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br />       <span class="hljs-attr">xmlns:aop</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/aop&quot;</span><br />       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans<br />        https://www.springframework.org/schema/beans/spring-beans.xsd<br />        http://www.springframework.org/schema/aop<br />        https://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span><br />    <span class="hljs-comment">&lt;!--使用联合开发，让spring-dao。xml不用动--&gt;</span><br />    <span class="hljs-tag">&lt;<span class="hljs-name">import</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;spring-dao.xml&quot;</span>/&gt;</span><br />    <br />    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userMapper2&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mapper.UserMapperImpl2&quot;</span>&gt;</span><br />        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sqlSessionFactory&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;sqlSessionFactory&quot;</span>/&gt;</span><br />    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br />    <br /><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br /></code></pre>\n<p>其他都不变</p>\n<p><code>公司常用mybatis-plus或通用Mapper，更简单</code></p>\n<h2>声明式事务管理</h2>\n<h2>完结撒花</h2>\n	15	0	0	f	2021-04-22 22:28:55.276943	2021-04-22 22:41:14.584841	1	https://cdn.zhoupb.com/image/generate/7bca61253891dcc66ef3f8a45423b30b.png	springspring简介spring–春天，给软件行业带来春天官方文档地址：https://docs.spring.io/spring-framework/docs/current/reference/html/spring及其扩展能做的事吹一下springBoot，创始人竟然是音乐专业的博士，离谱。。。。优点1、Spring是一个开源免费的框架,容器.2、Spring是一个轻量级的框架,非侵入式的.3、控制反转IoC,面向切面Aop4、对事物的支持,对框架的支持…一句话概括：Spring是一个轻量级的控制反转(IoC)和面向切面(AOP)的容器（框架）。组成Spring框架是一个分层架构，由7个定义良好的模块组成。Spring模块构建在核心容器之上，核心容器定义了创建、配置和管理bean的方式.组成Spring框架的每个模块（或组件）都可以单独存在，或者与其他一个或多个模块联合实现。每个模块的功能如下：核心容器：核心容器提供Spring框架的基本功能。核心容器的主要组件是BeanFactory，它是工厂模式的实现。BeanFactory使用控制反转（IOC）模式将应用程序的配置和依赖性规范与实际的应用程序代码分开。Spring上下文：Spring上下文是一个配置文件，向Spring框架提供上下文信息。Spring上下文包括企业服务，例如JNDI、EJB、电子邮件、国际化、校验和调度功能。SpringAOP：通过配置管理特性，SpringAOP模块直接将面向切面的编程功能,集成到了Spring框架中。所以，可以很容易地使Spring框架管理任何支持AOP的对象。SpringAOP模块为基于Spring的应用程序中的对象提供了事务管理服务。通过使用SpringAOP，不用依赖组件，就可以将声明性事务管理集成到应用程序中。SpringDAO：JDBCDAO抽象层提供了有意义的异常层次结构，可用该结构来管理异常处理和不同数据库供应商抛出的错误消息。异常层次结构简化了错误处理，并且极大地降低了需要编写的异常代码数量（例如打开和关闭连接）。SpringDAO的面向JDBC的异常遵从通用的DAO异常层次结构。SpringORM：Spring框架插入了若干个ORM框架，从而提供了ORM的对象关系工具，其中包括JDO、Hibernate和iBatisSQLMap。所有这些都遵从Spring的通用事务和DAO异常层次结构。SpringWeb模块：Web上下文模块建立在应用程序上下文模块之上，为基于Web的应用程序提供了上下文。所以，Spring框架支持与JakartaStruts的集成。Web模块还简化了处理多部分请求以及将请求参数绑定到域对象的工作。SpringMVC框架：MVC框架是一个全功能的构建Web应用程序的MVC实现。通过策略接口，MVC框架变成为高度可配置的，MVC容纳了大量视图技术，其中包括JSP、Velocity、Tiles、iText和POI。核心IoC是Spring框架的核心内容控制反转IoC(InversionofControl)，是一种设计思想，是一种通过描述（XML或注解）并通过第三方去生产或获取特定对象的方式。在Spring中实现控制反转的是IoC容器，其实现方法是依赖注入（DependencyInjection,DI）。控制反转:控制:谁来控制对象的创建,传统应用程序的对象是由程序本身控制创建的,使用Spring后,对象是由Spring来创建的反转:程序本身不创建对象,而变成被动的接收对象.依赖注入:就是利用set方法来进行注入的.spring实现ioc方式Spring容器在初始化时先读取配置文件，根据配置文件或元数据创建与组织对象存入容器中，程序使用时再从Ioc容器中取出需要的对象。spring配置文件中的每一个bean都会在运行的时候创建一个对象，要保证一个配置文件中的中的所有bean都正常运行spring入门&lt;!–设置别名：在获取Bean的时候可以使用别名获取–&gt;&lt;aliasname=&quot;userT&quot;alias=&quot;userNew&quot;/&gt;Bean的配置&lt;!–bean就是java对象,由Spring创建和管理–&gt;&lt;!--id是bean的标识符,要唯一,如果没有配置id,name就是默认标识符如果配置id,又配置了name,那么name是别名name可以设置多个别名,可以用逗号,分号,空格隔开如果不配置id和name,可以根据applicationContext.getBean(.class)获取对象;class是bean的全限定名=包名+类名--&gt;&lt;beanid=&quot;hello&quot;name=&quot;hello2h2,h3;h4&quot;class=&quot;com.kuang.pojo.Hello&quot;&gt;&lt;propertyname=&quot;name&quot;value=&quot;Spring&quot;/&gt;&lt;/bean&gt;import团队的合作通过import来实现.&lt;importresource=&quot;{path}/beans.xml&quot;/&gt;//简单测试importorg.springframework.context.ApplicationContext;importorg.springframework.context.support.ClassPathXmlApplicationContext;importpojo.User;importjava.sql.SQLOutput;publicclassTest{publicstaticvoidmain(String[]args){ApplicationContextcontext=newClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);Useruser=context.getBean(&quot;user&quot;,User.class);System.out.println(user.getName());}}依赖注入（DI）构造器注入&lt;!--id=变量名--&gt;&lt;!--class=要new的对象--&gt;&lt;beanid=&quot;hello&quot;class=&quot;pojo.Hello&quot;&gt;&lt;propertyname=&quot;str&quot;value=&quot;spring&quot;/&gt;&lt;/bean&gt;三种参数设置方法&lt;!--第一种根据index参数下标设置--&gt;&lt;beanid=&quot;e&quot;class=&quot;pojo.Hello&quot;&gt;&lt;constructor-argindex=&quot;1&quot;value=&quot;12&quot;/&gt;&lt;constructor-argindex=&quot;0&quot;value=&quot;哇哇&quot;/&gt;&lt;/bean&gt;&lt;!--第二种根据参数名字设置--&gt;&lt;beanid=&quot;two&quot;class=&quot;pojo.Hello&quot;&gt;&lt;constructor-argname=&quot;no&quot;value=&quot;1112&quot;/&gt;&lt;constructor-argname=&quot;str&quot;value=&quot;哇哇的&quot;/&gt;&lt;/bean&gt;&lt;!--第三种根据参数类型设置--&gt;&lt;beanid=&quot;one&quot;class=&quot;pojo.Hello&quot;&gt;&lt;constructor-argtype=&quot;int&quot;value=&quot;112&quot;/&gt;&lt;constructor-argtype=&quot;java.lang.String&quot;value=&quot;拉拉&quot;/&gt;&lt;/bean&gt;Set注入（重点）要求被注入的属性,必须有set方法,set方法的方法名由set+属性首字母大写,如果属性是boolean类型,没有set方法,是is.测试pojo类:Address.javapublicclassAddress{privateStringaddress;publicStringgetAddress(){returnaddress;}publicvoidsetAddress(Stringaddress){this.address=address;}}Student.javapackagecom.kuang.pojo;importjava.util.List;importjava.util.Map;importjava.util.Properties;importjava.util.Set;publicclassStudent{privateStringname;privateAddressaddress;privateString[]books;privateList&lt;String&gt;hobbys;privateMap&lt;String,String&gt;card;privateSet&lt;String&gt;games;privateStringwife;privatePropertiesinfo;publicvoidsetName(Stringname){this.name=name;}publicvoidsetAddress(Addressaddress){this.address=address;}publicvoidsetBooks(String[]books){this.books=books;}publicvoidsetHobbys(List&lt;String&gt;hobbys){this.hobbys=hobbys;}publicvoidsetCard(Map&lt;String,String&gt;card){this.card=card;}publicvoidsetGames(Set&lt;String&gt;games){this.games=games;}publicvoidsetWife(Stringwife){this.wife=wife;}publicvoidsetInfo(Propertiesinfo){this.info=info;}publicvoidshow(){System.out.println(&quot;name=&quot;+name+&quot;,address=&quot;+address.getAddress()+&quot;,books=&quot;);for(Stringbook:books){System.out.print(&quot;&lt;&lt;&quot;+book+&quot;&gt;&gt;\\t&quot;);}System.out.println(&quot;\\n爱好:&quot;+hobbys);System.out.println(&quot;card:&quot;+card);System.out.println(&quot;games:&quot;+games);System.out.println(&quot;wife:&quot;+wife);System.out.println(&quot;info:&quot;+info);}}1、常量注入&lt;beanid=&quot;student&quot;class=&quot;com.kuang.pojo.Student&quot;&gt;&lt;propertyname=&quot;name&quot;value=&quot;小明&quot;/&gt;&lt;/bean&gt;2、Bean注入注意点：这里的值是一个引用，ref&lt;beanid=&quot;addr&quot;class=&quot;com.kuang.pojo.Address&quot;&gt;&lt;propertyname=&quot;address&quot;value=&quot;重庆&quot;/&gt;&lt;/bean&gt;&lt;beanid=&quot;student&quot;class=&quot;com.kuang.pojo.Student&quot;&gt;&lt;propertyname=&quot;name&quot;value=&quot;小明&quot;/&gt;&lt;propertyname=&quot;address&quot;ref=&quot;addr&quot;/&gt;&lt;/bean&gt;3、数组注入&lt;beanid=&quot;student&quot;class=&quot;com.kuang.pojo.Student&quot;&gt;&lt;propertyname=&quot;name&quot;value=&quot;小明&quot;/&gt;&lt;propertyname=&quot;address&quot;ref=&quot;addr&quot;/&gt;&lt;propertyname=&quot;books&quot;&gt;&lt;array&gt;&lt;value&gt;西游记&lt;/value&gt;&lt;value&gt;红楼梦&lt;/value&gt;&lt;value&gt;水浒传&lt;/value&gt;&lt;/array&gt;&lt;/property&gt;&lt;/bean&gt;4、List注入&lt;propertyname=&quot;hobbys&quot;&gt;&lt;list&gt;&lt;value&gt;听歌&lt;/value&gt;&lt;value&gt;看电影&lt;/value&gt;&lt;value&gt;爬山&lt;/value&gt;&lt;/list&gt;&lt;/property&gt;5、Map注入&lt;propertyname=&quot;card&quot;&gt;&lt;map&gt;&lt;entrykey=&quot;中国邮政&quot;value=&quot;456456456465456&quot;/&gt;&lt;entrykey=&quot;建设&quot;value=&quot;1456682255511&quot;/&gt;&lt;/map&gt;&lt;/property&gt;6、set注入&lt;propertyname=&quot;games&quot;&gt;&lt;set&gt;&lt;value&gt;LOL&lt;/value&gt;&lt;value&gt;BOB&lt;/value&gt;&lt;value&gt;COC&lt;/value&gt;&lt;/set&gt;&lt;/property&gt;7、Null注入&lt;propertyname=&quot;wife&quot;&gt;&lt;null/&gt;&lt;/property&gt;8、Properties注入&lt;propertyname=&quot;info&quot;&gt;&lt;props&gt;&lt;propkey=&quot;学号&quot;&gt;20190604&lt;/prop&gt;&lt;propkey=&quot;性别&quot;&gt;男&lt;/prop&gt;&lt;propkey=&quot;姓名&quot;&gt;小明&lt;/prop&gt;&lt;/props&gt;&lt;/property&gt;1、P命名空间注入:需要在头文件中加入约束文件导入约束:xmlns:p=&quot;http://www.springframework.org/schema/p&quot;&lt;!--P(属性:properties)命名空间,属性依然要设置set方法--&gt;&lt;beanid=&quot;user&quot;class=&quot;com.kuang.pojo.User&quot;p:name=&quot;狂神&quot;p:age=&quot;18&quot;/&gt;2、c命名空间注入:需要在头文件中加入约束文件导入约束:xmlns:c=&quot;http://www.springframework.org/schema/c&quot;&lt;!--C(构造:Constructor)命名空间,属性依然要设置set方法--&gt;&lt;beanid=&quot;user&quot;class=&quot;com.kuang.pojo.User&quot;c:name=&quot;狂神&quot;c:age=&quot;18&quot;/&gt;作用域&lt;!--bean的默认作用域是singleton，显式定义是这样--&gt;&lt;beanid=&quot;ServiceImpl&quot;class=&quot;cn.csdn.service.ServiceImpl&quot;scope=&quot;singleton&quot;&gt;&lt;beanid=&quot;account&quot;class=&quot;com.foo.DefaultAccount&quot;scope=&quot;prototype&quot;/&gt;或者&lt;beanid=&quot;account&quot;class=&quot;com.foo.DefaultAccount&quot;singleton=&quot;false&quot;/&gt;&lt;!--wed里面用的--&gt;可以使用注解改变作用域&lt;ahref=“#@Component衍生注解”&gt;点击跳转&lt;/a&gt;自动装配Autowiredxml中显式配置&lt;beanid=&quot;user&quot;class=&quot;com.kuang.pojo.User&quot;autowire=&quot;byName&quot;&gt;&lt;propertyname=&quot;str&quot;value=&quot;qinjiang&quot;/&gt;&lt;/bean&gt;&lt;beanid=&quot;user&quot;class=&quot;com.kuang.pojo.User&quot;autowire=&quot;byType&quot;&gt;&lt;propertyname=&quot;str&quot;value=&quot;qinjiang&quot;/&gt;&lt;/bean&gt;使用注解@Autowired(sprineg)准备工作：利用注解的方式注入属性。1、在spring配置文件中引入context文件头xmlns:context=&quot;http://www.springframework.org/schema/context&quot;http://www.springframework.org/schema/contexthttp://www.springframework.org/schema/context/spring-context.xsd2、开启属性注解支持！&lt;context:annotation-config/&gt;@Autowired(required=false)说明：false，对象可以为null；true，对象必须存对象，不能为null。@Autowired可以不用写set方法，默认类型匹配，名字和类型都不对会报错。可以与@Qualifier(“dog1”)一起用@Resource（java）@Resource默认类型名字，名字和类型都不对会报错。像这样@Resource(name=“cat1”)使用姓名和类型都不能匹配的情况同时引入p命名空间，c命名空间和@Autowired的spring配置头spring注解开发属性如何注入&lt;!--扫描指定包下的注解--&gt;&lt;context:component-scanbase-package=&quot;pojo&quot;/&gt;packagepojo;importlombok.Data;importorg.springframework.beans.factory.annotation.Value;importorg.springframework.stereotype.Component;//@Component相当于&lt;beanid=&quot;user2&quot;class=&quot;pojo.User&quot;&gt;&lt;/bean&gt;@Component@DatapublicclassUser{@Value(&quot;王伟&quot;)//只适合简单注入privateStringname;}@Component衍生注解按三层架构分层，功能和@Component一样，都是将java类装载到spring容器中dao【@Repository】service【@Service】controller【@Controller】@Component@Data//@Scope(&quot;singleton&quot;)单例@Scope(&quot;prototype&quot;)//原型publicclassUser{@Value(&quot;王伟&quot;)privateStringname;}xml和注解的优劣XML与注解比较XML可以适用任何场景，结构清晰，维护方便注解不是自己提供的类使用不了，开发简单方便xml与注解整合开发：推荐最佳实践xml管理Bean注解完成属性注入使用过程中，可以不用扫描，扫描是为了类上的注解spring源码架构使用java配置spring之前是spring的一个子项目，spring4之后成为了spring的一个核心，并因为灵活性推荐使用文件地址实体类packagecom.pojo;importorg.springframework.beans.factory.annotation.Value;importorg.springframework.stereotype.Component;@ComponentpublicclassUser{@Value(&quot;王伟&quot;)privateStringname;publicStringgetName(){returnname;}@OverridepublicStringtoString(){return&quot;User{&quot;+&quot;name=&amp;#39;&quot;+name+&amp;#39;\\&amp;#39;&amp;#39;+&amp;#39;}&amp;#39;;}}配置类packagecom.confige;importcom.pojo.User;importorg.springframework.beans.factory.annotation.Configurable;importorg.springframework.context.annotation.Bean;importorg.springframework.context.annotation.ComponentScan;importorg.springframework.stereotype.Component;@Configurable@ComponentScan(&quot;com.pojo&quot;)publicclassUserConfige{//UserConfige中定义的对应的方法名,相当于.xml文件中的bean的id//返回值相当于.xml文件中的class@BeanpublicUsergetUser(){returnnewUser();}}测试类packagecom;importcom.confige.UserConfige;importcom.pojo.User;importorg.springframework.context.ApplicationContext;importorg.springframework.context.annotation.AnnotationConfigApplicationContext;publicclassTest{publicstaticvoidmain(String[]args){ApplicationContextContext=newAnnotationConfigApplicationContext(UserConfige.class);Useruser=Context.getBean(&quot;getUser&quot;,User.class);//里面放的是UserConfige中定义的对应的方法名,相//当于.xml文件中的bean的idSystem.out.println(user.getName());}}代理模式静态代理静态代理角色分析抽象角色:一般使用接口或者抽象类来实现真实角色:被代理的角色代理角色:代理真实角色;代理真实角色后,一般会做一些附属的操作.客户:使用代理角色来进行一些操作.代码实现Rent.java即抽象角色//抽象角色：租房publicinterfaceRent{publicvoidrent();}Host.java即真实角色//真实角色:房东，房东要出租房子publicclassHostimplementsRent{publicvoidrent(){System.out.println(&quot;房屋出租&quot;);}}Proxy.java即代理角色//代理角色：中介publicclassProxyimplementsRent{privateHosthost;publicProxy(){}publicProxy(Hosthost){this.host=host;}//租房publicvoidrent(){seeHouse();host.rent();fare();}//看房publicvoidseeHouse(){System.out.println(&quot;带房客看房&quot;);}//收中介费publicvoidfare(){System.out.println(&quot;收中介费&quot;);}}Client.java即客户//客户类，一般客户都会去找代理！publicclassClient{publicstaticvoidmain(String[]args){//房东要租房Hosthost=newHost();//中介帮助房东Proxyproxy=newProxy(host);//你去找中介！proxy.rent();}}分析：在这个过程中，你直接接触的就是中介，就如同现实生活中的样子，你看不到房东，但是你依旧租到了房东的房子通过代理，这就是所谓的代理模式，程序源自于生活，所以学编程的人，一般能够更加抽象的看待生活中发生的事情。静态代理的好处:可以使得我们的真实角色更加纯粹.不再去关注一些公共的事情.公共的业务由代理来完成.实现了业务的分工,公共业务发生扩展时变得更加集中和方便.缺点:类多了,多了代理类,工作量变大了.开发效率降低.我们想要静态代理的好处，又不想要静态代理的缺点，所以,就有了动态代理!从租房中看aop（面向切片编程）动态代理生成代理类的类的参数可以将set方法改成有参构造，但每次要新建一次ProInvocationHandler动态代理的好处静态代理有的它都有，静态代理没有的，它也有！可以使得我们的真实角色更加纯粹.不再去关注一些公共的事情.公共的业务由代理来完成.实现了业务的分工,公共业务发生扩展时变得更加集中和方便.一个动态代理,一般代理某一类业务一个动态代理可以代理多个类，代理的是接口！AOP原生api接口实现UserServer.java,相当于之前租房的动作，抽象的接口packagecom.wang.pojo;publicinterfaceUserService{publicvoidadd();publicvoiddelete();publicvoidupdate();publicvoidsearch();}UserServerImpl.java，相当于之前的房东，真实的对象packagecom.wang.pojo;publicclassUserServiceImplimplementsUserService{publicvoidadd(){System.out.println(&quot;增加&quot;);}publicvoiddelete(){System.out.println(&quot;删除&quot;);}publicvoidupdate(){System.out.println(&quot;修改&quot;);}publicvoidsearch(){System.out.println(&quot;查询&quot;);}}Context.xml,spring-aop的配置，要导包和添头切入点参数要注意&lt;?xmlversion=&quot;1.0&quot;encoding=&quot;UTF-8&quot;?&gt;&lt;beansxmlns=&quot;http://www.springframework.org/schema/beans&quot;xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;xsi:schemaLocation=&quot;http://www.springframework.org/schema/beanshttps://www.springframework.org/schema/beans/spring-beans.xsdhttp://www.springframework.org/schema/aophttps://www.springframework.org/schema/aop/spring-aop.xsd&quot;&gt;&lt;!--注册Bean--&gt;&lt;beanid=&quot;userService&quot;class=&quot;com.wang.pojo.UserServiceImpl&quot;/&gt;&lt;beanid=&quot;log&quot;class=&quot;com.wang.log.Log&quot;/&gt;&lt;beanid=&quot;afterLog&quot;class=&quot;com.wang.log.AfterLog&quot;/&gt;&lt;!--我尼玛--&gt;&lt;aop:config&gt;&lt;!--切入点--&gt;&lt;aop:pointcutid=&quot;pointcut&quot;expression=&quot;execution(*com.wang.pojo.UserServiceImpl.*(..))&quot;/&gt;&lt;!--前置通知--&gt;&lt;aop:advisoradvice-ref=&quot;log&quot;pointcut-ref=&quot;pointcut&quot;/&gt;&lt;!--后置通知--&gt;&lt;aop:advisoradvice-ref=&quot;afterLog&quot;pointcut-ref=&quot;pointcut&quot;/&gt;&lt;/aop:config&gt;&lt;/beans&gt;Log.java,相当于租房之前先看房packagecom.wang.log;importorg.springframework.aop.MethodBeforeAdvice;importjava.lang.reflect.Method;publicclassLogimplementsMethodBeforeAdvice{//要执行目标的方法//参数//目标对象publicvoidbefore(Methodmethod,Object[]objects,Objecto)throwsThrowable{System.out.println(&quot;wang&quot;);}}AfterLog.java，相当于租房之后交中介费packagecom.wang.log;importorg.springframework.aop.AfterReturningAdvice;importjava.lang.reflect.Method;publicclassAfterLogimplementsAfterReturningAdvice{//返回值//方法//参数//对象publicvoidafterReturning(Objecto,Methodmethod,Object[]objects,Objecto1)throwsThrowable{System.out.println(&quot;wei&quot;+o);}}前置通知和后置通知在aop包中的位置自定义类当切面实现（推荐）DiyPointcut.java将之前的Log，AfterLog当成了自己的方法，只用写一个packagediy;publicclassDiyPointcat{publicvoidbefore(){System.out.println(&quot;---------方法执行前---------&quot;);}publicvoidafter(){System.out.println(&quot;---------方法执行后---------&quot;);}}Context.xml&lt;?xmlversion=&quot;1.0&quot;encoding=&quot;UTF-8&quot;?&gt;&lt;beansxmlns=&quot;http://www.springframework.org/schema/beans&quot;xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;xsi:schemaLocation=&quot;http://www.springframework.org/schema/beanshttps://www.springframework.org/schema/beans/spring-beans.xsdhttp://www.springframework.org/schema/aophttps://www.springframework.org/schema/aop/spring-aop.xsd&quot;&gt;&lt;!--注册Bean--&gt;&lt;beanid=&quot;userService&quot;class=&quot;pojo.UserServiceImpl&quot;/&gt;&lt;beanid=&quot;point&quot;class=&quot;diy.DiyPointcat&quot;/&gt;&lt;aop:config&gt;&lt;aop:aspectref=&quot;point&quot;&gt;&lt;aop:pointcutid=&quot;diy&quot;expression=&quot;execution(*pojo.UserServiceImpl.*(..))&quot;/&gt;&lt;aop:beforemethod=&quot;before&quot;pointcut-ref=&quot;diy&quot;/&gt;&lt;aop:aftermethod=&quot;after&quot;pointcut-ref=&quot;diy&quot;/&gt;&lt;/aop:aspect&gt;&lt;/aop:config&gt;&lt;/beans&gt;注解实现autoPoint.java和之前的一样packagediy;importorg.aspectj.lang.annotation.After;importorg.aspectj.lang.annotation.Aspect;importorg.aspectj.lang.annotation.Before;importorg.springframework.stereotype.Component;@Aspect//表明这是个切面publicclassautoPoint{@Before(&quot;execution(*pojo.UserServiceImpl.*(..))&quot;)//标记插入点publicvoidbefore(){System.out.println(&quot;---------方法执行前---------&quot;);}@After(&quot;execution(*pojo.UserServiceImpl.*(..))&quot;)publicvoidafter(){System.out.println(&quot;---------方法执行后---------&quot;);}}Context.xml&lt;?xmlversion=&quot;1.0&quot;encoding=&quot;UTF-8&quot;?&gt;&lt;beansxmlns=&quot;http://www.springframework.org/schema/beans&quot;xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;xsi:schemaLocation=&quot;http://www.springframework.org/schema/beanshttps://www.springframework.org/schema/beans/spring-beans.xsdhttp://www.springframework.org/schema/aophttps://www.springframework.org/schema/aop/spring-aop.xsd&quot;&gt;&lt;!--注册Bean--&gt;&lt;beanid=&quot;userService&quot;class=&quot;pojo.UserServiceImpl&quot;/&gt;&lt;beanid=&quot;annotationPointcut&quot;class=&quot;diy.autoPoint&quot;/&gt;&lt;!--通过aop命名空间的&lt;aop:aspectj-autoproxy/&gt;声明自动为spring容器中那些配置@aspectJ切面的bean创建代理，织入切面。当然，spring在内部依旧采用AnnotationAwareAspectJAutoProxyCreator进行自动代理的创建工作，但具体实现的细节已经被&lt;aop:aspectj-autoproxy/&gt;隐藏起来了&lt;aop:aspectj-autoproxy/&gt;有一个proxy-target-class属性，默认为false，表示使用jdk动态代理织入增强，当配为&lt;aop:aspectj-autoproxypoxy-target-class=&quot;true&quot;/&gt;时，表示使用CGLib动态代理技术织入增强。不过即使proxy-target-class设置为false，如果目标类没有声明接口，则spring将自动使用CGLib动态代理。--&gt;&lt;aop:aspectj-autoproxy/&gt;&lt;/beans&gt;spring整合mybatis第一种方法导包junitspringaop织入mybatismybatis-springjdbc编写配置文件spring-dao.xml,不用动&lt;?xmlversion=&quot;1.0&quot;encoding=&quot;UTF-8&quot;?&gt;&lt;beansxmlns=&quot;http://www.springframework.org/schema/beans&quot;xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;xsi:schemaLocation=&quot;http://www.springframework.org/schema/beanshttps://www.springframework.org/schema/beans/spring-beans.xsdhttp://www.springframework.org/schema/aophttps://www.springframework.org/schema/aop/spring-aop.xsd&quot;&gt;&lt;!--要引入spring-jdbc包--&gt;&lt;beanid=&quot;datasource&quot;class=&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;&gt;&lt;propertyname=&quot;driverClassName&quot;value=&quot;com.mysql.cj.jdbc.Driver&quot;/&gt;&lt;propertyname=&quot;url&quot;value=&quot;jdbc:mysql://127.0.0.1:3306/mybatis?useSSL=true&amp;amp;amp;useUnicode=true&amp;amp;amp;characterEncoding=utf-8&amp;amp;amp;serverTimezone=Asia/Shanghai&quot;/&gt;&lt;propertyname=&quot;username&quot;value=&quot;root&quot;/&gt;&lt;propertyname=&quot;password&quot;value=&quot;123456&quot;/&gt;&lt;/bean&gt;&lt;!--核心--&gt;&lt;beanid=&quot;sqlSessionFactory&quot;class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt;&lt;!--绑定--&gt;&lt;propertyname=&quot;dataSource&quot;ref=&quot;datasource&quot;/&gt;&lt;propertyname=&quot;configLocation&quot;value=&quot;classpath:mybatis-config.xml&quot;/&gt;&lt;propertyname=&quot;mapperLocations&quot;value=&quot;mapper/UserMapper.xml&quot;/&gt;&lt;/bean&gt;&lt;!--核心--&gt;&lt;beanid=&quot;sqlSession&quot;class=&quot;org.mybatis.spring.SqlSessionTemplate&quot;&gt;&lt;!--只能用构造器注入，因为它没有set方法--&gt;&lt;constructor-argindex=&quot;0&quot;ref=&quot;sqlSessionFactory&quot;/&gt;&lt;/bean&gt;&lt;/beans&gt;applicationContext.xml&lt;?xmlversion=&quot;1.0&quot;encoding=&quot;UTF-8&quot;?&gt;&lt;beansxmlns=&quot;http://www.springframework.org/schema/beans&quot;xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;xsi:schemaLocation=&quot;http://www.springframework.org/schema/beanshttps://www.springframework.org/schema/beans/spring-beans.xsdhttp://www.springframework.org/schema/aophttps://www.springframework.org/schema/aop/spring-aop.xsd&quot;&gt;&lt;!--使用联合开发，让spring-dao。xml不用动--&gt;&lt;importresource=&quot;spring-dao.xml&quot;/&gt;&lt;beanid=&quot;userMapper&quot;class=&quot;mapper.UserMapperImpl&quot;&gt;&lt;propertyname=&quot;sqlSession&quot;ref=&quot;sqlSession&quot;/&gt;&lt;/bean&gt;&lt;/beans&gt;MybatisUtil.java,不用动packageutil;importorg.apache.ibatis.io.Resources;importorg.apache.ibatis.session.SqlSession;importorg.apache.ibatis.session.SqlSessionFactory;importorg.apache.ibatis.session.SqlSessionFactoryBuilder;importjava.io.IOException;importjava.io.InputStream;publicclassMybatisUtil{privatestaticSqlSessionFactorysqlSessionFactory;static{try{Stringresource=&quot;mybatis-config.xml&quot;;InputStreaminputStream=Resources.getResourceAsStream(resource);sqlSessionFactory=newSqlSessionFactoryBuilder().build(inputStream);}catch(IOExceptione){e.printStackTrace();}}publicstaticSqlSessiongetsqlsession(){returnsqlSessionFactory.openSession();}}db.properties,不用动driver=com.mysql.cj.jdbc.Driverurl=jdbc:mysql://127.0.0.1:3306/mybatis?useSSL=true&amp;amp;useUnicode=true&amp;amp;characterEncoding=utf-8&amp;amp;serverTimezone=Asia/Shanghaiusername=rootpassword=123456测试importmapper.UserMapper;importorg.apache.ibatis.session.SqlSession;importorg.junit.jupiter.api.Test;importorg.springframework.context.ApplicationContext;importorg.springframework.context.support.ClassPathXmlApplicationContext;importpojo.User;importutil.MybatisUtil;importjava.util.List;publicclassTesr{@TestpublicvoidgetUser2(){//这句不用动ApplicationContextcontext=newClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);UserMapperuserMapper=context.getBean(&quot;userMapper&quot;,UserMapper.class);for(Useruser:userMapper.getUser()){System.out.println(user);}}}mybatis-config.xml里面最好什么都不写，全让spring做，不然会扫描两次Mapper.xml,报错步骤实体类-----&gt;接口类------&gt;Mapper.xml------&gt;spring中配置mybatis-----&gt;写实现类------&gt;注入spring回顾mybatis构建数据库编写实体类编写核心配置文件编写接口编写Mapper.xml文件测试第二种方法之前的接口实现类，多继承了一个SqlSessionDaoSupport类，可以直接get获得SqlSession，不用从SqlsessionFactory注入packagemapper;importorg.apache.ibatis.session.SqlSession;importorg.mybatis.spring.support.SqlSessionDaoSupport;importpojo.User;importjava.util.List;publicclassUserMapperImpl2extendsSqlSessionDaoSupportimplementsUserMapper{publicList&lt;User&gt;getUser(){//SqlSessionsqlSession=getSqlSession();//UserMappermapper=sqlSession.getMapper(UserMapper.class);//returnmapper.getUser();returngetSqlSession().getMapper(UserMapper.class).getUser();}}spring-dao相比之前可以少一个sqlSession的核心Bean&lt;?xmlversion=&quot;1.0&quot;encoding=&quot;UTF-8&quot;?&gt;&lt;beansxmlns=&quot;http://www.springframework.org/schema/beans&quot;xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;xsi:schemaLocation=&quot;http://www.springframework.org/schema/beanshttps://www.springframework.org/schema/beans/spring-beans.xsdhttp://www.springframework.org/schema/aophttps://www.springframework.org/schema/aop/spring-aop.xsd&quot;&gt;&lt;!--要引入spring-jdbc包--&gt;&lt;beanid=&quot;datasource&quot;class=&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;&gt;&lt;propertyname=&quot;driverClassName&quot;value=&quot;com.mysql.cj.jdbc.Driver&quot;/&gt;&lt;propertyname=&quot;url&quot;value=&quot;jdbc:mysql://127.0.0.1:3306/mybatis?useSSL=true&amp;amp;amp;useUnicode=true&amp;amp;amp;characterEncoding=utf-8&amp;amp;amp;serverTimezone=Asia/Shanghai&quot;/&gt;&lt;propertyname=&quot;username&quot;value=&quot;root&quot;/&gt;&lt;propertyname=&quot;password&quot;value=&quot;123456&quot;/&gt;&lt;/bean&gt;&lt;!--核心--&gt;&lt;beanid=&quot;sqlSessionFactory&quot;class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt;&lt;!--绑定--&gt;&lt;propertyname=&quot;dataSource&quot;ref=&quot;datasource&quot;/&gt;&lt;propertyname=&quot;configLocation&quot;value=&quot;classpath:mybatis-config.xml&quot;/&gt;&lt;propertyname=&quot;mapperLocations&quot;value=&quot;mapper/UserMapper.xml&quot;/&gt;&lt;/bean&gt;&lt;/beans&gt;之前applicationContext.xml中Bean丢入的的是SqlSession，现在是SqlSessionFactory&lt;?xmlversion=&quot;1.0&quot;encoding=&quot;UTF-8&quot;?&gt;&lt;beansxmlns=&quot;http://www.springframework.org/schema/beans&quot;xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;xsi:schemaLocation=&quot;http://www.springframework.org/schema/beanshttps://www.springframework.org/schema/beans/spring-beans.xsdhttp://www.springframework.org/schema/aophttps://www.springframework.org/schema/aop/spring-aop.xsd&quot;&gt;&lt;!--使用联合开发，让spring-dao。xml不用动--&gt;&lt;importresource=&quot;spring-dao.xml&quot;/&gt;&lt;beanid=&quot;userMapper2&quot;class=&quot;mapper.UserMapperImpl2&quot;&gt;&lt;propertyname=&quot;sqlSessionFactory&quot;ref=&quot;sqlSessionFactory&quot;/&gt;&lt;/bean&gt;&lt;/beans&gt;其他都不变公司常用mybatis-plus或通用Mapper，更简单声明式事务管理完结撒花
5	EasyExcel教程	{Java}	#### 一：为什么会有easyExcel？\r\n   在java解析Excel领域里尽管已经存在Apache poi、jxl等一些优秀的工具。为什么会出现easyExcel呢？在我们开发的过程中，时间长了我们总是会遇到各种各样的问题，要么内存溢出，要么用时过长等等。为了解决这些问题，前辈们就只能优化再优化，于是就有了我们现在用的各种SDK和api。easyExcel就是其中的一个，是有阿里巴巴的前辈们基于POI封装而成。\r\n####    二：easyExcel的优点\r\n相比于POI而言，easyExcel最大的优点在于他基本不占用内存资源。他不像POI一次性将所有数据都加载到内存中，造成内存的溢出。这也是easyExcel的魅力所在，他是逐条将数据加载到内存中。所以只占用了十分有限的内存资源。\r\n#### 三：使用流程\r\n###### 1、导入依赖\r\n```xml\r\n<dependencies>\r\n    <dependency>\r\n        <groupId>com.alibaba</groupId>\r\n        <artifactId>easyexcel</artifactId>\r\n        <version>2.1.1</version>\r\n    </dependency>\r\n</dependencies>\r\n```\r\n###### 2、写操作\r\n1：对象\r\n````java\r\n@Data\r\npublic class EasyDemo {\r\n\r\n    @ExcelProperty(value = "学生编号",index = 0)\r\n    private  Integer sno;\r\n\r\n    @ExcelProperty(value = "学生姓名",index = 1)\r\n    private String sname;\r\n\r\n    @ExcelProperty(value = "入学日期",index = 2)\r\n    private String sdate;\r\n}\r\n````\r\n2：创造一百万条测试数据，实际中数据从数据库中获取\r\n```java\r\n private static List<EasyDemo> getDemoList(){\r\n        List<EasyDemo> easyDemoList = new ArrayList<>();\r\n        for (int i = 1; i <= 1000000; i++) {\r\n            EasyDemo easyDemo = new EasyDemo();\r\n            easyDemo.setSno(i);\r\n            easyDemo.setSname("学号为"+i+"的学生");              \t   \r\n            easyDemo.setSdate(DateFormatUtils.format(System.currentTimeMillis(),"yyyy年MM月dd日"));\r\n            easyDemoList.add(easyDemo);\r\n        }\r\n        return easyDemoList;\r\n    }\r\n```\r\n3：写入文件\r\n```java\r\n    @Test\r\n    void testWrite(){\r\n        String fileName = "F:\\\\EasyExcelRead.xlsx";\r\n        //写操作\r\n        EasyExcel.write(fileName, EasyDemo.class)\r\n                .sheet("学生信息表")\r\n                .doWrite(getDemoList());\r\n    }\r\n```\r\n###### 3：读操作\r\n1：实体对象\r\n```java\r\n@Data\r\npublic class EasyDemo {\r\n\r\n    @ExcelProperty(value = "学生编号",index = 0)\r\n    private  Integer sno;\r\n\r\n    @ExcelProperty(value = "学生姓名",index = 1)\r\n    private String sname;\r\n\r\n    @ExcelProperty(value = "入学日期",index = 2)\r\n    private String sdate;\r\n}\r\n```\r\n2：监听器\r\n```java\r\npublic class EasyExcelListener extends AnalysisEventListener<EasyDemo> {\r\n    /**\r\n     * 每一条数据解析都会来调用\r\n     * @param easyDemo\r\n     * @param analysisContext\r\n     */\r\n    @Override\r\n    public void invoke(EasyDemo easyDemo, AnalysisContext analysisContext) {\r\n         // 具体要进行入库或其他操作\r\n        System.out.println("读取到的数据是：" + easyDemo);\r\n    }\r\n\r\n    public void invokeHeadMap(Map<Integer, String> headMap, AnalysisContext context) {\r\n        System.out.println("读取到的表头是：" + headMap);\r\n    }\r\n\r\n    /**\r\n     * 所有数据加载完会执行\r\n     * @param analysisContext\r\n     */\r\n    @Override\r\n    public void doAfterAllAnalysed(AnalysisContext analysisContext) {\r\n\r\n    }\r\n}\r\n```\r\n3：调用监听\r\n```java\r\n@Test\r\nvoid testRead(){\r\n    String fileName = "F:\\\\EasyExcelRead.xlsx";\r\n    //读操作\r\n    EasyExcel.read(fileName,EasyDemo.class,new EasyExcelListener())\r\n            .sheet("sheet 页")\r\n            .doRead();\r\n}\r\n```	<h4>一：为什么会有easyExcel？</h4>\n<p>在java解析Excel领域里尽管已经存在Apache poi、jxl等一些优秀的工具。为什么会出现easyExcel呢？在我们开发的过程中，时间长了我们总是会遇到各种各样的问题，要么内存溢出，要么用时过长等等。为了解决这些问题，前辈们就只能优化再优化，于是就有了我们现在用的各种SDK和api。easyExcel就是其中的一个，是有阿里巴巴的前辈们基于POI封装而成。</p>\n<h4>二：easyExcel的优点</h4>\n<p>相比于POI而言，easyExcel最大的优点在于他基本不占用内存资源。他不像POI一次性将所有数据都加载到内存中，造成内存的溢出。这也是easyExcel的魅力所在，他是逐条将数据加载到内存中。所以只占用了十分有限的内存资源。</p>\n<h4>三：使用流程</h4>\n<h6>1、导入依赖</h6>\n<pre class="code-block"><code class="code hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br />    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br />        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br />        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>easyexcel<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br />        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br />    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br /><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br /></code></pre>\n<h6>2、写操作</h6>\n<p>1：对象</p>\n<pre class="code-block"><code class="code hljs java"><span class="hljs-meta">@Data</span><br /><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EasyDemo</span> </span>{<br /><br />    <span class="hljs-meta">@ExcelProperty(value = &quot;学生编号&quot;,index = 0)</span><br />    <span class="hljs-keyword">private</span>  Integer sno;<br /><br />    <span class="hljs-meta">@ExcelProperty(value = &quot;学生姓名&quot;,index = 1)</span><br />    <span class="hljs-keyword">private</span> String sname;<br /><br />    <span class="hljs-meta">@ExcelProperty(value = &quot;入学日期&quot;,index = 2)</span><br />    <span class="hljs-keyword">private</span> String sdate;<br />}<br /></code></pre>\n<p>2：创造一百万条测试数据，实际中数据从数据库中获取</p>\n<pre class="code-block"><code class="code hljs java"> <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> List&lt;EasyDemo&gt; <span class="hljs-title">getDemoList</span><span class="hljs-params">()</span></span>{<br />        List&lt;EasyDemo&gt; easyDemoList = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br />        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">1000000</span>; i++) {<br />            EasyDemo easyDemo = <span class="hljs-keyword">new</span> EasyDemo();<br />            easyDemo.setSno(i);<br />            easyDemo.setSname(<span class="hljs-string">&quot;学号为&quot;</span>+i+<span class="hljs-string">&quot;的学生&quot;</span>);              \t   <br />            easyDemo.setSdate(DateFormatUtils.format(System.currentTimeMillis(),<span class="hljs-string">&quot;yyyy年MM月dd日&quot;</span>));<br />            easyDemoList.add(easyDemo);<br />        }<br />        <span class="hljs-keyword">return</span> easyDemoList;<br />    }<br /></code></pre>\n<p>3：写入文件</p>\n<pre class="code-block"><code class="code hljs java">    <span class="hljs-meta">@Test</span><br />    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">testWrite</span><span class="hljs-params">()</span></span>{<br />        String fileName = <span class="hljs-string">&quot;F:\\\\EasyExcelRead.xlsx&quot;</span>;<br />        <span class="hljs-comment">//写操作</span><br />        EasyExcel.write(fileName, EasyDemo.class)<br />                .sheet(<span class="hljs-string">&quot;学生信息表&quot;</span>)<br />                .doWrite(getDemoList());<br />    }<br /></code></pre>\n<h6>3：读操作</h6>\n<p>1：实体对象</p>\n<pre class="code-block"><code class="code hljs java"><span class="hljs-meta">@Data</span><br /><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EasyDemo</span> </span>{<br /><br />    <span class="hljs-meta">@ExcelProperty(value = &quot;学生编号&quot;,index = 0)</span><br />    <span class="hljs-keyword">private</span>  Integer sno;<br /><br />    <span class="hljs-meta">@ExcelProperty(value = &quot;学生姓名&quot;,index = 1)</span><br />    <span class="hljs-keyword">private</span> String sname;<br /><br />    <span class="hljs-meta">@ExcelProperty(value = &quot;入学日期&quot;,index = 2)</span><br />    <span class="hljs-keyword">private</span> String sdate;<br />}<br /></code></pre>\n<p>2：监听器</p>\n<pre class="code-block"><code class="code hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EasyExcelListener</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AnalysisEventListener</span>&lt;<span class="hljs-title">EasyDemo</span>&gt; </span>{<br />    <span class="hljs-comment">/**<br />     * 每一条数据解析都会来调用<br />     * <span class="hljs-doctag">@param</span> easyDemo<br />     * <span class="hljs-doctag">@param</span> analysisContext<br />     */</span><br />    <span class="hljs-meta">@Override</span><br />    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">invoke</span><span class="hljs-params">(EasyDemo easyDemo, AnalysisContext analysisContext)</span> </span>{<br />         <span class="hljs-comment">// 具体要进行入库或其他操作</span><br />        System.out.println(<span class="hljs-string">&quot;读取到的数据是：&quot;</span> + easyDemo);<br />    }<br /><br />    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">invokeHeadMap</span><span class="hljs-params">(Map&lt;Integer, String&gt; headMap, AnalysisContext context)</span> </span>{<br />        System.out.println(<span class="hljs-string">&quot;读取到的表头是：&quot;</span> + headMap);<br />    }<br /><br />    <span class="hljs-comment">/**<br />     * 所有数据加载完会执行<br />     * <span class="hljs-doctag">@param</span> analysisContext<br />     */</span><br />    <span class="hljs-meta">@Override</span><br />    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doAfterAllAnalysed</span><span class="hljs-params">(AnalysisContext analysisContext)</span> </span>{<br /><br />    }<br />}<br /></code></pre>\n<p>3：调用监听</p>\n<pre class="code-block"><code class="code hljs java"><span class="hljs-meta">@Test</span><br /><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">testRead</span><span class="hljs-params">()</span></span>{<br />    String fileName = <span class="hljs-string">&quot;F:\\\\EasyExcelRead.xlsx&quot;</span>;<br />    <span class="hljs-comment">//读操作</span><br />    EasyExcel.read(fileName,EasyDemo.class,<span class="hljs-keyword">new</span> EasyExcelListener())<br />            .sheet(<span class="hljs-string">&quot;sheet 页&quot;</span>)<br />            .doRead();<br />}<br /></code></pre>\n	7	0	0	f	2021-04-22 22:25:02.808106	2021-04-22 22:27:12.580626	1	https://cdn.zhoupb.com/image/generate/8da745cff13780a8bac5a2e89f94e95f.png	一：为什么会有easyExcel？在java解析Excel领域里尽管已经存在Apachepoi、jxl等一些优秀的工具。为什么会出现easyExcel呢？在我们开发的过程中，时间长了我们总是会遇到各种各样的问题，要么内存溢出，要么用时过长等等。为了解决这些问题，前辈们就只能优化再优化，于是就有了我们现在用的各种SDK和api。easyExcel就是其中的一个，是有阿里巴巴的前辈们基于POI封装而成。二：easyExcel的优点相比于POI而言，easyExcel最大的优点在于他基本不占用内存资源。他不像POI一次性将所有数据都加载到内存中，造成内存的溢出。这也是easyExcel的魅力所在，他是逐条将数据加载到内存中。所以只占用了十分有限的内存资源。三：使用流程1、导入依赖&lt;dependencies&gt;&lt;dependency&gt;&lt;groupId&gt;com.alibaba&lt;/groupId&gt;&lt;artifactId&gt;easyexcel&lt;/artifactId&gt;&lt;version&gt;2.1.1&lt;/version&gt;&lt;/dependency&gt;&lt;/dependencies&gt;2、写操作1：对象@DatapublicclassEasyDemo{@ExcelProperty(value=&quot;学生编号&quot;,index=0)privateIntegersno;@ExcelProperty(value=&quot;学生姓名&quot;,index=1)privateStringsname;@ExcelProperty(value=&quot;入学日期&quot;,index=2)privateStringsdate;}2：创造一百万条测试数据，实际中数据从数据库中获取privatestaticList&lt;EasyDemo&gt;getDemoList(){List&lt;EasyDemo&gt;easyDemoList=newArrayList&lt;&gt;();for(inti=1;i&lt;=1000000;i++){EasyDemoeasyDemo=newEasyDemo();easyDemo.setSno(i);easyDemo.setSname(&quot;学号为&quot;+i+&quot;的学生&quot;);easyDemo.setSdate(DateFormatUtils.format(System.currentTimeMillis(),&quot;yyyy年MM月dd日&quot;));easyDemoList.add(easyDemo);}returneasyDemoList;}3：写入文件@TestvoidtestWrite(){StringfileName=&quot;F:\\\\EasyExcelRead.xlsx&quot;;//写操作EasyExcel.write(fileName,EasyDemo.class).sheet(&quot;学生信息表&quot;).doWrite(getDemoList());}3：读操作1：实体对象@DatapublicclassEasyDemo{@ExcelProperty(value=&quot;学生编号&quot;,index=0)privateIntegersno;@ExcelProperty(value=&quot;学生姓名&quot;,index=1)privateStringsname;@ExcelProperty(value=&quot;入学日期&quot;,index=2)privateStringsdate;}2：监听器publicclassEasyExcelListenerextendsAnalysisEventListener&lt;EasyDemo&gt;{/***每一条数据解析都会来调用*@parameasyDemo*@paramanalysisContext*/@Overridepublicvoidinvoke(EasyDemoeasyDemo,AnalysisContextanalysisContext){//具体要进行入库或其他操作System.out.println(&quot;读取到的数据是：&quot;+easyDemo);}publicvoidinvokeHeadMap(Map&lt;Integer,String&gt;headMap,AnalysisContextcontext){System.out.println(&quot;读取到的表头是：&quot;+headMap);}/***所有数据加载完会执行*@paramanalysisContext*/@OverridepublicvoiddoAfterAllAnalysed(AnalysisContextanalysisContext){}}3：调用监听@TestvoidtestRead(){StringfileName=&quot;F:\\\\EasyExcelRead.xlsx&quot;;//读操作EasyExcel.read(fileName,EasyDemo.class,newEasyExcelListener()).sheet(&quot;sheet页&quot;).doRead();}
11	SSM整合（教你快速搭建一个ssm项目）	{SSM,Java,Spring}	## 基本环境搭建\r\n\r\n#### 1.创建一个maven项目\t\r\n\r\n相信各位大佬都会＜（＾－＾）＞\r\n\r\n#### 2.导入相关依赖\r\n\r\n所有依赖都在这里汇总了，后面就不多说\r\n\r\n```xml\r\n<!--数据库-->\r\n<dependency>\r\n    <groupId>mysql</groupId>\r\n    <artifactId>mysql-connector-java</artifactId>\r\n    <version>8.0.22</version>\r\n</dependency>\r\n<!--连接池c3po dbcp druid-->\r\n<dependency>\r\n    <groupId>com.alibaba</groupId>\r\n    <artifactId>druid</artifactId>\r\n    <version>1.2.1</version>\r\n</dependency>\r\n<!--mybatis-->\r\n<dependency>\r\n    <groupId>org.mybatis</groupId>\r\n    <artifactId>mybatis</artifactId>\r\n    <version>3.5.5</version>\r\n</dependency>\r\n<!-- mybatis-spring整合 -->\r\n<dependency>\r\n    <groupId>org.mybatis</groupId>\r\n    <artifactId>mybatis-spring</artifactId>\r\n    <version>2.0.5</version>\r\n</dependency>\r\n<!-- aspectJ AOP 织入器 -->\r\n<dependency>\r\n    <groupId>org.aspectj</groupId>\r\n    <artifactId>aspectjweaver</artifactId>\r\n    <version>1.9.6</version>\r\n</dependency>\r\n<!--Spring-->\r\n<dependency>\r\n    <groupId>org.springframework</groupId>\r\n    <artifactId>spring-webmvc</artifactId>\r\n    <version>5.2.10.RELEASE</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.springframework</groupId>\r\n    <artifactId>spring-jdbc</artifactId>\r\n    <version>5.2.10.RELEASE</version>\r\n</dependency>\r\n<!--servlet jsp-->\r\n<dependency>\r\n    <groupId>javax.servlet</groupId>\r\n    <artifactId>servlet-api</artifactId>\r\n    <version>2.5</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>javax.servlet.jsp</groupId>\r\n    <artifactId>jsp-api</artifactId>\r\n    <version>2.2</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>jstl</groupId>\r\n    <artifactId>jstl</artifactId>\r\n    <version>1.2</version>\r\n</dependency>\r\n<!--lombok-->\r\n<dependency>\r\n    <groupId>org.projectlombok</groupId>\r\n    <artifactId>lombok</artifactId>\r\n    <version>1.18.16</version>\r\n</dependency>\r\n<!--log4j2-->\r\n<dependency>\r\n    <groupId>log4j</groupId>\r\n    <artifactId>log4j</artifactId>\r\n    <version>1.2.17</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.slf4j</groupId>\r\n    <artifactId>slf4j-api</artifactId>\r\n    <version>1.7.30</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.slf4j</groupId>\r\n    <artifactId>slf4j-log4j12</artifactId>\r\n    <version>1.7.5</version>\r\n</dependency>\r\n<!--Junit-->\r\n<dependency>\r\n    <groupId>junit</groupId>\r\n    <artifactId>junit</artifactId>\r\n    <version>4.13</version>\r\n    <scope>test</scope>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.junit.jupiter</groupId>\r\n    <artifactId>junit-jupiter</artifactId>\r\n    <version>RELEASE</version>\r\n    <scope>compile</scope>\r\n</dependency>\r\n<!--fastjson-->\r\n<dependency>\r\n    <groupId>com.alibaba</groupId>\r\n    <artifactId>fastjson</artifactId>\r\n    <version>1.2.72</version>\r\n</dependency>\r\n```\r\n\r\n为避免资源导出问题可以添加以下代码\r\n\r\n```xml\r\n<!--静态资源导出问题-->\r\n<build>\r\n    <resources>\r\n        <resource>\r\n            <directory>src/main/java</directory>\r\n            <includes>\r\n                <include>**/*.properties</include>\r\n                <include>**/*.xml</include>\r\n            </includes>\r\n            <filtering>false</filtering>\r\n        </resource>\r\n        <resource>\r\n            <directory>src/main/resources</directory>\r\n            <includes>\r\n                <include>**/*.properties</include>\r\n                <include>**/*.xml</include>\r\n            </includes>\r\n            <filtering>false</filtering>\r\n        </resource>\r\n    </resources>\r\n</build>\r\n```\r\n\r\n#### 3.建表\r\n\r\n建一个user表\r\n\r\n```sql\r\nDROP TABLE IF EXISTS `user`;\r\nCREATE TABLE `user`  (\r\n  `id` int NOT NULL,\r\n  `name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,\r\n  `age` int NULL DEFAULT NULL,\r\n  PRIMARY KEY (`id`) USING BTREE\r\n) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = Dynamic;\r\n```\r\n\r\n#### 4.实体类(src/main/java/)\r\n\r\n这里用了lombok，省去了get、set方法，简洁多了\r\n\r\n```java\r\n@Data\r\n@AllArgsConstructor\r\n@NoArgsConstructor\r\npublic class User {\r\n\r\n    private Integer id;\r\n    private String name;\r\n    private Integer age;\r\n\r\n}\r\n```\r\n\r\n#### 5.Dao接口\r\n\r\n```java\r\n@Repository\r\npublic interface UserDao {\r\n\r\n    public void addUser(User user);\r\n\r\n    public int deleteUserById(@Param("id") int id);\r\n\r\n    public int updateUser(User user);\r\n\r\n    public List<User> queryAll();\r\n\r\n    public User queryById(@Param("id") int id);\r\n}\r\n```\r\n\r\n#### 6.Mapper配置文件（src/main/resources/mapper/）\r\n\r\n除了使用mapper.xml文件编写sql语句，还可以使用注解注入sql语句，这里我用的是配置文件。\r\n\r\n```xml\r\n<?xml version="1.0" encoding="UTF-8"?>\r\n<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">\r\n<mapper namespace="com.zzy.dao.UserDao">\r\n\r\n    <insert id="addUser" parameterType="User">\r\n        insert into user values(#{id},#{name},#{age})\r\n    </insert>\r\n\r\n    <delete id="deleteUserById" parameterType="int">\r\n        delete from user where id = #{id}\r\n    </delete>\r\n\r\n    <update id="updateUser" parameterType="User">\r\n        update user set id=#{id},name=#{name},age=#{age}\r\n    </update>\r\n\r\n    <select id="queryAll" resultType="User">\r\n        select * from user\r\n    </select>\r\n\r\n    <select id="queryById" resultType="User">\r\n        select * from user where id = #{id}\r\n    </select>\r\n</mapper>\r\n```\r\n\r\n#### 7.Service接口\r\n\r\n```java\r\npublic interface UserService {\r\n\r\n    public void addUser(User user);\r\n\r\n    public int deleteUserById(int id);\r\n\r\n    public int updateUser(User user);\r\n\r\n    public List<User> queryAll();\r\n\r\n    public User queryById(int id);\r\n}\r\n```\r\n\r\n#### 8.Service接口实现类\r\n\r\n```java\r\n@Service("userService")\r\npublic class UserServiceImpl implements UserService {\r\n\r\n    @Autowired\r\n    private UserDao userDao;\r\n\r\n\r\n    @Override\r\n    public List<User> queryAll() {\r\n        System.out.println("======================service业务层，显示所有用户======================");\r\n        return userDao.queryAll();\r\n    }\r\n\r\n    @Override\r\n    public User queryById(int id) {\r\n        return null;\r\n    }\r\n\r\n    @Override\r\n    public void addUser(User user) {\r\n        System.out.println("====================service业务层，保存用户========================");\r\n        userDao.addUser(user);\r\n    }\r\n\r\n    @Override\r\n    public int deleteUserById(int id) {\r\n        return 0;\r\n    }\r\n\r\n    @Override\r\n    public int updateUser(User user) {\r\n        return 0;\r\n    }\r\n\r\n}\r\n```\r\n\r\n\r\n\r\n\r\n\r\n## spring环境搭建\r\n\r\n#### 1.applicationContext.xml配置文件（src/main/resources/）\r\n\r\n```xml\r\n<?xml version="1.0" encoding="UTF-8"?>\r\n<beans xmlns="http://www.springframework.org/schema/beans"\r\n       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\r\n       xmlns:context="http://www.springframework.org/schema/context"\r\n       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.alibaba.com/schema/stat http://www.alibaba.com/schema/stat.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd">\r\n\r\n    <!-- 开启注解扫描 -->\r\n    <context:component-scan base-package="com.zzy">\r\n        <!--配置哪些注解不扫描-->\r\n        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>\r\n    </context:component-scan>\r\n    \r\n</beans>\r\n```\r\n\r\n#### 2.SpringTest测试类（src/main/java/com/zzy/test/）\r\n\r\n```java\r\npublic class SpringTest {\r\n    @Test\r\n    public void test1(){\r\n        ApplicationContext context = new ClassPathXmlApplicationContext("applicationContext.xml");\r\n        UserService userService = (UserService) context.getBean("userService");\r\n        userService.queryAll();\r\n    }\r\n}\r\n```\r\n\r\n后台打印输出“service业务层，显示所有用户”，则spring环境搭建成功！\r\n\r\n\r\n\r\n## mybatis环境搭建\r\n\r\n#### 1.dao接口和mapper.xml配置文件\r\n\r\nmybatis环境搭建首先要编写dao接口和mapper.xml核心配置文件，前面已经说过了，这里就不重复了。\r\n\r\n#### 2.mybatis-config.xml配置文件\r\n\r\n```xml\r\n<?xml version="1.0" encoding="UTF-8" ?>\r\n<!DOCTYPE configuration\r\n        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"\r\n        "http://mybatis.org/dtd/mybatis-3-config.dtd">\r\n<configuration>\r\n    \r\n    <typeAliases>\r\n        <package name="com.zzy.pojo"/>\r\n    </typeAliases>\r\n    \r\n    <!--数据库环境配置,后面sm整合时并入applicationContext.xml中可以去掉-->\r\n    <environments default="development">\r\n        <environment id="development">\r\n            <transactionManager type="JDBC"/>\r\n            <dataSource type="POOLED">\r\n                <property name="driver" value="com.mysql.cj.jdbc.Driver"/>\r\n                <property name="url" value="jdbc:mysql://localhost:3306/study?useSSL=false&amp;amp;useUnicode=true&amp;amp;characterEncoding=utf-8&amp;amp;serverTimezone=UTC"/>\r\n                <property name="username" value="root"/>\r\n                <property name="password" value="root"/>\r\n            </dataSource>\r\n        </environment>\r\n    </environments>\r\n    \r\n    <!--注册mapper.xml的位置-->\r\n    <mappers>\r\n        <package name="com.zzy.dao"/>\r\n    </mappers>\r\n    \r\n</configuration>\r\n```\r\n\r\n#### 3.MybatisTest测试类\r\n\r\n```java\r\npublic class MybatisTest {\r\n    @Test\r\n    public void test1() throws IOException {\r\n        InputStream in = Resources.getResourceAsStream("applicationContext.xml");\r\n        SqlSessionFactory factory = new SqlSessionFactoryBuilder().build(in);\r\n        SqlSession sqlSession = factory.openSession();\r\n        UserDao dao = sqlSession.getMapper(UserDao.class);\r\n        List<User> userList = dao.queryAll();\r\n        for (User user:userList) {\r\n            System.out.println(user);\r\n        }\r\n        sqlSession.close();\r\n        in.close();\r\n    }\r\n    @Test\r\n    public void test2() throws IOException {\r\n        User user = new User();\r\n        user.setId(3);\r\n        user.setName("小芳");\r\n        user.setAge(20);\r\n        //加载配置文件\r\n        InputStream in = Resources.getResourceAsStream("applicationContext.xml");\r\n        //创建SqlSessionFactory对象\r\n        SqlSessionFactory factory = new SqlSessionFactoryBuilder().build(in);\r\n        //创建sqlSession对象\r\n        SqlSession sqlSession = factory.openSession();\r\n        //获取到代理对象\r\n        UserDao dao = sqlSession.getMapper(UserDao.class);\r\n        //保存\r\n        dao.addUser(user);\r\n        //提交事务\r\n        sqlSession.commit();\r\n        //关闭资源\r\n        sqlSession.close();\r\n        in.close();\r\n    }\r\n}\r\n```\r\n\r\n\r\n\r\n\r\n\r\n## sm整合（spring+mybatis）\r\n\r\n#### 1.整合思路\r\n\r\n​\tService能成功调用dao对象，能够做查询操作或者新增数据能存进数据库即为整合成功。要和 Spring 一起使用 MyBatis，需要在 Spring 应用上下文中定义至少两样东西：一个 SqlSessionFactory 和至少一个数据映射器类。在 MyBatis-Spring 中，可使用 SqlSessionFactoryBean 来创建 SqlSessionFactory，SqlSessionFactory 唯一的必要属性是 DataSource，一个常用的属性是 configLocation，它用来指定 MyBatis 的 XML 配置文件路径。SqlSessionTemplate 是 MyBatis-Spring 的核心。作为 SqlSession 的一个实现，这意味着可以使用它无缝代替你代码中已经在使用的 SqlSession。模板可以参与到 Spring 的事务管理中，并且由于其是线程安全的，可以供多个映射器类使用，你应该总是用 SqlSessionTemplate 来替换 MyBatis 默认的 DefaultSqlSession 实现。在同一应用程序中的不同类之间混杂使用可能会引起数据一致性的问题。可以使用 SqlSessionFactory 作为构造方法的参数来创建 SqlSessionTemplate对象。\r\n\r\n#### 2.在applicationContext.xml 文件中整合 mybatis\r\n\r\n​\t整合步骤：\r\n\r\n- 开启注解扫描\r\n- 创建数据源dataSource（这里配置了mybatis-config.xml中的数据库环境，可以去掉environments里的内容了）\r\n- 创建SqlSessionFactory\r\n- 创建DAO\r\n- 创建事务管理器\r\n\r\n```xml\r\n<?xml version="1.0" encoding="UTF-8"?>\r\n<beans xmlns="http://www.springframework.org/schema/beans"\r\n       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\r\n       xmlns:context="http://www.springframework.org/schema/context"\r\n       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">\r\n\r\n    <!-- 开启注解扫描 -->\r\n    <context:component-scan base-package="com.zzy">\r\n        <!--配置哪些注解不扫描-->\r\n        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>\r\n    </context:component-scan>\r\n\r\n<!-- 整合：spring 接管 mybatis 中配置SqlSessionFactory对象的创建-->\r\n    <!-- 数据源druid-->\r\n    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">\r\n        <property name="driverClassName" value="com.mysql.cj.jdbc.Driver"/>\r\n        <property name="url" value="jdbc:mysql://localhost:3306/study?useSSL=false&amp;amp;useUnicode=true&amp;amp;characterEncoding=utf-8&amp;amp;serverTimezone=UTC"/>\r\n        <property name="username" value="root"/>\r\n        <property name="password" value="root"/>\r\n    </bean>\r\n\r\n    <!-- 配置SqlSessionFactory对象 -->\r\n    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">\r\n        <!-- 注入数据源 -->\r\n        <property name="dataSource" ref="dataSource"/>\r\n        <!--关联Mybatis-->\r\n        <property name="configLocation" value="classpath:mybatis-config.xml"/>\r\n        <!-- 扫描sql配置文件：Dao对应的*mapper.xml文件-->\r\n        <property name="mapperLocations" value="classpath:mapper/*.xml"/>\r\n    </bean>\r\n\r\n    <!-- 配置扫描Dao接口包，动态实现Dao接口注入到spring容器中 -->\r\n    <bean id="MapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">\r\n        <!-- 注入SqlSessionFactory -->\r\n        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>\r\n        <!-- 扫描DAO接口所在包 -->\r\n        <property name="basePackage" value="com.zzy.dao"/>\r\n    </bean>\r\n    \r\n        <!--配置事务管理器 -->\r\n        <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">\r\n            <property name="dataSource" ref="dataSource"/>\r\n        </bean>\r\n\r\n    <!-- 配置事务管理器 -->\r\n        <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">\r\n            <property name="dataSource" ref="dataSource"/>\r\n        </bean>\r\n\r\n</beans>\r\n```\r\n\r\n\r\n\r\n\r\n\r\n## springmvc环境搭建\r\n\r\n#### 1.在web.xml中配置DispatherServlet前端控制器\r\n\r\n```xml\r\n<!--配置前端控制器-->\r\n<servlet>\r\n    <servlet-name>dispatcherServlet</servlet-name>\r\n    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>\r\n    <init-param>\r\n        <param-name>contextConfigLocation</param-name>\r\n        <param-value>classpath:springmvc.xml</param-value>\r\n    </init-param>\r\n    <load-on-startup>1</load-on-startup>\r\n</servlet>\r\n\r\n<servlet-mapping>\r\n    <servlet-name>dispatcherServlet</servlet-name>\r\n    <url-pattern>/</url-pattern>\r\n</servlet-mapping>\r\n```\r\n\r\n设置拦截器，解决乱码问题\r\n\r\n```xml\r\n<!--设置字符集拦截器，解决中文乱码问题-->\r\n<filter>\r\n    <filter-name>characterEncodingFilter</filter-name>\r\n    <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>\r\n    <init-param>\r\n        <param-name>encoding</param-name>\r\n        <param-value>UTF-8</param-value>\r\n    </init-param>\r\n</filter>\r\n<filter-mapping>\r\n    <filter-name>characterEncodingFilter</filter-name>\r\n    <url-pattern>/*</url-pattern>\r\n</filter-mapping>\r\n<!--设置RestFul风格拦截器-->\r\n<filter>\r\n    <filter-name>hiddenHttpMethodFilter</filter-name>\r\n    <filter-class>org.springframework.web.filter.HiddenHttpMethodFilter</filter-class>\r\n</filter>\r\n<filter-mapping>\r\n    <filter-name>hiddenHttpMethodFilter</filter-name>\r\n    <url-pattern>/*</url-pattern>\r\n</filter-mapping>\r\n```\r\n\r\n#### 2.引入springmvc.xml\r\n\r\n```xml\r\n<?xml version="1.0" encoding="UTF-8"?>\r\n<beans xmlns="http://www.springframework.org/schema/beans"\r\n       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\r\n       xmlns:context="http://www.springframework.org/schema/context" xmlns:mvc="http://www.alibaba.com/schema/stat"\r\n       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.alibaba.com/schema/stat http://www.alibaba.com/schema/stat.xsd">\r\n\r\n    <context:component-scan base-package="com.zzy.controller"/>\r\n\r\n    <mvc:annotation-driven/>\r\n\r\n    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">\r\n        <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>\r\n        <property name="prefix" value="/WEB-INF/jsp/"/>\r\n        <property name="suffix" value=".jsp"/>\r\n    </bean>\r\n    \r\n</beans>\r\n```\r\n\r\n#### 3.编写controller代码\r\n\r\n```java\r\n@Controller\r\n@RequestMapping("/user")\r\npublic class UserController {\r\n\r\n    @Autowired\r\n    private UserService userService;\r\n\r\n    @RequestMapping("/queryAll")\r\n    public String findAll(Model model){\r\n        System.out.println("========================Controller层，查询所有用户=================");\r\n        List<User> list = userService.queryAll();\r\n        model.addAttribute("list",list);\r\n        return "hello";\r\n    }\r\n\r\n    @RequestMapping("/addUser")\r\n    public void save(User user, HttpServletRequest request, HttpServletResponse response) throws IOException {\r\n        System.out.println("========================Controller层，保存用户=================");\r\n        userService.addUser(user);\r\n        response.sendRedirect(request.getContextPath()+"/user/queryAll");\r\n        return;\r\n    }\r\n}\r\n```\r\n\r\n#### 4.创建jsp页面\r\n\r\nindex.jsp页面\r\n\r\n```jsp\r\n<%@ page contentType="text/html;charset=UTF-8" language="java" %>\r\n<html>\r\n<head>\r\n    <title>Title</title>\r\n</head>\r\n<body>\r\n    <a href="user/queryAll">查询所有用户</a>\r\n\r\n    <form action="user/addUser" method="post">\r\n        ID：<input type="text" name="id"/><br>\r\n        姓名：<input type="text" name="name"/><br>\r\n        年龄：<input type="text" name="age"/><br>\r\n        <input type="submit" value="保存"><br>\r\n    </form>\r\n</body>\r\n</html>\r\n```\r\n\r\njsp/hello.jsp页面\r\n\r\n```jsp\r\n<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>\r\n<%@ page contentType="text/html;charset=UTF-8" language="java" %>\r\n<html>\r\n<head>\r\n    <title>所有用户</title>\r\n</head>\r\n<body>\r\n    <h1>已查询所有用户</h1>\r\n    <c:forEach items="${list}" var="user">\r\n        ${user.name}\r\n    </c:forEach>\r\n</body>\r\n</html>\r\n```\r\n\r\n#### 5.部署tomcat服务器测试\r\n\r\n\r\n\r\n\r\n\r\n## ss整合（spring+springmvc）\r\n\r\n#### 1.整合思路\r\n\r\n**在controller（SpringMVC）中能成功的调用service（Spring）对象中的方法**即为整合成功。要想在controller中调用service方法，就要注入service到controller中来，有service对象才可以调用service方法。现在我们启动Tomcat之后，因为web.xml中配置了前端控制器，web容器会帮我们加载springmvc.xml配置文件，但在springmvc.xml配置文件中我们是只扫描controller，别的不扫。所以applicationContext.xml文件就从头到尾没有执行过，applicationContext中的配置扫描自然也不会去扫描，就相当于没有将spring交到IOC容器当中去。那么，怎么在启动服务器时去加载applicationContext配置文件呢？这时候我们就需要配置监听器了。\r\n\r\n#### 2.在web.xml中配置ContextLoaderListener监听器\r\n\r\n```xml\r\n<!--配置spring的监听器-->\r\n<listener>\r\n    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>\r\n</listener>\r\n<!--设置applicationContext.xml配置文件的路径-->\r\n<context-param>\r\n    <param-name>contextConfigLocation</param-name>\r\n    <param-value>classpath:applicationContext.xml</param-value>\r\n</context-param>\r\n```\r\n\r\n#### 3.编写Controller代码\r\n\r\n在controller中注入service\r\n\r\n```java\r\n@Controller\r\n@RequestMapping("/user")\r\npublic class UserController {\r\n\r\n    @Autowired\r\n    private UserService userService;\r\n\r\n    @RequestMapping("/queryAll")\r\n    public String queryAll(Model model){\r\n        System.out.println("========================Controller层，查询所有用户=================");\r\n        List<User> userList = userService.queryAll();\r\n        model.addAttribute("userList",userList);\r\n        return "user";\r\n    }\r\n\r\n    @RequestMapping("/addUser")\r\n    public void addUser(User user, HttpServletRequest request, HttpServletResponse response) throws IOException {\r\n        System.out.println("========================Controller层，保存用户=================");\r\n        userService.addUser(user);\r\n        response.sendRedirect(request.getContextPath()+"/user/queryAll");\r\n    }\r\n}\r\n```\r\n\r\n#### 4.启动tomcat测试\r\n\r\n如果可以出现页面并且点击保存后台输出“Controller层.......”，则spring、springmvc整合成功！	<h2>基本环境搭建</h2>\n<h4>1.创建一个maven项目</h4>\n<p>相信各位大佬都会＜（＾－＾）＞</p>\n<h4>2.导入相关依赖</h4>\n<p>所有依赖都在这里汇总了，后面就不多说</p>\n<pre class="code-block"><code class="code hljs xml"><span class="hljs-comment">&lt;!--数据库--&gt;</span><br /><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br />    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br />    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br />    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.22<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br /><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br /><span class="hljs-comment">&lt;!--连接池c3po dbcp druid--&gt;</span><br /><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br />    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br />    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br />    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br /><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br /><span class="hljs-comment">&lt;!--mybatis--&gt;</span><br /><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br />    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br />    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br />    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br /><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br /><span class="hljs-comment">&lt;!-- mybatis-spring整合 --&gt;</span><br /><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br />    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br />    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br />    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br /><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br /><span class="hljs-comment">&lt;!-- aspectJ AOP 织入器 --&gt;</span><br /><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br />    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.aspectj<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br />    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aspectjweaver<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br />    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.9.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br /><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br /><span class="hljs-comment">&lt;!--Spring--&gt;</span><br /><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br />    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br />    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br />    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.10.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br /><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br /><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br />    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br />    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-jdbc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br />    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.10.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br /><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br /><span class="hljs-comment">&lt;!--servlet jsp--&gt;</span><br /><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br />    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br />    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br />    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br /><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br /><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br />    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br />    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jsp-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br />    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br /><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br /><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br />    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>jstl<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br />    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jstl<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br />    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br /><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br /><span class="hljs-comment">&lt;!--lombok--&gt;</span><br /><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br />    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br />    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br />    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.18.16<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br /><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br /><span class="hljs-comment">&lt;!--log4j2--&gt;</span><br /><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br />    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br />    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br />    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.17<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br /><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br /><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br />    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.slf4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br />    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>slf4j-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br />    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.7.30<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br /><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br /><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br />    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.slf4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br />    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>slf4j-log4j12<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br />    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.7.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br /><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br /><span class="hljs-comment">&lt;!--Junit--&gt;</span><br /><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br />    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br />    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br />    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.13<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br />    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br /><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br /><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br />    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.junit.jupiter<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br />    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit-jupiter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br />    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br />    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>compile<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br /><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br /><span class="hljs-comment">&lt;!--fastjson--&gt;</span><br /><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br />    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br />    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>fastjson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br />    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.72<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br /><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br /></code></pre>\n<p>为避免资源导出问题可以添加以下代码</p>\n<pre class="code-block"><code class="code hljs xml"><span class="hljs-comment">&lt;!--静态资源导出问题--&gt;</span><br /><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br />    <span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br />        <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br />            <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/java<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br />            <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br />                <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br />                <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br />            <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br />            <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br />        <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br />        <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br />            <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/resources<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br />            <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br />                <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br />                <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br />            <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br />            <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br />        <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br />    <span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br /><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br /></code></pre>\n<h4>3.建表</h4>\n<p>建一个user表</p>\n<pre class="code-block"><code class="code hljs sql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> `<span class="hljs-keyword">user</span>`;<br /><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `<span class="hljs-keyword">user</span>`  (<br />  `id` <span class="hljs-type">int</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br />  `name` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8mb4 <span class="hljs-keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br />  `age` <span class="hljs-type">int</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br />  <span class="hljs-keyword">PRIMARY</span> KEY (`id`) <span class="hljs-keyword">USING</span> BTREE<br />) ENGINE <span class="hljs-operator">=</span> InnoDB <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> <span class="hljs-operator">=</span> utf8mb4 <span class="hljs-keyword">COLLATE</span> <span class="hljs-operator">=</span> utf8mb4_0900_ai_ci ROW_FORMAT <span class="hljs-operator">=</span> <span class="hljs-keyword">Dynamic</span>;<br /></code></pre>\n<h4>4.实体类(src/main/java/)</h4>\n<p>这里用了lombok，省去了get、set方法，简洁多了</p>\n<pre class="code-block"><code class="code hljs java"><span class="hljs-meta">@Data</span><br /><span class="hljs-meta">@AllArgsConstructor</span><br /><span class="hljs-meta">@NoArgsConstructor</span><br /><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>{<br /><br />    <span class="hljs-keyword">private</span> Integer id;<br />    <span class="hljs-keyword">private</span> String name;<br />    <span class="hljs-keyword">private</span> Integer age;<br /><br />}<br /></code></pre>\n<h4>5.Dao接口</h4>\n<pre class="code-block"><code class="code hljs java"><span class="hljs-meta">@Repository</span><br /><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserDao</span> </span>{<br /><br />    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addUser</span><span class="hljs-params">(User user)</span></span>;<br /><br />    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">deleteUserById</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;id&quot;)</span> <span class="hljs-keyword">int</span> id)</span></span>;<br /><br />    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">updateUser</span><span class="hljs-params">(User user)</span></span>;<br /><br />    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title">queryAll</span><span class="hljs-params">()</span></span>;<br /><br />    <span class="hljs-function"><span class="hljs-keyword">public</span> User <span class="hljs-title">queryById</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;id&quot;)</span> <span class="hljs-keyword">int</span> id)</span></span>;<br />}<br /></code></pre>\n<h4>6.Mapper配置文件（src/main/resources/mapper/）</h4>\n<p>除了使用mapper.xml文件编写sql语句，还可以使用注解注入sql语句，这里我用的是配置文件。</p>\n<pre class="code-block"><code class="code hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br /><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mapper</span> <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br /><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.zzy.dao.UserDao&quot;</span>&gt;</span><br /><br />    <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;addUser&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span><br />        insert into user values(#{id},#{name},#{age})<br />    <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br /><br />    <span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deleteUserById&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;int&quot;</span>&gt;</span><br />        delete from user where id = #{id}<br />    <span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span><br /><br />    <span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;updateUser&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span><br />        update user set id=#{id},name=#{name},age=#{age}<br />    <span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br /><br />    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryAll&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span><br />        select * from user<br />    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br /><br />    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryById&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span><br />        select * from user where id = #{id}<br />    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br /><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br /></code></pre>\n<h4>7.Service接口</h4>\n<pre class="code-block"><code class="code hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserService</span> </span>{<br /><br />    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addUser</span><span class="hljs-params">(User user)</span></span>;<br /><br />    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">deleteUserById</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span></span>;<br /><br />    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">updateUser</span><span class="hljs-params">(User user)</span></span>;<br /><br />    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title">queryAll</span><span class="hljs-params">()</span></span>;<br /><br />    <span class="hljs-function"><span class="hljs-keyword">public</span> User <span class="hljs-title">queryById</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span></span>;<br />}<br /></code></pre>\n<h4>8.Service接口实现类</h4>\n<pre class="code-block"><code class="code hljs java"><span class="hljs-meta">@Service(&quot;userService&quot;)</span><br /><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserService</span> </span>{<br /><br />    <span class="hljs-meta">@Autowired</span><br />    <span class="hljs-keyword">private</span> UserDao userDao;<br /><br /><br />    <span class="hljs-meta">@Override</span><br />    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title">queryAll</span><span class="hljs-params">()</span> </span>{<br />        System.out.println(<span class="hljs-string">&quot;======================service业务层，显示所有用户======================&quot;</span>);<br />        <span class="hljs-keyword">return</span> userDao.queryAll();<br />    }<br /><br />    <span class="hljs-meta">@Override</span><br />    <span class="hljs-function"><span class="hljs-keyword">public</span> User <span class="hljs-title">queryById</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span> </span>{<br />        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br />    }<br /><br />    <span class="hljs-meta">@Override</span><br />    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addUser</span><span class="hljs-params">(User user)</span> </span>{<br />        System.out.println(<span class="hljs-string">&quot;====================service业务层，保存用户========================&quot;</span>);<br />        userDao.addUser(user);<br />    }<br /><br />    <span class="hljs-meta">@Override</span><br />    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">deleteUserById</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span> </span>{<br />        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br />    }<br /><br />    <span class="hljs-meta">@Override</span><br />    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">updateUser</span><span class="hljs-params">(User user)</span> </span>{<br />        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br />    }<br /><br />}<br /></code></pre>\n<h2>spring环境搭建</h2>\n<h4>1.applicationContext.xml配置文件（src/main/resources/）</h4>\n<pre class="code-block"><code class="code hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br /><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span><br />       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br />       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span><br />       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.alibaba.com/schema/stat http://www.alibaba.com/schema/stat.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span><br /><br />    <span class="hljs-comment">&lt;!-- 开启注解扫描 --&gt;</span><br />    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.zzy&quot;</span>&gt;</span><br />        <span class="hljs-comment">&lt;!--配置哪些注解不扫描--&gt;</span><br />        <span class="hljs-tag">&lt;<span class="hljs-name">context:exclude-filter</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;annotation&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span><br />    <span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span><br />    <br /><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br /></code></pre>\n<h4>2.SpringTest测试类（src/main/java/com/zzy/test/）</h4>\n<pre class="code-block"><code class="code hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SpringTest</span> </span>{<br />    <span class="hljs-meta">@Test</span><br />    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span></span>{<br />        ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);<br />        UserService userService = (UserService) context.getBean(<span class="hljs-string">&quot;userService&quot;</span>);<br />        userService.queryAll();<br />    }<br />}<br /></code></pre>\n<p>后台打印输出“service业务层，显示所有用户”，则spring环境搭建成功！</p>\n<h2>mybatis环境搭建</h2>\n<h4>1.dao接口和mapper.xml配置文件</h4>\n<p>mybatis环境搭建首先要编写dao接口和mapper.xml核心配置文件，前面已经说过了，这里就不重复了。</p>\n<h4>2.mybatis-config.xml配置文件</h4>\n<pre class="code-block"><code class="code hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br /><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">configuration</span><br />        <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span><br />        <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br /><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br />    <br />    <span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span><br />        <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.zzy.pojo&quot;</span>/&gt;</span><br />    <span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span><br />    <br />    <span class="hljs-comment">&lt;!--数据库环境配置,后面sm整合时并入applicationContext.xml中可以去掉--&gt;</span><br />    <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br />        <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br />            <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>/&gt;</span><br />            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br />                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span><br />                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/study?useSSL=false<span class="hljs-symbol">&amp;amp;</span>amp;useUnicode=true<span class="hljs-symbol">&amp;amp;</span>amp;characterEncoding=utf-8<span class="hljs-symbol">&amp;amp;</span>amp;serverTimezone=UTC&quot;</span>/&gt;</span><br />                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br />                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br />            <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br />        <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br />    <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><br />    <br />    <span class="hljs-comment">&lt;!--注册mapper.xml的位置--&gt;</span><br />    <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br />        <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.zzy.dao&quot;</span>/&gt;</span><br />    <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br />    <br /><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br /></code></pre>\n<h4>3.MybatisTest测试类</h4>\n<pre class="code-block"><code class="code hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MybatisTest</span> </span>{<br />    <span class="hljs-meta">@Test</span><br />    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>{<br />        InputStream in = Resources.getResourceAsStream(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);<br />        SqlSessionFactory factory = <span class="hljs-keyword">new</span> SqlSessionFactoryBuilder().build(in);<br />        SqlSession sqlSession = factory.openSession();<br />        UserDao dao = sqlSession.getMapper(UserDao.class);<br />        List&lt;User&gt; userList = dao.queryAll();<br />        <span class="hljs-keyword">for</span> (User user:userList) {<br />            System.out.println(user);<br />        }<br />        sqlSession.close();<br />        in.close();<br />    }<br />    <span class="hljs-meta">@Test</span><br />    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>{<br />        User user = <span class="hljs-keyword">new</span> User();<br />        user.setId(<span class="hljs-number">3</span>);<br />        user.setName(<span class="hljs-string">&quot;小芳&quot;</span>);<br />        user.setAge(<span class="hljs-number">20</span>);<br />        <span class="hljs-comment">//加载配置文件</span><br />        InputStream in = Resources.getResourceAsStream(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);<br />        <span class="hljs-comment">//创建SqlSessionFactory对象</span><br />        SqlSessionFactory factory = <span class="hljs-keyword">new</span> SqlSessionFactoryBuilder().build(in);<br />        <span class="hljs-comment">//创建sqlSession对象</span><br />        SqlSession sqlSession = factory.openSession();<br />        <span class="hljs-comment">//获取到代理对象</span><br />        UserDao dao = sqlSession.getMapper(UserDao.class);<br />        <span class="hljs-comment">//保存</span><br />        dao.addUser(user);<br />        <span class="hljs-comment">//提交事务</span><br />        sqlSession.commit();<br />        <span class="hljs-comment">//关闭资源</span><br />        sqlSession.close();<br />        in.close();<br />    }<br />}<br /></code></pre>\n<h2>sm整合（spring+mybatis）</h2>\n<h4>1.整合思路</h4>\n<p>​\tService能成功调用dao对象，能够做查询操作或者新增数据能存进数据库即为整合成功。要和 Spring 一起使用 MyBatis，需要在 Spring 应用上下文中定义至少两样东西：一个 SqlSessionFactory 和至少一个数据映射器类。在 MyBatis-Spring 中，可使用 SqlSessionFactoryBean 来创建 SqlSessionFactory，SqlSessionFactory 唯一的必要属性是 DataSource，一个常用的属性是 configLocation，它用来指定 MyBatis 的 XML 配置文件路径。SqlSessionTemplate 是 MyBatis-Spring 的核心。作为 SqlSession 的一个实现，这意味着可以使用它无缝代替你代码中已经在使用的 SqlSession。模板可以参与到 Spring 的事务管理中，并且由于其是线程安全的，可以供多个映射器类使用，你应该总是用 SqlSessionTemplate 来替换 MyBatis 默认的 DefaultSqlSession 实现。在同一应用程序中的不同类之间混杂使用可能会引起数据一致性的问题。可以使用 SqlSessionFactory 作为构造方法的参数来创建 SqlSessionTemplate对象。</p>\n<h4>2.在applicationContext.xml 文件中整合 mybatis</h4>\n<p>​\t整合步骤：</p>\n<ul>\n<li>开启注解扫描</li>\n<li>创建数据源dataSource（这里配置了mybatis-config.xml中的数据库环境，可以去掉environments里的内容了）</li>\n<li>创建SqlSessionFactory</li>\n<li>创建DAO</li>\n<li>创建事务管理器</li>\n</ul>\n<pre class="code-block"><code class="code hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br /><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span><br />       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br />       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span><br />       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br /><br />    <span class="hljs-comment">&lt;!-- 开启注解扫描 --&gt;</span><br />    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.zzy&quot;</span>&gt;</span><br />        <span class="hljs-comment">&lt;!--配置哪些注解不扫描--&gt;</span><br />        <span class="hljs-tag">&lt;<span class="hljs-name">context:exclude-filter</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;annotation&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span><br />    <span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span><br /><br /><span class="hljs-comment">&lt;!-- 整合：spring 接管 mybatis 中配置SqlSessionFactory对象的创建--&gt;</span><br />    <span class="hljs-comment">&lt;!-- 数据源druid--&gt;</span><br />    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span><br />        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClassName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span><br />        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/study?useSSL=false<span class="hljs-symbol">&amp;amp;</span>amp;useUnicode=true<span class="hljs-symbol">&amp;amp;</span>amp;characterEncoding=utf-8<span class="hljs-symbol">&amp;amp;</span>amp;serverTimezone=UTC&quot;</span>/&gt;</span><br />        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br />        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br />    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br /><br />    <span class="hljs-comment">&lt;!-- 配置SqlSessionFactory对象 --&gt;</span><br />    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sqlSessionFactory&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span><br />        <span class="hljs-comment">&lt;!-- 注入数据源 --&gt;</span><br />        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span>/&gt;</span><br />        <span class="hljs-comment">&lt;!--关联Mybatis--&gt;</span><br />        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;configLocation&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;classpath:mybatis-config.xml&quot;</span>/&gt;</span><br />        <span class="hljs-comment">&lt;!-- 扫描sql配置文件：Dao对应的*mapper.xml文件--&gt;</span><br />        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;mapperLocations&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;classpath:mapper/*.xml&quot;</span>/&gt;</span><br />    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br /><br />    <span class="hljs-comment">&lt;!-- 配置扫描Dao接口包，动态实现Dao接口注入到spring容器中 --&gt;</span><br />    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;MapperScannerConfigurer&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span><br />        <span class="hljs-comment">&lt;!-- 注入SqlSessionFactory --&gt;</span><br />        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sqlSessionFactoryBeanName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;sqlSessionFactory&quot;</span>/&gt;</span><br />        <span class="hljs-comment">&lt;!-- 扫描DAO接口所在包 --&gt;</span><br />        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;basePackage&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.zzy.dao&quot;</span>/&gt;</span><br />    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br />    <br />        <span class="hljs-comment">&lt;!--配置事务管理器 --&gt;</span><br />        <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;transactionManager&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span><br />            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span>/&gt;</span><br />        <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br /><br />    <span class="hljs-comment">&lt;!-- 配置事务管理器 --&gt;</span><br />        <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;transactionManager&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span><br />            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span>/&gt;</span><br />        <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br /><br /><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br /></code></pre>\n<h2>springmvc环境搭建</h2>\n<h4>1.在web.xml中配置DispatherServlet前端控制器</h4>\n<pre class="code-block"><code class="code hljs xml"><span class="hljs-comment">&lt;!--配置前端控制器--&gt;</span><br /><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br />    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>dispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br />    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br />    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br />        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br />        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br />    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br />    <span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span><br /><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br /><br /><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br />    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>dispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br />    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br /><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br /></code></pre>\n<p>设置拦截器，解决乱码问题</p>\n<pre class="code-block"><code class="code hljs xml"><span class="hljs-comment">&lt;!--设置字符集拦截器，解决中文乱码问题--&gt;</span><br /><span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br />    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>characterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br />    <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br />    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br />        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br />        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br />    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br /><span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br /><span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br />    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>characterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br />    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br /><span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br /><span class="hljs-comment">&lt;!--设置RestFul风格拦截器--&gt;</span><br /><span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br />    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>hiddenHttpMethodFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br />    <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>org.springframework.web.filter.HiddenHttpMethodFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br /><span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br /><span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br />    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>hiddenHttpMethodFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br />    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br /><span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br /></code></pre>\n<h4>2.引入springmvc.xml</h4>\n<pre class="code-block"><code class="code hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br /><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span><br />       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br />       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span> <span class="hljs-attr">xmlns:mvc</span>=<span class="hljs-string">&quot;http://www.alibaba.com/schema/stat&quot;</span><br />       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.alibaba.com/schema/stat http://www.alibaba.com/schema/stat.xsd&quot;</span>&gt;</span><br /><br />    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.zzy.controller&quot;</span>/&gt;</span><br /><br />    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span>/&gt;</span><br /><br />    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span><br />        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewClass&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.view.JstlView&quot;</span>/&gt;</span><br />        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;prefix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;/WEB-INF/jsp/&quot;</span>/&gt;</span><br />        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;suffix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;.jsp&quot;</span>/&gt;</span><br />    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br />    <br /><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br /></code></pre>\n<h4>3.编写controller代码</h4>\n<pre class="code-block"><code class="code hljs java"><span class="hljs-meta">@Controller</span><br /><span class="hljs-meta">@RequestMapping(&quot;/user&quot;)</span><br /><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> </span>{<br /><br />    <span class="hljs-meta">@Autowired</span><br />    <span class="hljs-keyword">private</span> UserService userService;<br /><br />    <span class="hljs-meta">@RequestMapping(&quot;/queryAll&quot;)</span><br />    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">findAll</span><span class="hljs-params">(Model model)</span></span>{<br />        System.out.println(<span class="hljs-string">&quot;========================Controller层，查询所有用户=================&quot;</span>);<br />        List&lt;User&gt; list = userService.queryAll();<br />        model.addAttribute(<span class="hljs-string">&quot;list&quot;</span>,list);<br />        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello&quot;</span>;<br />    }<br /><br />    <span class="hljs-meta">@RequestMapping(&quot;/addUser&quot;)</span><br />    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">save</span><span class="hljs-params">(User user, HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> IOException </span>{<br />        System.out.println(<span class="hljs-string">&quot;========================Controller层，保存用户=================&quot;</span>);<br />        userService.addUser(user);<br />        response.sendRedirect(request.getContextPath()+<span class="hljs-string">&quot;/user/queryAll&quot;</span>);<br />        <span class="hljs-keyword">return</span>;<br />    }<br />}<br /></code></pre>\n<h4>4.创建jsp页面</h4>\n<p>index.jsp页面</p>\n<pre class="code-block"><code class="code hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br />&lt;html&gt;<br />&lt;head&gt;<br />    &lt;title&gt;Title&lt;/title&gt;<br />&lt;/head&gt;<br />&lt;body&gt;<br />    &lt;a href=<span class="hljs-string">&quot;user/queryAll&quot;</span>&gt;查询所有用户&lt;/a&gt;<br /><br />    &lt;form action=<span class="hljs-string">&quot;user/addUser&quot;</span> method=<span class="hljs-string">&quot;post&quot;</span>&gt;<br />        ID：&lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;id&quot;</span>/&gt;&lt;br&gt;<br />        姓名：&lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;name&quot;</span>/&gt;&lt;br&gt;<br />        年龄：&lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;age&quot;</span>/&gt;&lt;br&gt;<br />        &lt;input type=<span class="hljs-string">&quot;submit&quot;</span> value=<span class="hljs-string">&quot;保存&quot;</span>&gt;&lt;br&gt;<br />    &lt;/form&gt;<br />&lt;/body&gt;<br />&lt;/html&gt;<br /></code></pre>\n<p>jsp/hello.jsp页面</p>\n<pre class="code-block"><code class="code hljs jsp">&lt;%@ taglib prefix=<span class="hljs-string">&quot;c&quot;</span> uri=<span class="hljs-string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;<br />&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br />&lt;html&gt;<br />&lt;head&gt;<br />    &lt;title&gt;所有用户&lt;/title&gt;<br />&lt;/head&gt;<br />&lt;body&gt;<br />    &lt;h1&gt;已查询所有用户&lt;/h1&gt;<br />    &lt;c:forEach items=<span class="hljs-string">&quot;${list}&quot;</span> <span class="hljs-keyword">var</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;<br />        ${user.name}<br />    &lt;/c:forEach&gt;<br />&lt;/body&gt;<br />&lt;/html&gt;<br /></code></pre>\n<h4>5.部署tomcat服务器测试</h4>\n<h2>ss整合（spring+springmvc）</h2>\n<h4>1.整合思路</h4>\n<p><strong>在controller（SpringMVC）中能成功的调用service（Spring）对象中的方法</strong>即为整合成功。要想在controller中调用service方法，就要注入service到controller中来，有service对象才可以调用service方法。现在我们启动Tomcat之后，因为web.xml中配置了前端控制器，web容器会帮我们加载springmvc.xml配置文件，但在springmvc.xml配置文件中我们是只扫描controller，别的不扫。所以applicationContext.xml文件就从头到尾没有执行过，applicationContext中的配置扫描自然也不会去扫描，就相当于没有将spring交到IOC容器当中去。那么，怎么在启动服务器时去加载applicationContext配置文件呢？这时候我们就需要配置监听器了。</p>\n<h4>2.在web.xml中配置ContextLoaderListener监听器</h4>\n<pre class="code-block"><code class="code hljs xml"><span class="hljs-comment">&lt;!--配置spring的监听器--&gt;</span><br /><span class="hljs-tag">&lt;<span class="hljs-name">listener</span>&gt;</span><br />    <span class="hljs-tag">&lt;<span class="hljs-name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="hljs-tag">&lt;/<span class="hljs-name">listener-class</span>&gt;</span><br /><span class="hljs-tag">&lt;/<span class="hljs-name">listener</span>&gt;</span><br /><span class="hljs-comment">&lt;!--设置applicationContext.xml配置文件的路径--&gt;</span><br /><span class="hljs-tag">&lt;<span class="hljs-name">context-param</span>&gt;</span><br />    <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br />    <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br /><span class="hljs-tag">&lt;/<span class="hljs-name">context-param</span>&gt;</span><br /></code></pre>\n<h4>3.编写Controller代码</h4>\n<p>在controller中注入service</p>\n<pre class="code-block"><code class="code hljs java"><span class="hljs-meta">@Controller</span><br /><span class="hljs-meta">@RequestMapping(&quot;/user&quot;)</span><br /><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> </span>{<br /><br />    <span class="hljs-meta">@Autowired</span><br />    <span class="hljs-keyword">private</span> UserService userService;<br /><br />    <span class="hljs-meta">@RequestMapping(&quot;/queryAll&quot;)</span><br />    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">queryAll</span><span class="hljs-params">(Model model)</span></span>{<br />        System.out.println(<span class="hljs-string">&quot;========================Controller层，查询所有用户=================&quot;</span>);<br />        List&lt;User&gt; userList = userService.queryAll();<br />        model.addAttribute(<span class="hljs-string">&quot;userList&quot;</span>,userList);<br />        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;user&quot;</span>;<br />    }<br /><br />    <span class="hljs-meta">@RequestMapping(&quot;/addUser&quot;)</span><br />    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addUser</span><span class="hljs-params">(User user, HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> IOException </span>{<br />        System.out.println(<span class="hljs-string">&quot;========================Controller层，保存用户=================&quot;</span>);<br />        userService.addUser(user);<br />        response.sendRedirect(request.getContextPath()+<span class="hljs-string">&quot;/user/queryAll&quot;</span>);<br />    }<br />}<br /></code></pre>\n<h4>4.启动tomcat测试</h4>\n<p>如果可以出现页面并且点击保存后台输出“Controller层…”，则spring、springmvc整合成功！</p>\n	4	0	0	f	2021-04-22 22:36:26.471386	2021-04-22 22:36:54.355881	1	https://cdn.zhoupb.com/image/generate/d337501c279e361d9d41e98e7a2cfbaa.png	基本环境搭建1.创建一个maven项目相信各位大佬都会＜（＾－＾）＞2.导入相关依赖所有依赖都在这里汇总了，后面就不多说&lt;!--数据库--&gt;&lt;dependency&gt;&lt;groupId&gt;mysql&lt;/groupId&gt;&lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;&lt;version&gt;8.0.22&lt;/version&gt;&lt;/dependency&gt;&lt;!--连接池c3podbcpdruid--&gt;&lt;dependency&gt;&lt;groupId&gt;com.alibaba&lt;/groupId&gt;&lt;artifactId&gt;druid&lt;/artifactId&gt;&lt;version&gt;1.2.1&lt;/version&gt;&lt;/dependency&gt;&lt;!--mybatis--&gt;&lt;dependency&gt;&lt;groupId&gt;org.mybatis&lt;/groupId&gt;&lt;artifactId&gt;mybatis&lt;/artifactId&gt;&lt;version&gt;3.5.5&lt;/version&gt;&lt;/dependency&gt;&lt;!--mybatis-spring整合--&gt;&lt;dependency&gt;&lt;groupId&gt;org.mybatis&lt;/groupId&gt;&lt;artifactId&gt;mybatis-spring&lt;/artifactId&gt;&lt;version&gt;2.0.5&lt;/version&gt;&lt;/dependency&gt;&lt;!--aspectJAOP织入器--&gt;&lt;dependency&gt;&lt;groupId&gt;org.aspectj&lt;/groupId&gt;&lt;artifactId&gt;aspectjweaver&lt;/artifactId&gt;&lt;version&gt;1.9.6&lt;/version&gt;&lt;/dependency&gt;&lt;!--Spring--&gt;&lt;dependency&gt;&lt;groupId&gt;org.springframework&lt;/groupId&gt;&lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;&lt;version&gt;5.2.10.RELEASE&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt;&lt;groupId&gt;org.springframework&lt;/groupId&gt;&lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt;&lt;version&gt;5.2.10.RELEASE&lt;/version&gt;&lt;/dependency&gt;&lt;!--servletjsp--&gt;&lt;dependency&gt;&lt;groupId&gt;javax.servlet&lt;/groupId&gt;&lt;artifactId&gt;servlet-api&lt;/artifactId&gt;&lt;version&gt;2.5&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt;&lt;groupId&gt;javax.servlet.jsp&lt;/groupId&gt;&lt;artifactId&gt;jsp-api&lt;/artifactId&gt;&lt;version&gt;2.2&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt;&lt;groupId&gt;jstl&lt;/groupId&gt;&lt;artifactId&gt;jstl&lt;/artifactId&gt;&lt;version&gt;1.2&lt;/version&gt;&lt;/dependency&gt;&lt;!--lombok--&gt;&lt;dependency&gt;&lt;groupId&gt;org.projectlombok&lt;/groupId&gt;&lt;artifactId&gt;lombok&lt;/artifactId&gt;&lt;version&gt;1.18.16&lt;/version&gt;&lt;/dependency&gt;&lt;!--log4j2--&gt;&lt;dependency&gt;&lt;groupId&gt;log4j&lt;/groupId&gt;&lt;artifactId&gt;log4j&lt;/artifactId&gt;&lt;version&gt;1.2.17&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt;&lt;groupId&gt;org.slf4j&lt;/groupId&gt;&lt;artifactId&gt;slf4j-api&lt;/artifactId&gt;&lt;version&gt;1.7.30&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt;&lt;groupId&gt;org.slf4j&lt;/groupId&gt;&lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt;&lt;version&gt;1.7.5&lt;/version&gt;&lt;/dependency&gt;&lt;!--Junit--&gt;&lt;dependency&gt;&lt;groupId&gt;junit&lt;/groupId&gt;&lt;artifactId&gt;junit&lt;/artifactId&gt;&lt;version&gt;4.13&lt;/version&gt;&lt;scope&gt;test&lt;/scope&gt;&lt;/dependency&gt;&lt;dependency&gt;&lt;groupId&gt;org.junit.jupiter&lt;/groupId&gt;&lt;artifactId&gt;junit-jupiter&lt;/artifactId&gt;&lt;version&gt;RELEASE&lt;/version&gt;&lt;scope&gt;compile&lt;/scope&gt;&lt;/dependency&gt;&lt;!--fastjson--&gt;&lt;dependency&gt;&lt;groupId&gt;com.alibaba&lt;/groupId&gt;&lt;artifactId&gt;fastjson&lt;/artifactId&gt;&lt;version&gt;1.2.72&lt;/version&gt;&lt;/dependency&gt;为避免资源导出问题可以添加以下代码&lt;!--静态资源导出问题--&gt;&lt;build&gt;&lt;resources&gt;&lt;resource&gt;&lt;directory&gt;src/main/java&lt;/directory&gt;&lt;includes&gt;&lt;include&gt;**/*.properties&lt;/include&gt;&lt;include&gt;**/*.xml&lt;/include&gt;&lt;/includes&gt;&lt;filtering&gt;false&lt;/filtering&gt;&lt;/resource&gt;&lt;resource&gt;&lt;directory&gt;src/main/resources&lt;/directory&gt;&lt;includes&gt;&lt;include&gt;**/*.properties&lt;/include&gt;&lt;include&gt;**/*.xml&lt;/include&gt;&lt;/includes&gt;&lt;filtering&gt;false&lt;/filtering&gt;&lt;/resource&gt;&lt;/resources&gt;&lt;/build&gt;3.建表建一个user表DROPTABLEIFEXISTS`user`;CREATETABLE`user`(`id`intNOTNULL,`name`varchar(255)CHARACTERSETutf8mb4COLLATEutf8mb4_0900_ai_ciNULLDEFAULTNULL,`age`intNULLDEFAULTNULL,PRIMARYKEY(`id`)USINGBTREE)ENGINE=InnoDBCHARACTERSET=utf8mb4COLLATE=utf8mb4_0900_ai_ciROW_FORMAT=Dynamic;4.实体类(src/main/java/)这里用了lombok，省去了get、set方法，简洁多了@Data@AllArgsConstructor@NoArgsConstructorpublicclassUser{privateIntegerid;privateStringname;privateIntegerage;}5.Dao接口@RepositorypublicinterfaceUserDao{publicvoidaddUser(Useruser);publicintdeleteUserById(@Param(&quot;id&quot;)intid);publicintupdateUser(Useruser);publicList&lt;User&gt;queryAll();publicUserqueryById(@Param(&quot;id&quot;)intid);}6.Mapper配置文件（src/main/resources/mapper/）除了使用mapper.xml文件编写sql语句，还可以使用注解注入sql语句，这里我用的是配置文件。&lt;?xmlversion=&quot;1.0&quot;encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPEmapperPUBLIC&quot;-//mybatis.org//DTDMapper3.0//EN&quot;&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;&lt;mappernamespace=&quot;com.zzy.dao.UserDao&quot;&gt;&lt;insertid=&quot;addUser&quot;parameterType=&quot;User&quot;&gt;insertintouservalues(#{id},#{name},#{age})&lt;/insert&gt;&lt;deleteid=&quot;deleteUserById&quot;parameterType=&quot;int&quot;&gt;deletefromuserwhereid=#{id}&lt;/delete&gt;&lt;updateid=&quot;updateUser&quot;parameterType=&quot;User&quot;&gt;updateusersetid=#{id},name=#{name},age=#{age}&lt;/update&gt;&lt;selectid=&quot;queryAll&quot;resultType=&quot;User&quot;&gt;select*fromuser&lt;/select&gt;&lt;selectid=&quot;queryById&quot;resultType=&quot;User&quot;&gt;select*fromuserwhereid=#{id}&lt;/select&gt;&lt;/mapper&gt;7.Service接口publicinterfaceUserService{publicvoidaddUser(Useruser);publicintdeleteUserById(intid);publicintupdateUser(Useruser);publicList&lt;User&gt;queryAll();publicUserqueryById(intid);}8.Service接口实现类@Service(&quot;userService&quot;)publicclassUserServiceImplimplementsUserService{@AutowiredprivateUserDaouserDao;@OverridepublicList&lt;User&gt;queryAll(){System.out.println(&quot;======================service业务层，显示所有用户======================&quot;);returnuserDao.queryAll();}@OverridepublicUserqueryById(intid){returnnull;}@OverridepublicvoidaddUser(Useruser){System.out.println(&quot;====================service业务层，保存用户========================&quot;);userDao.addUser(user);}@OverridepublicintdeleteUserById(intid){return0;}@OverridepublicintupdateUser(Useruser){return0;}}spring环境搭建1.applicationContext.xml配置文件（src/main/resources/）&lt;?xmlversion=&quot;1.0&quot;encoding=&quot;UTF-8&quot;?&gt;&lt;beansxmlns=&quot;http://www.springframework.org/schema/beans&quot;xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;xmlns:context=&quot;http://www.springframework.org/schema/context&quot;xsi:schemaLocation=&quot;http://www.springframework.org/schema/beanshttp://www.springframework.org/schema/beans/spring-beans.xsdhttp://www.springframework.org/schema/contexthttps://www.springframework.org/schema/context/spring-context.xsdhttp://www.alibaba.com/schema/stathttp://www.alibaba.com/schema/stat.xsdhttp://www.springframework.org/schema/aophttps://www.springframework.org/schema/aop/spring-aop.xsd&quot;&gt;&lt;!--开启注解扫描--&gt;&lt;context:component-scanbase-package=&quot;com.zzy&quot;&gt;&lt;!--配置哪些注解不扫描--&gt;&lt;context:exclude-filtertype=&quot;annotation&quot;expression=&quot;org.springframework.stereotype.Controller&quot;/&gt;&lt;/context:component-scan&gt;&lt;/beans&gt;2.SpringTest测试类（src/main/java/com/zzy/test/）publicclassSpringTest{@Testpublicvoidtest1(){ApplicationContextcontext=newClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);UserServiceuserService=(UserService)context.getBean(&quot;userService&quot;);userService.queryAll();}}后台打印输出“service业务层，显示所有用户”，则spring环境搭建成功！mybatis环境搭建1.dao接口和mapper.xml配置文件mybatis环境搭建首先要编写dao接口和mapper.xml核心配置文件，前面已经说过了，这里就不重复了。2.mybatis-config.xml配置文件&lt;?xmlversion=&quot;1.0&quot;encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPEconfigurationPUBLIC&quot;-//mybatis.org//DTDConfig3.0//EN&quot;&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;&lt;configuration&gt;&lt;typeAliases&gt;&lt;packagename=&quot;com.zzy.pojo&quot;/&gt;&lt;/typeAliases&gt;&lt;!--数据库环境配置,后面sm整合时并入applicationContext.xml中可以去掉--&gt;&lt;environmentsdefault=&quot;development&quot;&gt;&lt;environmentid=&quot;development&quot;&gt;&lt;transactionManagertype=&quot;JDBC&quot;/&gt;&lt;dataSourcetype=&quot;POOLED&quot;&gt;&lt;propertyname=&quot;driver&quot;value=&quot;com.mysql.cj.jdbc.Driver&quot;/&gt;&lt;propertyname=&quot;url&quot;value=&quot;jdbc:mysql://localhost:3306/study?useSSL=false&amp;amp;amp;useUnicode=true&amp;amp;amp;characterEncoding=utf-8&amp;amp;amp;serverTimezone=UTC&quot;/&gt;&lt;propertyname=&quot;username&quot;value=&quot;root&quot;/&gt;&lt;propertyname=&quot;password&quot;value=&quot;root&quot;/&gt;&lt;/dataSource&gt;&lt;/environment&gt;&lt;/environments&gt;&lt;!--注册mapper.xml的位置--&gt;&lt;mappers&gt;&lt;packagename=&quot;com.zzy.dao&quot;/&gt;&lt;/mappers&gt;&lt;/configuration&gt;3.MybatisTest测试类publicclassMybatisTest{@Testpublicvoidtest1()throwsIOException{InputStreamin=Resources.getResourceAsStream(&quot;applicationContext.xml&quot;);SqlSessionFactoryfactory=newSqlSessionFactoryBuilder().build(in);SqlSessionsqlSession=factory.openSession();UserDaodao=sqlSession.getMapper(UserDao.class);List&lt;User&gt;userList=dao.queryAll();for(Useruser:userList){System.out.println(user);}sqlSession.close();in.close();}@Testpublicvoidtest2()throwsIOException{Useruser=newUser();user.setId(3);user.setName(&quot;小芳&quot;);user.setAge(20);//加载配置文件InputStreamin=Resources.getResourceAsStream(&quot;applicationContext.xml&quot;);//创建SqlSessionFactory对象SqlSessionFactoryfactory=newSqlSessionFactoryBuilder().build(in);//创建sqlSession对象SqlSessionsqlSession=factory.openSession();//获取到代理对象UserDaodao=sqlSession.getMapper(UserDao.class);//保存dao.addUser(user);//提交事务sqlSession.commit();//关闭资源sqlSession.close();in.close();}}sm整合（spring+mybatis）1.整合思路​Service能成功调用dao对象，能够做查询操作或者新增数据能存进数据库即为整合成功。要和Spring一起使用MyBatis，需要在Spring应用上下文中定义至少两样东西：一个SqlSessionFactory和至少一个数据映射器类。在MyBatis-Spring中，可使用SqlSessionFactoryBean来创建SqlSessionFactory，SqlSessionFactory唯一的必要属性是DataSource，一个常用的属性是configLocation，它用来指定MyBatis的XML配置文件路径。SqlSessionTemplate是MyBatis-Spring的核心。作为SqlSession的一个实现，这意味着可以使用它无缝代替你代码中已经在使用的SqlSession。模板可以参与到Spring的事务管理中，并且由于其是线程安全的，可以供多个映射器类使用，你应该总是用SqlSessionTemplate来替换MyBatis默认的DefaultSqlSession实现。在同一应用程序中的不同类之间混杂使用可能会引起数据一致性的问题。可以使用SqlSessionFactory作为构造方法的参数来创建SqlSessionTemplate对象。2.在applicationContext.xml文件中整合mybatis​整合步骤：开启注解扫描创建数据源dataSource（这里配置了mybatis-config.xml中的数据库环境，可以去掉environments里的内容了）创建SqlSessionFactory创建DAO创建事务管理器&lt;?xmlversion=&quot;1.0&quot;encoding=&quot;UTF-8&quot;?&gt;&lt;beansxmlns=&quot;http://www.springframework.org/schema/beans&quot;xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;xmlns:context=&quot;http://www.springframework.org/schema/context&quot;xsi:schemaLocation=&quot;http://www.springframework.org/schema/beanshttp://www.springframework.org/schema/beans/spring-beans.xsdhttp://www.springframework.org/schema/contexthttps://www.springframework.org/schema/context/spring-context.xsd&quot;&gt;&lt;!--开启注解扫描--&gt;&lt;context:component-scanbase-package=&quot;com.zzy&quot;&gt;&lt;!--配置哪些注解不扫描--&gt;&lt;context:exclude-filtertype=&quot;annotation&quot;expression=&quot;org.springframework.stereotype.Controller&quot;/&gt;&lt;/context:component-scan&gt;&lt;!--整合：spring接管mybatis中配置SqlSessionFactory对象的创建--&gt;&lt;!--数据源druid--&gt;&lt;beanid=&quot;dataSource&quot;class=&quot;com.alibaba.druid.pool.DruidDataSource&quot;&gt;&lt;propertyname=&quot;driverClassName&quot;value=&quot;com.mysql.cj.jdbc.Driver&quot;/&gt;&lt;propertyname=&quot;url&quot;value=&quot;jdbc:mysql://localhost:3306/study?useSSL=false&amp;amp;amp;useUnicode=true&amp;amp;amp;characterEncoding=utf-8&amp;amp;amp;serverTimezone=UTC&quot;/&gt;&lt;propertyname=&quot;username&quot;value=&quot;root&quot;/&gt;&lt;propertyname=&quot;password&quot;value=&quot;root&quot;/&gt;&lt;/bean&gt;&lt;!--配置SqlSessionFactory对象--&gt;&lt;beanid=&quot;sqlSessionFactory&quot;class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt;&lt;!--注入数据源--&gt;&lt;propertyname=&quot;dataSource&quot;ref=&quot;dataSource&quot;/&gt;&lt;!--关联Mybatis--&gt;&lt;propertyname=&quot;configLocation&quot;value=&quot;classpath:mybatis-config.xml&quot;/&gt;&lt;!--扫描sql配置文件：Dao对应的*mapper.xml文件--&gt;&lt;propertyname=&quot;mapperLocations&quot;value=&quot;classpath:mapper/*.xml&quot;/&gt;&lt;/bean&gt;&lt;!--配置扫描Dao接口包，动态实现Dao接口注入到spring容器中--&gt;&lt;beanid=&quot;MapperScannerConfigurer&quot;class=&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;&gt;&lt;!--注入SqlSessionFactory--&gt;&lt;propertyname=&quot;sqlSessionFactoryBeanName&quot;value=&quot;sqlSessionFactory&quot;/&gt;&lt;!--扫描DAO接口所在包--&gt;&lt;propertyname=&quot;basePackage&quot;value=&quot;com.zzy.dao&quot;/&gt;&lt;/bean&gt;&lt;!--配置事务管理器--&gt;&lt;beanid=&quot;transactionManager&quot;class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;&lt;propertyname=&quot;dataSource&quot;ref=&quot;dataSource&quot;/&gt;&lt;/bean&gt;&lt;!--配置事务管理器--&gt;&lt;beanid=&quot;transactionManager&quot;class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;&lt;propertyname=&quot;dataSource&quot;ref=&quot;dataSource&quot;/&gt;&lt;/bean&gt;&lt;/beans&gt;springmvc环境搭建1.在web.xml中配置DispatherServlet前端控制器&lt;!--配置前端控制器--&gt;&lt;servlet&gt;&lt;servlet-name&gt;dispatcherServlet&lt;/servlet-name&gt;&lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;&lt;init-param&gt;&lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;&lt;param-value&gt;classpath:springmvc.xml&lt;/param-value&gt;&lt;/init-param&gt;&lt;load-on-startup&gt;1&lt;/load-on-startup&gt;&lt;/servlet&gt;&lt;servlet-mapping&gt;&lt;servlet-name&gt;dispatcherServlet&lt;/servlet-name&gt;&lt;url-pattern&gt;/&lt;/url-pattern&gt;&lt;/servlet-mapping&gt;设置拦截器，解决乱码问题&lt;!--设置字符集拦截器，解决中文乱码问题--&gt;&lt;filter&gt;&lt;filter-name&gt;characterEncodingFilter&lt;/filter-name&gt;&lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;/filter-class&gt;&lt;init-param&gt;&lt;param-name&gt;encoding&lt;/param-name&gt;&lt;param-value&gt;UTF-8&lt;/param-value&gt;&lt;/init-param&gt;&lt;/filter&gt;&lt;filter-mapping&gt;&lt;filter-name&gt;characterEncodingFilter&lt;/filter-name&gt;&lt;url-pattern&gt;/*&lt;/url-pattern&gt;&lt;/filter-mapping&gt;&lt;!--设置RestFul风格拦截器--&gt;&lt;filter&gt;&lt;filter-name&gt;hiddenHttpMethodFilter&lt;/filter-name&gt;&lt;filter-class&gt;org.springframework.web.filter.HiddenHttpMethodFilter&lt;/filter-class&gt;&lt;/filter&gt;&lt;filter-mapping&gt;&lt;filter-name&gt;hiddenHttpMethodFilter&lt;/filter-name&gt;&lt;url-pattern&gt;/*&lt;/url-pattern&gt;&lt;/filter-mapping&gt;2.引入springmvc.xml&lt;?xmlversion=&quot;1.0&quot;encoding=&quot;UTF-8&quot;?&gt;&lt;beansxmlns=&quot;http://www.springframework.org/schema/beans&quot;xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;xmlns:context=&quot;http://www.springframework.org/schema/context&quot;xmlns:mvc=&quot;http://www.alibaba.com/schema/stat&quot;xsi:schemaLocation=&quot;http://www.springframework.org/schema/beanshttp://www.springframework.org/schema/beans/spring-beans.xsdhttp://www.springframework.org/schema/contexthttps://www.springframework.org/schema/context/spring-context.xsdhttp://www.alibaba.com/schema/stathttp://www.alibaba.com/schema/stat.xsd&quot;&gt;&lt;context:component-scanbase-package=&quot;com.zzy.controller&quot;/&gt;&lt;mvc:annotation-driven/&gt;&lt;beanclass=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&gt;&lt;propertyname=&quot;viewClass&quot;value=&quot;org.springframework.web.servlet.view.JstlView&quot;/&gt;&lt;propertyname=&quot;prefix&quot;value=&quot;/WEB-INF/jsp/&quot;/&gt;&lt;propertyname=&quot;suffix&quot;value=&quot;.jsp&quot;/&gt;&lt;/bean&gt;&lt;/beans&gt;3.编写controller代码@Controller@RequestMapping(&quot;/user&quot;)publicclassUserController{@AutowiredprivateUserServiceuserService;@RequestMapping(&quot;/queryAll&quot;)publicStringfindAll(Modelmodel){System.out.println(&quot;========================Controller层，查询所有用户=================&quot;);List&lt;User&gt;list=userService.queryAll();model.addAttribute(&quot;list&quot;,list);return&quot;hello&quot;;}@RequestMapping(&quot;/addUser&quot;)publicvoidsave(Useruser,HttpServletRequestrequest,HttpServletResponseresponse)throwsIOException{System.out.println(&quot;========================Controller层，保存用户=================&quot;);userService.addUser(user);response.sendRedirect(request.getContextPath()+&quot;/user/queryAll&quot;);return;}}4.创建jsp页面index.jsp页面&lt;%@pagecontentType=&quot;text/html;charset=UTF-8&quot;language=&quot;java&quot;%&gt;&lt;html&gt;&lt;head&gt;&lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;ahref=&quot;user/queryAll&quot;&gt;查询所有用户&lt;/a&gt;&lt;formaction=&quot;user/addUser&quot;method=&quot;post&quot;&gt;ID：&lt;inputtype=&quot;text&quot;name=&quot;id&quot;/&gt;&lt;br&gt;姓名：&lt;inputtype=&quot;text&quot;name=&quot;name&quot;/&gt;&lt;br&gt;年龄：&lt;inputtype=&quot;text&quot;name=&quot;age&quot;/&gt;&lt;br&gt;&lt;inputtype=&quot;submit&quot;value=&quot;保存&quot;&gt;&lt;br&gt;&lt;/form&gt;&lt;/body&gt;&lt;/html&gt;jsp/hello.jsp页面&lt;%@taglibprefix=&quot;c&quot;uri=&quot;http://java.sun.com/jsp/jstl/core&quot;%&gt;&lt;%@pagecontentType=&quot;text/html;charset=UTF-8&quot;language=&quot;java&quot;%&gt;&lt;html&gt;&lt;head&gt;&lt;title&gt;所有用户&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;已查询所有用户&lt;/h1&gt;&lt;c:forEachitems=&quot;${list}&quot;var=&quot;user&quot;&gt;${user.name}&lt;/c:forEach&gt;&lt;/body&gt;&lt;/html&gt;5.部署tomcat服务器测试ss整合（spring+springmvc）1.整合思路在controller（SpringMVC）中能成功的调用service（Spring）对象中的方法即为整合成功。要想在controller中调用service方法，就要注入service到controller中来，有service对象才可以调用service方法。现在我们启动Tomcat之后，因为web.xml中配置了前端控制器，web容器会帮我们加载springmvc.xml配置文件，但在springmvc.xml配置文件中我们是只扫描controller，别的不扫。所以applicationContext.xml文件就从头到尾没有执行过，applicationContext中的配置扫描自然也不会去扫描，就相当于没有将spring交到IOC容器当中去。那么，怎么在启动服务器时去加载applicationContext配置文件呢？这时候我们就需要配置监听器了。2.在web.xml中配置ContextLoaderListener监听器&lt;!--配置spring的监听器--&gt;&lt;listener&gt;&lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;&lt;/listener&gt;&lt;!--设置applicationContext.xml配置文件的路径--&gt;&lt;context-param&gt;&lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;&lt;param-value&gt;classpath:applicationContext.xml&lt;/param-value&gt;&lt;/context-param&gt;3.编写Controller代码在controller中注入service@Controller@RequestMapping(&quot;/user&quot;)publicclassUserController{@AutowiredprivateUserServiceuserService;@RequestMapping(&quot;/queryAll&quot;)publicStringqueryAll(Modelmodel){System.out.println(&quot;========================Controller层，查询所有用户=================&quot;);List&lt;User&gt;userList=userService.queryAll();model.addAttribute(&quot;userList&quot;,userList);return&quot;user&quot;;}@RequestMapping(&quot;/addUser&quot;)publicvoidaddUser(Useruser,HttpServletRequestrequest,HttpServletResponseresponse)throwsIOException{System.out.println(&quot;========================Controller层，保存用户=================&quot;);userService.addUser(user);response.sendRedirect(request.getContextPath()+&quot;/user/queryAll&quot;);}}4.启动tomcat测试如果可以出现页面并且点击保存后台输出“Controller层…”，则spring、springmvc整合成功！
8	Cookie Session	{Cookie,Session}	## Cookie Session\r\n\r\nCookie、Session\r\n\r\n会话\r\n会话:用户打开一个浏览器，点击了很多超链接，访问多个web资源，关闭浏览器，这个过程可以称之为会话\r\n\r\n一个网站，怎么证明你来过?\r\n客户端\r\n服务端\r\n1.服务端给客户端一个信件，客户端下次访问服务端带上信件就可以了; cookie\r\n\r\n2.服务器登记你来过了，下次你来的时候我来匹配你; seesion\r\n\r\n### cookie\r\n\r\n7.3、Cookie\r\n1.从请求中拿到cookie信息2.服务器响应给客户端cookie\r\n1cookie[] cookies = req. getcookies(;//获得cookie2cookie.getName(;//获得cookie中的key\r\n3cookie.getvalue(;//获得cookie中的v1aue\r\n4 new cookie(&quot;7astLoginTime &quot;，system.currentTimeMil1is()+&quot;&quot;);//新建一个cookie5cookie.setMaxAge(24*60*60);//设置cookie的有效期\r\n6\r\nresp.addcookie(cookie);//响应给客户端一个cookie7\r\n8\r\nI\r\ncookie:一般会保存在本地的用户目录下appdata;\r\n\r\n```java\r\npublic class CookieDemo  extends HttpServlet {\r\n    @Override\r\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\r\n       req.setCharacterEncoding(&quot;utf-8&quot;);\r\n       resp.setCharacterEncoding(&quot;utf-8&quot;);\r\n       resp.setContentType(&quot;text/html&quot;);\r\n       PrintWriter out = resp.getWriter();\r\n       Cookie[] cookies = req.getCookies();\r\n\r\n        if (cookies != null){\r\n            out.write(&quot;你上一次访问时间:&quot;);\r\n            for (int i = 0; i &lt;cookies.length ; i++) {\r\n               Cookie cookie= cookies[i];\r\n               if(cookie.getName().equals(&quot;time&quot;)){\r\n                  long lastTime =Long.parseLong(cookie.getValue());\r\n                   Date date = new Date(lastTime);\r\n                   out.write(String.valueOf(date));\r\n               }\r\n            }\r\n\r\n        }else {\r\n            out.write(&quot;第一次访问&quot;);\r\n        }\r\n        Cookie cookie = new Cookie(&quot;time&quot;,System.currentTimeMillis()+&quot;&quot;);\r\n        resp.addCookie(cookie);\r\n\r\n    }\r\n\r\n    @Override\r\n    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\r\n        doGet(req, resp);\r\n    }\r\n}\r\n```\r\n\r\n\r\n\r\n\r\n\r\n![pic](Cookie Session.assets/pic.jpg)\r\n\r\n```java\r\npublic class SessionDemo01 extends HttpServlet {\r\n    @Override\r\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\r\n        req.setCharacterEncoding(&quot;utf-8&quot;);\r\n        resp.setCharacterEncoding(&quot;utf-8&quot;);\r\n        resp.setContentType(&quot;text/html;charset=utf-8&quot;);\r\n        HttpSession session = req.getSession();\r\n        Person name =(Person) session.getAttribute(&quot;name&quot;);\r\n        System.out.println(name.getName());\r\n    }\r\n\r\n    @Override\r\n    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\r\n        doGet(req, resp);\r\n    }\r\n}\r\n```\r\n\r\n#### 清除cookie设置有效期为0;\r\n\r\n![image-20210419220338044](Cookie Session.assets/image-20210419220338044.png)\r\n\r\n#### 中文乱码\r\n\r\n![image-20210419220743601](Cookie Session.assets/image-20210419220743601.png)\r\n\r\n### Session\r\n\r\n7.4、Session(重点)\r\n什么是Session:\r\n·服务器会给每一个用户(浏览器)创建一个Seesion对象;\r\n·一个Seesion独占一个浏览器，只要浏览器没有关闭，这个Session就存在;·用户登录之后，整个网站它都可以访问!\r\n\r\n#### 注销session\r\n\r\n```java\r\nsession.invalidate();\r\n```\r\n\r\n\r\n\r\n设置session默认的实效时间\r\n\r\n以分钟为单位\r\n\r\n```xml\r\n&lt;session-config&gt;\r\n    &lt;session-timeout&gt;15&lt;/session-timeout&gt;\r\n&lt;/session-config&gt;\r\n```\r\n\r\n\r\n\r\n\r\n\r\n### Session和cookie的区别:\r\n\r\n. Cookie是把用户的数据写给用户的浏览器，浏览器保存(可以保存多个)\r\n·Session把用户的数据写到用户独占Session中，服务器端保存(保存重要的信息，减少服务器资源的浪费). Session对象由服务创建;\r\n使用场景:\r\n●保存一个登录用户的信息;·购物车信息;\r\n·在整个网站中经常会使用的数据，我们将它保存在Session中;	<h2>Cookie Session</h2>\n<p>Cookie、Session</p>\n<p>会话<br>\n会话:用户打开一个浏览器，点击了很多超链接，访问多个web资源，关闭浏览器，这个过程可以称之为会话</p>\n<p>一个网站，怎么证明你来过?<br>\n客户端<br>\n服务端<br>\n1.服务端给客户端一个信件，客户端下次访问服务端带上信件就可以了; cookie</p>\n<p>2.服务器登记你来过了，下次你来的时候我来匹配你; seesion</p>\n<h3>cookie</h3>\n<p>7.3、Cookie<br>\n1.从请求中拿到cookie信息2.服务器响应给客户端cookie<br>\n1cookie[] cookies = req. getcookies(;<a href="//xn--cookie2cookie-hh2zo770b.getName">//获得cookie2cookie.getName</a>(;//获得cookie中的key<br>\n3cookie.getvalue(;//获得cookie中的v1aue<br>\n4 new cookie(&quot;7astLoginTime &quot;，system.currentTimeMil1is()+&quot;&quot;);<a href="//xn--cookie5cookie-9z0udt456sp3xa.setMaxAge">//新建一个cookie5cookie.setMaxAge</a>(24<em>60</em>60);//设置cookie的有效期<br>\n6<br>\nresp.addcookie(cookie);//响应给客户端一个cookie7<br>\n8<br>\nI<br>\ncookie:一般会保存在本地的用户目录下appdata;</p>\n<pre class="code-block"><code class="code hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CookieDemo</span>  <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>{<br />    <span class="hljs-meta">@Override</span><br />    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>{<br />       req.setCharacterEncoding(&amp;quot;utf-<span class="hljs-number">8</span>&amp;quot;);<br />       resp.setCharacterEncoding(&amp;quot;utf-<span class="hljs-number">8</span>&amp;quot;);<br />       resp.setContentType(&amp;quot;text/html&amp;quot;);<br />       PrintWriter out = resp.getWriter();<br />       Cookie[] cookies = req.getCookies();<br /><br />        <span class="hljs-keyword">if</span> (cookies != <span class="hljs-keyword">null</span>){<br />            out.write(&amp;quot;你上一次访问时间:&amp;quot;);<br />            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &amp;lt;cookies.length ; i++) {<br />               Cookie cookie= cookies[i];<br />               <span class="hljs-keyword">if</span>(cookie.getName().equals(&amp;quot;time&amp;quot;)){<br />                  <span class="hljs-keyword">long</span> lastTime =Long.parseLong(cookie.getValue());<br />                   Date date = <span class="hljs-keyword">new</span> Date(lastTime);<br />                   out.write(String.valueOf(date));<br />               }<br />            }<br /><br />        }<span class="hljs-keyword">else</span> {<br />            out.write(&amp;quot;第一次访问&amp;quot;);<br />        }<br />        Cookie cookie = <span class="hljs-keyword">new</span> Cookie(&amp;quot;time&amp;quot;,System.currentTimeMillis()+&amp;quot;&amp;quot;);<br />        resp.addCookie(cookie);<br /><br />    }<br /><br />    <span class="hljs-meta">@Override</span><br />    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>{<br />        doGet(req, resp);<br />    }<br />}<br /></code></pre>\n<p>![pic](Cookie Session.assets/pic.jpg)</p>\n<pre class="code-block"><code class="code hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SessionDemo01</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>{<br />    <span class="hljs-meta">@Override</span><br />    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>{<br />        req.setCharacterEncoding(&amp;quot;utf-<span class="hljs-number">8</span>&amp;quot;);<br />        resp.setCharacterEncoding(&amp;quot;utf-<span class="hljs-number">8</span>&amp;quot;);<br />        resp.setContentType(&amp;quot;text/html;charset=utf-<span class="hljs-number">8</span>&amp;quot;);<br />        HttpSession session = req.getSession();<br />        Person name =(Person) session.getAttribute(&amp;quot;name&amp;quot;);<br />        System.out.println(name.getName());<br />    }<br /><br />    <span class="hljs-meta">@Override</span><br />    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>{<br />        doGet(req, resp);<br />    }<br />}<br /></code></pre>\n<h4>清除cookie设置有效期为0;</h4>\n<p>![image-20210419220338044](Cookie Session.assets/image-20210419220338044.png)</p>\n<h4>中文乱码</h4>\n<p>![image-20210419220743601](Cookie Session.assets/image-20210419220743601.png)</p>\n<h3>Session</h3>\n<p>7.4、Session(重点)<br>\n什么是Session:<br>\n·服务器会给每一个用户(浏览器)创建一个Seesion对象;<br>\n·一个Seesion独占一个浏览器，只要浏览器没有关闭，这个Session就存在;·用户登录之后，整个网站它都可以访问!</p>\n<h4>注销session</h4>\n<pre class="code-block"><code class="code hljs java">session.invalidate();<br /></code></pre>\n<p>设置session默认的实效时间</p>\n<p>以分钟为单位</p>\n<pre class="code-block"><code class="code hljs xml"><span class="hljs-symbol">&amp;lt;</span>session-config<span class="hljs-symbol">&amp;gt;</span><br />    <span class="hljs-symbol">&amp;lt;</span>session-timeout<span class="hljs-symbol">&amp;gt;</span>15<span class="hljs-symbol">&amp;lt;</span>/session-timeout<span class="hljs-symbol">&amp;gt;</span><br /><span class="hljs-symbol">&amp;lt;</span>/session-config<span class="hljs-symbol">&amp;gt;</span><br /></code></pre>\n<h3>Session和cookie的区别:</h3>\n<p>. Cookie是把用户的数据写给用户的浏览器，浏览器保存(可以保存多个)<br>\n·Session把用户的数据写到用户独占Session中，服务器端保存(保存重要的信息，减少服务器资源的浪费). Session对象由服务创建;<br>\n使用场景:<br>\n●保存一个登录用户的信息;·购物车信息;<br>\n·在整个网站中经常会使用的数据，我们将它保存在Session中;</p>\n	1	0	0	f	2021-04-22 22:34:06.129	2021-04-22 22:34:06.13	3	https://cdn.zhoupb.com/image/generate/332e20748ab13b7b9e87758ee0e8b198.png	CookieSessionCookie、Session会话会话:用户打开一个浏览器，点击了很多超链接，访问多个web资源，关闭浏览器，这个过程可以称之为会话一个网站，怎么证明你来过?客户端服务端1.服务端给客户端一个信件，客户端下次访问服务端带上信件就可以了;cookie2.服务器登记你来过了，下次你来的时候我来匹配你;seesioncookie7.3、Cookie1.从请求中拿到cookie信息2.服务器响应给客户端cookie1cookie[]cookies=req.getcookies(;//获得cookie2cookie.getName(;//获得cookie中的key3cookie.getvalue(;//获得cookie中的v1aue4newcookie(&quot;7astLoginTime&quot;，system.currentTimeMil1is()+&quot;&quot;);//新建一个cookie5cookie.setMaxAge(246060);//设置cookie的有效期6resp.addcookie(cookie);//响应给客户端一个cookie78Icookie:一般会保存在本地的用户目录下appdata;publicclassCookieDemoextendsHttpServlet{@OverrideprotectedvoiddoGet(HttpServletRequestreq,HttpServletResponseresp)throwsServletException,IOException{req.setCharacterEncoding(&amp;quot;utf-8&amp;quot;);resp.setCharacterEncoding(&amp;quot;utf-8&amp;quot;);resp.setContentType(&amp;quot;text/html&amp;quot;);PrintWriterout=resp.getWriter();Cookie[]cookies=req.getCookies();if(cookies!=null){out.write(&amp;quot;你上一次访问时间:&amp;quot;);for(inti=0;i&amp;lt;cookies.length;i++){Cookiecookie=cookies[i];if(cookie.getName().equals(&amp;quot;time&amp;quot;)){longlastTime=Long.parseLong(cookie.getValue());Datedate=newDate(lastTime);out.write(String.valueOf(date));}}}else{out.write(&amp;quot;第一次访问&amp;quot;);}Cookiecookie=newCookie(&amp;quot;time&amp;quot;,System.currentTimeMillis()+&amp;quot;&amp;quot;);resp.addCookie(cookie);}@OverrideprotectedvoiddoPost(HttpServletRequestreq,HttpServletResponseresp)throwsServletException,IOException{doGet(req,resp);}}![pic](CookieSession.assets/pic.jpg)publicclassSessionDemo01extendsHttpServlet{@OverrideprotectedvoiddoGet(HttpServletRequestreq,HttpServletResponseresp)throwsServletException,IOException{req.setCharacterEncoding(&amp;quot;utf-8&amp;quot;);resp.setCharacterEncoding(&amp;quot;utf-8&amp;quot;);resp.setContentType(&amp;quot;text/html;charset=utf-8&amp;quot;);HttpSessionsession=req.getSession();Personname=(Person)session.getAttribute(&amp;quot;name&amp;quot;);System.out.println(name.getName());}@OverrideprotectedvoiddoPost(HttpServletRequestreq,HttpServletResponseresp)throwsServletException,IOException{doGet(req,resp);}}清除cookie设置有效期为0;![image-20210419220338044](CookieSession.assets/image-20210419220338044.png)中文乱码![image-20210419220743601](CookieSession.assets/image-20210419220743601.png)Session7.4、Session(重点)什么是Session:·服务器会给每一个用户(浏览器)创建一个Seesion对象;·一个Seesion独占一个浏览器，只要浏览器没有关闭，这个Session就存在;·用户登录之后，整个网站它都可以访问!注销sessionsession.invalidate();设置session默认的实效时间以分钟为单位&amp;lt;session-config&amp;gt;&amp;lt;session-timeout&amp;gt;15&amp;lt;/session-timeout&amp;gt;&amp;lt;/session-config&amp;gt;Session和cookie的区别:.Cookie是把用户的数据写给用户的浏览器，浏览器保存(可以保存多个)·Session把用户的数据写到用户独占Session中，服务器端保存(保存重要的信息，减少服务器资源的浪费).Session对象由服务创建;使用场景:●保存一个登录用户的信息;·购物车信息;·在整个网站中经常会使用的数据，我们将它保存在Session中;
9	sql的七种Jion理论	{sql}	## Sql的七种Join理论\r\n\r\n### 书写查询SQL顺序\r\n![](https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/04/22/kuangstudy9ebe51d0-b987-4e56-85c4-47aa6fa55298.png)\r\n\r\n\r\n\r\n\r\n### 内部执行SQL顺序\r\n\r\n![](https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/04/22/kuangstudya616e965-e251-4d74-9b93-98ac40cc62b2.png)\r\n\r\n\r\n\r\n\r\n\r\n### 7种join语句\r\n\r\n#### 内连接\r\n\r\n![](https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/04/22/kuangstudy0d990570-85a8-428f-a323-fd7bd27813f9.png)\r\n\r\n```sql\r\nmysql&gt; select * from tbl_emp a inner join tbl_dept b on a.deptId = b.id;\r\n+----+---------+--------+----+-----------+--------+\r\n| id | name    | deptId | id | deptName  | locAdd |\r\n+----+---------+--------+----+-----------+--------+\r\n|  1 | 张三    |      1 |  1 | 人事部    | 10     |\r\n|  2 | 张三2   |      2 |  2 | 测试部    | 15     |\r\n|  3 | 张三3   |      3 |  3 | 策划部    | 150    |\r\n|  4 | 张三4   |      4 |  4 | 开发部    | 160    |\r\n+----+---------+--------+----+-----------+--------+\r\n4 rows in set (0.00 sec)\r\n```\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n#### 左外连接\r\n\r\n![](https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/04/22/kuangstudy649c43ce-0700-4083-b737-4a910262ca0d.png)\r\n\r\n```sql\r\nmysql&gt; select * from tbl_emp a \r\n    -&gt; left join tbl_dept b\r\n    -&gt; on a.deptId = b.id;\r\n+----+----------+--------+------+-----------+--------+\r\n| id | name     | deptId | id   | deptName  | locAdd |\r\n+----+----------+--------+------+-----------+--------+\r\n|  1 | 张三     |      1 |    1 | 人事部    | 10     |\r\n|  2 | 张三2    |      2 |    2 | 测试部    | 15     |\r\n|  3 | 张三3    |      3 |    3 | 策划部    | 150    |\r\n|  4 | 张三4    |      4 |    4 | 开发部    | 160    |\r\n| 10 | 张三10   |     10 | NULL | NULL      | NULL   |\r\n+----+----------+--------+------+-----------+--------+\r\n5 rows in set (0.00 sec)\r\n```\r\n\r\n(左外连续种dept表为驱动表)\r\n\r\n**当查询列表有被驱动表记录时,且查询的记录只在驱动表(emp表)时,查询出的那条记录被驱动表列用NULL填充**\r\n\r\n\r\n\r\n#### 右外连接\r\n\r\n![](https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/04/22/kuangstudy36292191-15a8-40e2-8c41-6085477ce637.png)\r\n\r\n```sql\r\nmysql&gt; select * from tbl_emp a right join tbl_dept b on a.deptId = b.id;\r\n+------+---------+--------+-----+-----------+--------+\r\n| id   | name    | deptId | id  | deptName  | locAdd |\r\n+------+---------+--------+-----+-----------+--------+\r\n|    1 | 张三    |      1 |   1 | 人事部    | 10     |\r\n|    2 | 张三2   |      2 |   2 | 测试部    | 15     |\r\n|    3 | 张三3   |      3 |   3 | 策划部    | 150    |\r\n|    4 | 张三4   |      4 |   4 | 开发部    | 160    |\r\n| NULL | NULL    |   NULL | 100 | 运维部    | 100    |\r\n+------+---------+--------+-----+-----------+--------+\r\n5 rows in set (0.00 sec)\r\n```\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n#### 左外连接不要共同部分\r\n\r\n![](https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/04/22/kuangstudyefa553a7-8fea-4648-9f4f-f80a43afa249.png)\r\n\r\n从左外连接和右外连接可以看出,当记录不是共同部分(两表都有共同关联记录)时,被驱动表的列全被填充为NULL\r\n\r\n**如果不想要中间部分则让被驱动表的列为NULL**\r\n\r\n```sql\r\nmysql&gt; select * from tbl_emp a left join tbl_dept b on a.deptId=b.id where b.id is null;\r\n+----+----------+--------+------+----------+--------+\r\n| id | name     | deptId | id   | deptName | locAdd |\r\n+----+----------+--------+------+----------+--------+\r\n| 10 | 张三10   |     10 | NULL | NULL     | NULL   |\r\n+----+----------+--------+------+----------+--------+\r\n1 row in set (0.00 sec)\r\n```\r\n\r\n\r\n\r\n\r\n\r\n#### 右外连接不要共同部分\r\n\r\n类似左外连接不要共同部分\r\n\r\n![](https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/04/22/kuangstudyc18f8110-1ba9-4d38-ac79-0a40431b3a75.png)\r\n\r\n```sql\r\nmysql&gt; select * from tbl_emp a right join tbl_dept b on a.deptId=b.id where a.id is null;\r\n+------+------+--------+-----+-----------+--------+\r\n| id   | name | deptId | id  | deptName  | locAdd |\r\n+------+------+--------+-----+-----------+--------+\r\n| NULL | NULL |   NULL | 100 | 运维部    | 100    |\r\n+------+------+--------+-----+-----------+--------+\r\n1 row in set (0.00 sec)\r\n\r\nmysql&gt; select * from tbl_emp a right join tbl_dept b on a.deptId=b.id where a.deptId is nulll;\r\n+------+------+--------+-----+-----------+--------+\r\n| id   | name | deptId | id  | deptName  | locAdd |\r\n+------+------+--------+-----+-----------+--------+\r\n| NULL | NULL |   NULL | 100 | 运维部    | 100    |\r\n+------+------+--------+-----+-----------+--------+\r\n1 row in set (0.00 sec)\r\n```\r\n\r\n**只要让被驱动表的列为NULL时都可以查出**\r\n\r\n\r\n\r\n\r\n\r\n#### 全查\r\n\r\n![](https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/04/22/kuangstudyc761f929-211d-493f-ab33-3c7a15d5aae4.png)\r\n\r\n可以想成 **左外连接 + 右外连接 + 去重中间部分** (union可以去重)\r\n\r\n```sql\r\nmysql&gt; select * from tbl_emp a left join tbl_dept b on a.deptId=b.id\r\n    -&gt; union\r\n    -&gt; select * from tbl_emp a right join tbl_dept b on a.deptId=b.id;\r\n+------+----------+--------+------+-----------+--------+\r\n| id   | name     | deptId | id   | deptName  | locAdd |\r\n+------+----------+--------+------+-----------+--------+\r\n|    1 | 张三     |      1 |    1 | 人事部    | 10     |\r\n|    2 | 张三2    |      2 |    2 | 测试部    | 15     |\r\n|    3 | 张三3    |      3 |    3 | 策划部    | 150    |\r\n|    4 | 张三4    |      4 |    4 | 开发部    | 160    |\r\n|   10 | 张三10   |     10 | NULL | NULL      | NULL   |\r\n| NULL | NULL     |   NULL |  100 | 运维部    | 100    |\r\n+------+----------+--------+------+-----------+--------+\r\n6 rows in set (0.00 sec)\r\n```\r\n\r\n\r\n\r\n\r\n\r\n#### 全查的基础上不要共同部分\r\n\r\n![](https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/04/22/kuangstudy013f1d70-8664-40c7-a122-11284a6e2a3f.png)\r\n\r\n可以想成 **左外连接不要共同部分 + 右外连接不要共同部分**\r\n\r\n```sql\r\nmysql&gt; \r\nselect * from tbl_emp a left join tbl_dept b on a.deptId=b.id where b.id is null \r\nunioon \r\nselect * from tbl_emp a right join tbl_dept b on a.deptId=b.id where a.deptId is null;\r\n+------+----------+--------+------+-----------+--------+\r\n| id   | name     | deptId | id   | deptName  | locAdd |\r\n+------+----------+--------+------+-----------+--------+\r\n|   10 | 张三10   |     10 | NULL | NULL      | NULL   |\r\n| NULL | NULL     |   NULL |  100 | 运维部    | 100    |\r\n+------+----------+--------+------+-----------+--------+\r\n2 rows in set (0.00 sec)	<h2>Sql的七种Join理论</h2>\n<h3>书写查询SQL顺序</h3>\n<p><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/04/22/kuangstudy9ebe51d0-b987-4e56-85c4-47aa6fa55298.png" alt=""></p>\n<h3>内部执行SQL顺序</h3>\n<p><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/04/22/kuangstudya616e965-e251-4d74-9b93-98ac40cc62b2.png" alt=""></p>\n<h3>7种join语句</h3>\n<h4>内连接</h4>\n<p><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/04/22/kuangstudy0d990570-85a8-428f-a323-fd7bd27813f9.png" alt=""></p>\n<pre class="code-block"><code class="code hljs sql">mysql<span class="hljs-operator">&amp;</span>gt; <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> tbl_emp a <span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> tbl_dept b <span class="hljs-keyword">on</span> a.deptId <span class="hljs-operator">=</span> b.id;<br /><span class="hljs-operator">+</span><span class="hljs-comment">----+---------+--------+----+-----------+--------+</span><br /><span class="hljs-operator">|</span> id <span class="hljs-operator">|</span> name    <span class="hljs-operator">|</span> deptId <span class="hljs-operator">|</span> id <span class="hljs-operator">|</span> deptName  <span class="hljs-operator">|</span> locAdd <span class="hljs-operator">|</span><br /><span class="hljs-operator">+</span><span class="hljs-comment">----+---------+--------+----+-----------+--------+</span><br /><span class="hljs-operator">|</span>  <span class="hljs-number">1</span> <span class="hljs-operator">|</span> 张三    <span class="hljs-operator">|</span>      <span class="hljs-number">1</span> <span class="hljs-operator">|</span>  <span class="hljs-number">1</span> <span class="hljs-operator">|</span> 人事部    <span class="hljs-operator">|</span> <span class="hljs-number">10</span>     <span class="hljs-operator">|</span><br /><span class="hljs-operator">|</span>  <span class="hljs-number">2</span> <span class="hljs-operator">|</span> 张三<span class="hljs-number">2</span>   <span class="hljs-operator">|</span>      <span class="hljs-number">2</span> <span class="hljs-operator">|</span>  <span class="hljs-number">2</span> <span class="hljs-operator">|</span> 测试部    <span class="hljs-operator">|</span> <span class="hljs-number">15</span>     <span class="hljs-operator">|</span><br /><span class="hljs-operator">|</span>  <span class="hljs-number">3</span> <span class="hljs-operator">|</span> 张三<span class="hljs-number">3</span>   <span class="hljs-operator">|</span>      <span class="hljs-number">3</span> <span class="hljs-operator">|</span>  <span class="hljs-number">3</span> <span class="hljs-operator">|</span> 策划部    <span class="hljs-operator">|</span> <span class="hljs-number">150</span>    <span class="hljs-operator">|</span><br /><span class="hljs-operator">|</span>  <span class="hljs-number">4</span> <span class="hljs-operator">|</span> 张三<span class="hljs-number">4</span>   <span class="hljs-operator">|</span>      <span class="hljs-number">4</span> <span class="hljs-operator">|</span>  <span class="hljs-number">4</span> <span class="hljs-operator">|</span> 开发部    <span class="hljs-operator">|</span> <span class="hljs-number">160</span>    <span class="hljs-operator">|</span><br /><span class="hljs-operator">+</span><span class="hljs-comment">----+---------+--------+----+-----------+--------+</span><br /><span class="hljs-number">4</span> <span class="hljs-keyword">rows</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br /></code></pre>\n<h4>左外连接</h4>\n<p><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/04/22/kuangstudy649c43ce-0700-4083-b737-4a910262ca0d.png" alt=""></p>\n<pre class="code-block"><code class="code hljs sql">mysql<span class="hljs-operator">&amp;</span>gt; <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> tbl_emp a <br />    <span class="hljs-operator">-</span><span class="hljs-operator">&amp;</span>gt; <span class="hljs-keyword">left</span> <span class="hljs-keyword">join</span> tbl_dept b<br />    <span class="hljs-operator">-</span><span class="hljs-operator">&amp;</span>gt; <span class="hljs-keyword">on</span> a.deptId <span class="hljs-operator">=</span> b.id;<br /><span class="hljs-operator">+</span><span class="hljs-comment">----+----------+--------+------+-----------+--------+</span><br /><span class="hljs-operator">|</span> id <span class="hljs-operator">|</span> name     <span class="hljs-operator">|</span> deptId <span class="hljs-operator">|</span> id   <span class="hljs-operator">|</span> deptName  <span class="hljs-operator">|</span> locAdd <span class="hljs-operator">|</span><br /><span class="hljs-operator">+</span><span class="hljs-comment">----+----------+--------+------+-----------+--------+</span><br /><span class="hljs-operator">|</span>  <span class="hljs-number">1</span> <span class="hljs-operator">|</span> 张三     <span class="hljs-operator">|</span>      <span class="hljs-number">1</span> <span class="hljs-operator">|</span>    <span class="hljs-number">1</span> <span class="hljs-operator">|</span> 人事部    <span class="hljs-operator">|</span> <span class="hljs-number">10</span>     <span class="hljs-operator">|</span><br /><span class="hljs-operator">|</span>  <span class="hljs-number">2</span> <span class="hljs-operator">|</span> 张三<span class="hljs-number">2</span>    <span class="hljs-operator">|</span>      <span class="hljs-number">2</span> <span class="hljs-operator">|</span>    <span class="hljs-number">2</span> <span class="hljs-operator">|</span> 测试部    <span class="hljs-operator">|</span> <span class="hljs-number">15</span>     <span class="hljs-operator">|</span><br /><span class="hljs-operator">|</span>  <span class="hljs-number">3</span> <span class="hljs-operator">|</span> 张三<span class="hljs-number">3</span>    <span class="hljs-operator">|</span>      <span class="hljs-number">3</span> <span class="hljs-operator">|</span>    <span class="hljs-number">3</span> <span class="hljs-operator">|</span> 策划部    <span class="hljs-operator">|</span> <span class="hljs-number">150</span>    <span class="hljs-operator">|</span><br /><span class="hljs-operator">|</span>  <span class="hljs-number">4</span> <span class="hljs-operator">|</span> 张三<span class="hljs-number">4</span>    <span class="hljs-operator">|</span>      <span class="hljs-number">4</span> <span class="hljs-operator">|</span>    <span class="hljs-number">4</span> <span class="hljs-operator">|</span> 开发部    <span class="hljs-operator">|</span> <span class="hljs-number">160</span>    <span class="hljs-operator">|</span><br /><span class="hljs-operator">|</span> <span class="hljs-number">10</span> <span class="hljs-operator">|</span> 张三<span class="hljs-number">10</span>   <span class="hljs-operator">|</span>     <span class="hljs-number">10</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>      <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>   <span class="hljs-operator">|</span><br /><span class="hljs-operator">+</span><span class="hljs-comment">----+----------+--------+------+-----------+--------+</span><br /><span class="hljs-number">5</span> <span class="hljs-keyword">rows</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br /></code></pre>\n<p>(左外连续种dept表为驱动表)</p>\n<p><strong>当查询列表有被驱动表记录时,且查询的记录只在驱动表(emp表)时,查询出的那条记录被驱动表列用NULL填充</strong></p>\n<h4>右外连接</h4>\n<p><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/04/22/kuangstudy36292191-15a8-40e2-8c41-6085477ce637.png" alt=""></p>\n<pre class="code-block"><code class="code hljs sql">mysql<span class="hljs-operator">&amp;</span>gt; <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> tbl_emp a <span class="hljs-keyword">right</span> <span class="hljs-keyword">join</span> tbl_dept b <span class="hljs-keyword">on</span> a.deptId <span class="hljs-operator">=</span> b.id;<br /><span class="hljs-operator">+</span><span class="hljs-comment">------+---------+--------+-----+-----------+--------+</span><br /><span class="hljs-operator">|</span> id   <span class="hljs-operator">|</span> name    <span class="hljs-operator">|</span> deptId <span class="hljs-operator">|</span> id  <span class="hljs-operator">|</span> deptName  <span class="hljs-operator">|</span> locAdd <span class="hljs-operator">|</span><br /><span class="hljs-operator">+</span><span class="hljs-comment">------+---------+--------+-----+-----------+--------+</span><br /><span class="hljs-operator">|</span>    <span class="hljs-number">1</span> <span class="hljs-operator">|</span> 张三    <span class="hljs-operator">|</span>      <span class="hljs-number">1</span> <span class="hljs-operator">|</span>   <span class="hljs-number">1</span> <span class="hljs-operator">|</span> 人事部    <span class="hljs-operator">|</span> <span class="hljs-number">10</span>     <span class="hljs-operator">|</span><br /><span class="hljs-operator">|</span>    <span class="hljs-number">2</span> <span class="hljs-operator">|</span> 张三<span class="hljs-number">2</span>   <span class="hljs-operator">|</span>      <span class="hljs-number">2</span> <span class="hljs-operator">|</span>   <span class="hljs-number">2</span> <span class="hljs-operator">|</span> 测试部    <span class="hljs-operator">|</span> <span class="hljs-number">15</span>     <span class="hljs-operator">|</span><br /><span class="hljs-operator">|</span>    <span class="hljs-number">3</span> <span class="hljs-operator">|</span> 张三<span class="hljs-number">3</span>   <span class="hljs-operator">|</span>      <span class="hljs-number">3</span> <span class="hljs-operator">|</span>   <span class="hljs-number">3</span> <span class="hljs-operator">|</span> 策划部    <span class="hljs-operator">|</span> <span class="hljs-number">150</span>    <span class="hljs-operator">|</span><br /><span class="hljs-operator">|</span>    <span class="hljs-number">4</span> <span class="hljs-operator">|</span> 张三<span class="hljs-number">4</span>   <span class="hljs-operator">|</span>      <span class="hljs-number">4</span> <span class="hljs-operator">|</span>   <span class="hljs-number">4</span> <span class="hljs-operator">|</span> 开发部    <span class="hljs-operator">|</span> <span class="hljs-number">160</span>    <span class="hljs-operator">|</span><br /><span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>    <span class="hljs-operator">|</span>   <span class="hljs-keyword">NULL</span> <span class="hljs-operator">|</span> <span class="hljs-number">100</span> <span class="hljs-operator">|</span> 运维部    <span class="hljs-operator">|</span> <span class="hljs-number">100</span>    <span class="hljs-operator">|</span><br /><span class="hljs-operator">+</span><span class="hljs-comment">------+---------+--------+-----+-----------+--------+</span><br /><span class="hljs-number">5</span> <span class="hljs-keyword">rows</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br /></code></pre>\n<h4>左外连接不要共同部分</h4>\n<p><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/04/22/kuangstudyefa553a7-8fea-4648-9f4f-f80a43afa249.png" alt=""></p>\n<p>从左外连接和右外连接可以看出,当记录不是共同部分(两表都有共同关联记录)时,被驱动表的列全被填充为NULL</p>\n<p><strong>如果不想要中间部分则让被驱动表的列为NULL</strong></p>\n<pre class="code-block"><code class="code hljs sql">mysql<span class="hljs-operator">&amp;</span>gt; <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> tbl_emp a <span class="hljs-keyword">left</span> <span class="hljs-keyword">join</span> tbl_dept b <span class="hljs-keyword">on</span> a.deptId<span class="hljs-operator">=</span>b.id <span class="hljs-keyword">where</span> b.id <span class="hljs-keyword">is</span> <span class="hljs-keyword">null</span>;<br /><span class="hljs-operator">+</span><span class="hljs-comment">----+----------+--------+------+----------+--------+</span><br /><span class="hljs-operator">|</span> id <span class="hljs-operator">|</span> name     <span class="hljs-operator">|</span> deptId <span class="hljs-operator">|</span> id   <span class="hljs-operator">|</span> deptName <span class="hljs-operator">|</span> locAdd <span class="hljs-operator">|</span><br /><span class="hljs-operator">+</span><span class="hljs-comment">----+----------+--------+------+----------+--------+</span><br /><span class="hljs-operator">|</span> <span class="hljs-number">10</span> <span class="hljs-operator">|</span> 张三<span class="hljs-number">10</span>   <span class="hljs-operator">|</span>     <span class="hljs-number">10</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>     <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>   <span class="hljs-operator">|</span><br /><span class="hljs-operator">+</span><span class="hljs-comment">----+----------+--------+------+----------+--------+</span><br /><span class="hljs-number">1</span> <span class="hljs-type">row</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br /></code></pre>\n<h4>右外连接不要共同部分</h4>\n<p>类似左外连接不要共同部分</p>\n<p><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/04/22/kuangstudyc18f8110-1ba9-4d38-ac79-0a40431b3a75.png" alt=""></p>\n<pre class="code-block"><code class="code hljs sql">mysql<span class="hljs-operator">&amp;</span>gt; <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> tbl_emp a <span class="hljs-keyword">right</span> <span class="hljs-keyword">join</span> tbl_dept b <span class="hljs-keyword">on</span> a.deptId<span class="hljs-operator">=</span>b.id <span class="hljs-keyword">where</span> a.id <span class="hljs-keyword">is</span> <span class="hljs-keyword">null</span>;<br /><span class="hljs-operator">+</span><span class="hljs-comment">------+------+--------+-----+-----------+--------+</span><br /><span class="hljs-operator">|</span> id   <span class="hljs-operator">|</span> name <span class="hljs-operator">|</span> deptId <span class="hljs-operator">|</span> id  <span class="hljs-operator">|</span> deptName  <span class="hljs-operator">|</span> locAdd <span class="hljs-operator">|</span><br /><span class="hljs-operator">+</span><span class="hljs-comment">------+------+--------+-----+-----------+--------+</span><br /><span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span> <span class="hljs-operator">|</span>   <span class="hljs-keyword">NULL</span> <span class="hljs-operator">|</span> <span class="hljs-number">100</span> <span class="hljs-operator">|</span> 运维部    <span class="hljs-operator">|</span> <span class="hljs-number">100</span>    <span class="hljs-operator">|</span><br /><span class="hljs-operator">+</span><span class="hljs-comment">------+------+--------+-----+-----------+--------+</span><br /><span class="hljs-number">1</span> <span class="hljs-type">row</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br /><br />mysql<span class="hljs-operator">&amp;</span>gt; <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> tbl_emp a <span class="hljs-keyword">right</span> <span class="hljs-keyword">join</span> tbl_dept b <span class="hljs-keyword">on</span> a.deptId<span class="hljs-operator">=</span>b.id <span class="hljs-keyword">where</span> a.deptId <span class="hljs-keyword">is</span> nulll;<br /><span class="hljs-operator">+</span><span class="hljs-comment">------+------+--------+-----+-----------+--------+</span><br /><span class="hljs-operator">|</span> id   <span class="hljs-operator">|</span> name <span class="hljs-operator">|</span> deptId <span class="hljs-operator">|</span> id  <span class="hljs-operator">|</span> deptName  <span class="hljs-operator">|</span> locAdd <span class="hljs-operator">|</span><br /><span class="hljs-operator">+</span><span class="hljs-comment">------+------+--------+-----+-----------+--------+</span><br /><span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span> <span class="hljs-operator">|</span>   <span class="hljs-keyword">NULL</span> <span class="hljs-operator">|</span> <span class="hljs-number">100</span> <span class="hljs-operator">|</span> 运维部    <span class="hljs-operator">|</span> <span class="hljs-number">100</span>    <span class="hljs-operator">|</span><br /><span class="hljs-operator">+</span><span class="hljs-comment">------+------+--------+-----+-----------+--------+</span><br /><span class="hljs-number">1</span> <span class="hljs-type">row</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br /></code></pre>\n<p><strong>只要让被驱动表的列为NULL时都可以查出</strong></p>\n<h4>全查</h4>\n<p><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/04/22/kuangstudyc761f929-211d-493f-ab33-3c7a15d5aae4.png" alt=""></p>\n<p>可以想成 <strong>左外连接 + 右外连接 + 去重中间部分</strong> (union可以去重)</p>\n<pre class="code-block"><code class="code hljs sql">mysql<span class="hljs-operator">&amp;</span>gt; <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> tbl_emp a <span class="hljs-keyword">left</span> <span class="hljs-keyword">join</span> tbl_dept b <span class="hljs-keyword">on</span> a.deptId<span class="hljs-operator">=</span>b.id<br />    <span class="hljs-operator">-</span><span class="hljs-operator">&amp;</span>gt; <span class="hljs-keyword">union</span><br />    <span class="hljs-operator">-</span><span class="hljs-operator">&amp;</span>gt; <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> tbl_emp a <span class="hljs-keyword">right</span> <span class="hljs-keyword">join</span> tbl_dept b <span class="hljs-keyword">on</span> a.deptId<span class="hljs-operator">=</span>b.id;<br /><span class="hljs-operator">+</span><span class="hljs-comment">------+----------+--------+------+-----------+--------+</span><br /><span class="hljs-operator">|</span> id   <span class="hljs-operator">|</span> name     <span class="hljs-operator">|</span> deptId <span class="hljs-operator">|</span> id   <span class="hljs-operator">|</span> deptName  <span class="hljs-operator">|</span> locAdd <span class="hljs-operator">|</span><br /><span class="hljs-operator">+</span><span class="hljs-comment">------+----------+--------+------+-----------+--------+</span><br /><span class="hljs-operator">|</span>    <span class="hljs-number">1</span> <span class="hljs-operator">|</span> 张三     <span class="hljs-operator">|</span>      <span class="hljs-number">1</span> <span class="hljs-operator">|</span>    <span class="hljs-number">1</span> <span class="hljs-operator">|</span> 人事部    <span class="hljs-operator">|</span> <span class="hljs-number">10</span>     <span class="hljs-operator">|</span><br /><span class="hljs-operator">|</span>    <span class="hljs-number">2</span> <span class="hljs-operator">|</span> 张三<span class="hljs-number">2</span>    <span class="hljs-operator">|</span>      <span class="hljs-number">2</span> <span class="hljs-operator">|</span>    <span class="hljs-number">2</span> <span class="hljs-operator">|</span> 测试部    <span class="hljs-operator">|</span> <span class="hljs-number">15</span>     <span class="hljs-operator">|</span><br /><span class="hljs-operator">|</span>    <span class="hljs-number">3</span> <span class="hljs-operator">|</span> 张三<span class="hljs-number">3</span>    <span class="hljs-operator">|</span>      <span class="hljs-number">3</span> <span class="hljs-operator">|</span>    <span class="hljs-number">3</span> <span class="hljs-operator">|</span> 策划部    <span class="hljs-operator">|</span> <span class="hljs-number">150</span>    <span class="hljs-operator">|</span><br /><span class="hljs-operator">|</span>    <span class="hljs-number">4</span> <span class="hljs-operator">|</span> 张三<span class="hljs-number">4</span>    <span class="hljs-operator">|</span>      <span class="hljs-number">4</span> <span class="hljs-operator">|</span>    <span class="hljs-number">4</span> <span class="hljs-operator">|</span> 开发部    <span class="hljs-operator">|</span> <span class="hljs-number">160</span>    <span class="hljs-operator">|</span><br /><span class="hljs-operator">|</span>   <span class="hljs-number">10</span> <span class="hljs-operator">|</span> 张三<span class="hljs-number">10</span>   <span class="hljs-operator">|</span>     <span class="hljs-number">10</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>      <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>   <span class="hljs-operator">|</span><br /><span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>     <span class="hljs-operator">|</span>   <span class="hljs-keyword">NULL</span> <span class="hljs-operator">|</span>  <span class="hljs-number">100</span> <span class="hljs-operator">|</span> 运维部    <span class="hljs-operator">|</span> <span class="hljs-number">100</span>    <span class="hljs-operator">|</span><br /><span class="hljs-operator">+</span><span class="hljs-comment">------+----------+--------+------+-----------+--------+</span><br /><span class="hljs-number">6</span> <span class="hljs-keyword">rows</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br /></code></pre>\n<h4>全查的基础上不要共同部分</h4>\n<p><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/04/22/kuangstudy013f1d70-8664-40c7-a122-11284a6e2a3f.png" alt=""></p>\n<p>可以想成 <strong>左外连接不要共同部分 + 右外连接不要共同部分</strong></p>\n<pre class="code-block"><code class="code hljs sql">mysql<span class="hljs-operator">&amp;</span>gt; <br /><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> tbl_emp a <span class="hljs-keyword">left</span> <span class="hljs-keyword">join</span> tbl_dept b <span class="hljs-keyword">on</span> a.deptId<span class="hljs-operator">=</span>b.id <span class="hljs-keyword">where</span> b.id <span class="hljs-keyword">is</span> <span class="hljs-keyword">null</span> <br />unioon <br /><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> tbl_emp a <span class="hljs-keyword">right</span> <span class="hljs-keyword">join</span> tbl_dept b <span class="hljs-keyword">on</span> a.deptId<span class="hljs-operator">=</span>b.id <span class="hljs-keyword">where</span> a.deptId <span class="hljs-keyword">is</span> <span class="hljs-keyword">null</span>;<br /><span class="hljs-operator">+</span><span class="hljs-comment">------+----------+--------+------+-----------+--------+</span><br /><span class="hljs-operator">|</span> id   <span class="hljs-operator">|</span> name     <span class="hljs-operator">|</span> deptId <span class="hljs-operator">|</span> id   <span class="hljs-operator">|</span> deptName  <span class="hljs-operator">|</span> locAdd <span class="hljs-operator">|</span><br /><span class="hljs-operator">+</span><span class="hljs-comment">------+----------+--------+------+-----------+--------+</span><br /><span class="hljs-operator">|</span>   <span class="hljs-number">10</span> <span class="hljs-operator">|</span> 张三<span class="hljs-number">10</span>   <span class="hljs-operator">|</span>     <span class="hljs-number">10</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>      <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>   <span class="hljs-operator">|</span><br /><span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>     <span class="hljs-operator">|</span>   <span class="hljs-keyword">NULL</span> <span class="hljs-operator">|</span>  <span class="hljs-number">100</span> <span class="hljs-operator">|</span> 运维部    <span class="hljs-operator">|</span> <span class="hljs-number">100</span>    <span class="hljs-operator">|</span><br /><span class="hljs-operator">+</span><span class="hljs-comment">------+----------+--------+------+-----------+--------+</span><br /><span class="hljs-number">2</span> <span class="hljs-keyword">rows</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)</code></pre>\n	3	0	0	f	2021-04-22 22:34:07.127	2021-04-22 22:37:24.469648	2	https://cdn.zhoupb.com/image/generate/d030729eff39961e6400ba9ced7056f7.png	Sql的七种Join理论书写查询SQL顺序内部执行SQL顺序7种join语句内连接mysql&amp;gt;select*fromtbl_empainnerjointbl_deptbona.deptId=b.id;+----+---------+--------+----+-----------+--------+|id|name|deptId|id|deptName|locAdd|+----+---------+--------+----+-----------+--------+|1|张三|1|1|人事部|10||2|张三2|2|2|测试部|15||3|张三3|3|3|策划部|150||4|张三4|4|4|开发部|160|+----+---------+--------+----+-----------+--------+4rowsinset(0.00sec)左外连接mysql&amp;gt;select*fromtbl_empa-&amp;gt;leftjointbl_deptb-&amp;gt;ona.deptId=b.id;+----+----------+--------+------+-----------+--------+|id|name|deptId|id|deptName|locAdd|+----+----------+--------+------+-----------+--------+|1|张三|1|1|人事部|10||2|张三2|2|2|测试部|15||3|张三3|3|3|策划部|150||4|张三4|4|4|开发部|160||10|张三10|10|NULL|NULL|NULL|+----+----------+--------+------+-----------+--------+5rowsinset(0.00sec)(左外连续种dept表为驱动表)当查询列表有被驱动表记录时,且查询的记录只在驱动表(emp表)时,查询出的那条记录被驱动表列用NULL填充右外连接mysql&amp;gt;select*fromtbl_emparightjointbl_deptbona.deptId=b.id;+------+---------+--------+-----+-----------+--------+|id|name|deptId|id|deptName|locAdd|+------+---------+--------+-----+-----------+--------+|1|张三|1|1|人事部|10||2|张三2|2|2|测试部|15||3|张三3|3|3|策划部|150||4|张三4|4|4|开发部|160||NULL|NULL|NULL|100|运维部|100|+------+---------+--------+-----+-----------+--------+5rowsinset(0.00sec)左外连接不要共同部分从左外连接和右外连接可以看出,当记录不是共同部分(两表都有共同关联记录)时,被驱动表的列全被填充为NULL如果不想要中间部分则让被驱动表的列为NULLmysql&amp;gt;select*fromtbl_empaleftjointbl_deptbona.deptId=b.idwhereb.idisnull;+----+----------+--------+------+----------+--------+|id|name|deptId|id|deptName|locAdd|+----+----------+--------+------+----------+--------+|10|张三10|10|NULL|NULL|NULL|+----+----------+--------+------+----------+--------+1rowinset(0.00sec)右外连接不要共同部分类似左外连接不要共同部分mysql&amp;gt;select*fromtbl_emparightjointbl_deptbona.deptId=b.idwherea.idisnull;+------+------+--------+-----+-----------+--------+|id|name|deptId|id|deptName|locAdd|+------+------+--------+-----+-----------+--------+|NULL|NULL|NULL|100|运维部|100|+------+------+--------+-----+-----------+--------+1rowinset(0.00sec)mysql&amp;gt;select*fromtbl_emparightjointbl_deptbona.deptId=b.idwherea.deptIdisnulll;+------+------+--------+-----+-----------+--------+|id|name|deptId|id|deptName|locAdd|+------+------+--------+-----+-----------+--------+|NULL|NULL|NULL|100|运维部|100|+------+------+--------+-----+-----------+--------+1rowinset(0.00sec)只要让被驱动表的列为NULL时都可以查出全查可以想成左外连接+右外连接+去重中间部分(union可以去重)mysql&amp;gt;select*fromtbl_empaleftjointbl_deptbona.deptId=b.id-&amp;gt;union-&amp;gt;select*fromtbl_emparightjointbl_deptbona.deptId=b.id;+------+----------+--------+------+-----------+--------+|id|name|deptId|id|deptName|locAdd|+------+----------+--------+------+-----------+--------+|1|张三|1|1|人事部|10||2|张三2|2|2|测试部|15||3|张三3|3|3|策划部|150||4|张三4|4|4|开发部|160||10|张三10|10|NULL|NULL|NULL||NULL|NULL|NULL|100|运维部|100|+------+----------+--------+------+-----------+--------+6rowsinset(0.00sec)全查的基础上不要共同部分可以想成左外连接不要共同部分+右外连接不要共同部分mysql&amp;gt;select*fromtbl_empaleftjointbl_deptbona.deptId=b.idwhereb.idisnullunioonselect*fromtbl_emparightjointbl_deptbona.deptId=b.idwherea.deptIdisnull;+------+----------+--------+------+-----------+--------+|id|name|deptId|id|deptName|locAdd|+------+----------+--------+------+-----------+--------+|10|张三10|10|NULL|NULL|NULL||NULL|NULL|NULL|100|运维部|100|+------+----------+--------+------+-----------+--------+2rowsinset(0.00sec)
7	Leetcode 363题目笔记	{Leetcode,Java,算法}	Leetcode_363   矩形区域不超过K的最大数值和\r\n\r\n给你一个 m x n 的矩阵 matrix 和一个整数 k ，找出并返回矩阵内部矩形区域的不超过 k 的最大数值和。\r\n\r\n题目数据保证总会存在一个数值和不超过 k 的矩形区域。\r\n\r\n示例 1：\r\n\r\n输入：matrix = [[1,0,1],[0,-2,3]], k = 2\r\n输出：2\r\n解释：蓝色边框圈出来的矩形区域 [[0, 1], [-2, 3]] 的数值和是 2，且 2 是不超过 k 的最大数字（k = 2）\r\n\r\n示例 2：\r\n\r\n输入：matrix = [[2,2,-1]], k = 3\r\n输出：3\r\n \r\n\r\n提示：\r\n\r\nm == matrix.length\r\nn == matrix[i].length\r\n1 <= m, n <= 100\r\n-100 <= matrix[i][j] <= 100\r\n-105 <= k <= 105\r\n\r\n思路：对每一行每一列的矩阵组合全部遍历 寻找最接近K的数值\r\n![](https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/04/22/kuangstudyd38a7dc5-adf9-4a6e-9545-e8fcd0bdcc82.png)\r\n类比滑动窗口，设置左右边界，rowSum将随着r的右移，累加[l,r]之间的每一行数值\r\n而这个数组本身所代表的意义是每一行取1,2,3...row长的格子时所代表的数值，那么再来一个函数去计算该数组从0开始滑动的数值相加，意味着任取行、列组合成矩形的数值和，最接近K的值保留下来即可 \r\n具体java代码参考如下：\r\n```java\r\n\tpublic int maxSumSubmatrix(int[][]matrix,int k){\r\n        int row=matrix.length;\r\n        int col=matrix[0].length;\r\n        int max=Integer.MIN_VALUE;//max初始化为最小值\r\n            for(int i=0;i<col;i++)//左边界l\r\n            {\r\n                int[]dp=new int[row];\r\n                for(int j=i;j<col;j++)//右边界r\r\n                {\r\n                   for(int m=0;m<row;m++){\r\n                       dp[m]=dp[m]+matrix[m][j];\r\n                   }\r\n                   max=Math.max(max,Max_Sum(dp,k));\r\n                }\r\n            }\r\n\treturn  max;\r\n\t}\r\n    }\r\n\t//对数组进行操作的函数\r\n    public int Max_Sum(int[]dp,int K){\r\n        int len=dp.length;\r\n        int max=Integer.MIN_VALUE;\r\n        for(int i=0;i<len;i++){\r\n            int cur=0;\r\n            for(int j=i;j<len;j++){\r\n            cur+=dp[j];\r\n            if(cur<=K && cur>max){\r\n                max=cur;\r\n            }\r\n        }\r\n        }\r\n        return max;\r\n    }\r\n```	<p>Leetcode_363   矩形区域不超过K的最大数值和</p>\n<p>给你一个 m x n 的矩阵 matrix 和一个整数 k ，找出并返回矩阵内部矩形区域的不超过 k 的最大数值和。</p>\n<p>题目数据保证总会存在一个数值和不超过 k 的矩形区域。</p>\n<p>示例 1：</p>\n<p>输入：matrix = [[1,0,1],[0,-2,3]], k = 2<br>\n输出：2<br>\n解释：蓝色边框圈出来的矩形区域 [[0, 1], [-2, 3]] 的数值和是 2，且 2 是不超过 k 的最大数字（k = 2）</p>\n<p>示例 2：</p>\n<p>输入：matrix = [[2,2,-1]], k = 3<br>\n输出：3</p>\n<p>提示：</p>\n<p>m == matrix.length<br>\nn == matrix[i].length<br>\n1 &lt;= m, n &lt;= 100<br>\n-100 &lt;= matrix[i][j] &lt;= 100<br>\n-105 &lt;= k &lt;= 105</p>\n<p>思路：对每一行每一列的矩阵组合全部遍历 寻找最接近K的数值<br>\n<img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/04/22/kuangstudyd38a7dc5-adf9-4a6e-9545-e8fcd0bdcc82.png" alt=""><br>\n类比滑动窗口，设置左右边界，rowSum将随着r的右移，累加[l,r]之间的每一行数值<br>\n而这个数组本身所代表的意义是每一行取1,2,3…row长的格子时所代表的数值，那么再来一个函数去计算该数组从0开始滑动的数值相加，意味着任取行、列组合成矩形的数值和，最接近K的值保留下来即可<br>\n具体java代码参考如下：</p>\n<pre class="code-block"><code class="code hljs java">\t<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">maxSumSubmatrix</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[][]matrix,<span class="hljs-keyword">int</span> k)</span></span>{<br />        <span class="hljs-keyword">int</span> row=matrix.length;<br />        <span class="hljs-keyword">int</span> col=matrix[<span class="hljs-number">0</span>].length;<br />        <span class="hljs-keyword">int</span> max=Integer.MIN_VALUE;<span class="hljs-comment">//max初始化为最小值</span><br />            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;col;i++)<span class="hljs-comment">//左边界l</span><br />            {<br />                <span class="hljs-keyword">int</span>[]dp=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[row];<br />                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=i;j&lt;col;j++)<span class="hljs-comment">//右边界r</span><br />                {<br />                   <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> m=<span class="hljs-number">0</span>;m&lt;row;m++){<br />                       dp[m]=dp[m]+matrix[m][j];<br />                   }<br />                   max=Math.max(max,Max_Sum(dp,k));<br />                }<br />            }<br />\t<span class="hljs-keyword">return</span>  max;<br />\t}<br />    }<br />\t<span class="hljs-comment">//对数组进行操作的函数</span><br />    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">Max_Sum</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[]dp,<span class="hljs-keyword">int</span> K)</span></span>{<br />        <span class="hljs-keyword">int</span> len=dp.length;<br />        <span class="hljs-keyword">int</span> max=Integer.MIN_VALUE;<br />        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;len;i++){<br />            <span class="hljs-keyword">int</span> cur=<span class="hljs-number">0</span>;<br />            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=i;j&lt;len;j++){<br />            cur+=dp[j];<br />            <span class="hljs-keyword">if</span>(cur&lt;=K &amp;&amp; cur&gt;max){<br />                max=cur;<br />            }<br />        }<br />        }<br />        <span class="hljs-keyword">return</span> max;<br />    }<br /></code></pre>\n	3	0	0	f	2021-04-22 22:33:25.969891	2021-04-22 22:34:38.269924	1	https://cdn.zhoupb.com/image/generate/db6d7a988c3df7b6cd1b8de551915574.png	Leetcode_363矩形区域不超过K的最大数值和给你一个mxn的矩阵matrix和一个整数k，找出并返回矩阵内部矩形区域的不超过k的最大数值和。题目数据保证总会存在一个数值和不超过k的矩形区域。示例1：输入：matrix=[[1,0,1],[0,-2,3]],k=2输出：2解释：蓝色边框圈出来的矩形区域[[0,1],[-2,3]]的数值和是2，且2是不超过k的最大数字（k=2）示例2：输入：matrix=[[2,2,-1]],k=3输出：3提示：m==matrix.lengthn==matrix[i].length1&lt;=m,n&lt;=100-100&lt;=matrix[i][j]&lt;=100-105&lt;=k&lt;=105思路：对每一行每一列的矩阵组合全部遍历寻找最接近K的数值类比滑动窗口，设置左右边界，rowSum将随着r的右移，累加[l,r]之间的每一行数值而这个数组本身所代表的意义是每一行取1,2,3…row长的格子时所代表的数值，那么再来一个函数去计算该数组从0开始滑动的数值相加，意味着任取行、列组合成矩形的数值和，最接近K的值保留下来即可具体java代码参考如下：publicintmaxSumSubmatrix(int[][]matrix,intk){introw=matrix.length;intcol=matrix[0].length;intmax=Integer.MIN_VALUE;//max初始化为最小值for(inti=0;i&lt;col;i++)//左边界l{int[]dp=newint[row];for(intj=i;j&lt;col;j++)//右边界r{for(intm=0;m&lt;row;m++){dp[m]=dp[m]+matrix[m][j];}max=Math.max(max,Max_Sum(dp,k));}}returnmax;}}//对数组进行操作的函数publicintMax_Sum(int[]dp,intK){intlen=dp.length;intmax=Integer.MIN_VALUE;for(inti=0;i&lt;len;i++){intcur=0;for(intj=i;j&lt;len;j++){cur+=dp[j];if(cur&lt;=K&amp;&amp;cur&gt;max){max=cur;}}}returnmax;}
15	Java 开发环境搭建	{java}	## 1. 前言\r\n\r\n要进行 Java 开发，那怎么能少得了 JDK 呢，那么就首先来教大家如何安装并配置 JDK；\r\n\r\n## 2. 下载并安装 JDK\r\n\r\n### 2.1 Windows\r\n\r\n#### 2.1.1 安装\r\n\r\n1.  首先进入  [Oracle 官网](https://www.oracle.com/java/technologies/javase-downloads.html)，然后找到自己想要的 JDK 版本，这边以 JDK 11 为例；\r\n\r\n![](https://img-blog.csdnimg.cn/img_convert/e0f644ac6dc11c0aad90950033f1ae9c.png)\r\n\r\n2.  点击 JDK Download 后，它会跳转到具体下载页面，然后根据自己的系统来进行选择，此处以 Windows 10 64 位为例；\r\n\r\n![](https://img-blog.csdnimg.cn/img_convert/b434fc59fc0db7b731efe183c785e5b2.png)\r\n\r\n3.  点击最后的连接后，它会让你同意协议，勾选同意，然后登陆你的 Oracle 账户即可开始下载，若是没有 Oracle 账户，点击下面的创建一个即可；\r\n\r\n![](https://img-blog.csdnimg.cn/img_convert/df34758789f8162b21e126dde9c857a8.png)\r\n\r\n![](https://img-blog.csdnimg.cn/img_convert/a52c51e77e39fff25acb7d4f619d5a64.png)\r\n\r\n4.  下载完成后，进行安装即可，安装流程和我们平常安装软件的一样，就不再赘述，需要注意的是要记住如下的安装路径，因为一般我们都不会安装到默认路径，所以一定要记住你所安装到的路径，这关系到后续的配置步骤；\r\n\r\n\r\n![](https://img-blog.csdnimg.cn/img_convert/21aac5438217aba471cecb3b9c62ce8b.png)\r\n\r\n#### 2.1.2  配置 JDK\r\n\r\n好了，经过上面的配置，我们的 JDK 就已经安装好了，但是这个使用你是用不了的，我们还需要进一步的配置；\r\n\r\n打开系统属性来进行环境变量配置，打开系统属性并进行配置的方式如下：\r\n\r\n1.  **Windows + R**  快捷键组合唤醒 Windows 运行窗口，然后输入 `sysdm.cpl`，紧接着回车即可，一般会打开如下界面，然后点击最上方的 **高级**；\r\n\r\n![](https://img-blog.csdnimg.cn/img_convert/1268d2679c0f59a877a167804b5e92fc.png)\r\n\r\n2.  点击高级后，就会打开如下界面，然后打开环境变量；\r\n\r\n\r\n![](https://img-blog.csdnimg.cn/img_convert/d6d1248017060238da834ebb76dde598.png)\r\n3.  新建环境变量 **JAVA_HOME**，然后变量值填入刚才安装 JDK 的路径（刚才提醒过要记住！）；\r\n\r\n![](https://img-blog.csdnimg.cn/img_convert/1f099376b3dc6464825053b8ff6d9d0d.png)\r\n\r\n![](https://img-blog.csdnimg.cn/img_convert/0c5bd96f68d6b380828ec2c18544c7fe.png)\r\n\r\n4.  编辑 **Path** 环境变量，然后新建一个变量值，填入如下内容：`%JAVA_HOME%\\bin`；\r\n\r\n![](https://img-blog.csdnimg.cn/img_convert/e48caa51ec79038bd22c82b0aae616f6.png)\r\n\r\n\r\n5.  各种确定，然后突出系统属性即可，到这一步，理论上我们的 JDK 就安装并配置成功了，接下来我们就去确认一下到底安装好了没；\r\n\r\n\r\n\r\n#### 2.1.3 验证 JDK\r\n\r\n按照上述步骤操作完成之后，接下来就是验证了，一般我们可以通过如下三个命令来进行验证；\r\n\r\n```bash\r\n# 查看 JDK 版本\r\njava -version\r\n\r\n# 编译命令\r\njavac\r\n\r\n# 运行命令\r\njava\r\n```\r\n\r\n打开命令控制台（**Windows + R，然后输入 cmd 回车**），然后输入如上三个命令，如果安装成功，一般是会出现如下内容的；\r\n\r\n![](https://img-blog.csdnimg.cn/img_convert/389fee69f4cfbba0de01137e77a817f8.png)\r\n\r\n![](https://img-blog.csdnimg.cn/img_convert/e9b89e4068316fc20ae2553813b83075.png)\r\n\r\n![](https://img-blog.csdnimg.cn/img_convert/ceaa12cd2523d3ea3e96defea9fbd8e1.png)\r\n\r\n\r\n\r\n\r\n\r\n### 2.2 macOS\r\n\r\n#### 2.2.1 安装\r\n\r\n1.  首先去 [官网下载](https://www.oracle.com/java/technologies/javase-jdk11-downloads.html) 对应安装包；\r\n\r\n![](https://img-blog.csdnimg.cn/img_convert/05375fdb50e8a131d939192b67508871.png)\r\n\r\n2.  接受相关协议并登录下载；\r\n\r\n![](https://img-blog.csdnimg.cn/img_convert/c98fde365fa3703b1defc363ab9bb1a6.png)\r\n\r\n![](https://img-blog.csdnimg.cn/img_convert/bcd00cd812ef7035ce24a4bb9b8c3082.png)\r\n\r\n3.  双击下载好的 `.dmg` 安装包，然后开始安装；\r\n\r\n![](https://img-blog.csdnimg.cn/img_convert/305a9616bd833106e93cbc7a4cb58e57.png)\r\n\r\n4.  安装过程中会让你输入密码，也就是你本机的秘密；\r\n\r\n![](https://img-blog.csdnimg.cn/img_convert/2f86de8bd7cab234fd2f1cc3bbde6660.png)\r\n\r\n5.  安装成功；\r\n\r\n![](https://img-blog.csdnimg.cn/img_convert/d021a88d58cd2e14202014fd3766e3ec.png)\r\n\r\n#### 2.2.2 验证\r\n\r\n不同于 Windows，macOS 下不用再去配置了，它会给你自动配置好，我们只需要去验证即可；\r\n\r\n1.  查看 JDK 版本；\r\n\r\n```bash\r\njava -version\r\n```\r\n\r\n![](https://img-blog.csdnimg.cn/img_convert/9ac7a39c9c0706fd11943f1fab98144e.png)\r\n\r\n2.  编译命令；\r\n\r\n![](https://img-blog.csdnimg.cn/img_convert/fd382f325012a601e719bb3217bd2be5.png)\r\n\r\n3.  运行命令；\r\n\r\n![](https://img-blog.csdnimg.cn/img_convert/ccd1031edf48f255964bfa5ee8d74584.png)\r\n\r\n## 3. 你的第一个 Java程序：HelloWorld\r\n\r\n好了，经过上面的安装配置，我们就可以开始我们的第一个 Java 程序编写了，我们不需要任何的基础，只需要你按照上面的步骤配置好 JDK，就可以了，下面就来具体实践：\r\n\r\n1.  打开的编辑器（推荐 VS Code），如果没有，记事本也成，然后写入如下内容，然后保存为 `Main.java`；\r\n\r\n```java\r\npublic class Main{\r\n    public static void main(String[] args){\r\n        System.out.println(&quot;Hello World!&quot;);\r\n    }\r\n}\r\n```\r\n\r\n2.  打开控制命令台，然后进入上述文件存放的路径，使用如下命令进行编译，然后会生成一个 `Main.class` 文件；\r\n\r\n```bash\r\njavac Main.java\r\n```\r\n\r\n![](https://img-blog.csdnimg.cn/img_convert/273c3a587a1de7098a4a3ae1b60eb2e4.png)\r\n\r\n![](https://img-blog.csdnimg.cn/img_convert/88d272607c243733168f3cb18a26afee.png)\r\n\r\n3.  运行，使用如下命令进行运行，然后就可以看到打印出的最终结果了！\r\n\r\n```bash\r\njava Main\r\n```\r\n\r\n![](https://img-blog.csdnimg.cn/img_convert/d4797369ca28be9d523f5977b98d0e3e.png)\r\n\r\n## 4. 知识点说明\r\n\r\n我们的 Hello World 是打印出来了，但是你肯定对里边的代码很感兴趣，这一节就主要针对我们的 Hello World 程序进行说明；\r\n\r\n```java\r\npublic class Main{\r\n    public static void main(String[] args){\r\n        System.out.println(&quot;Hello World!&quot;);\r\n    }\r\n}\r\n```\r\n\r\n完整的程序代码如上：\r\n\r\n-   `public`：权限修饰符，表示这一个可以公开访问的类，类似的还有 `protected、default、private`，后续学习过程中再一一介绍；\r\n-   `class`：Java 关键字，表示这是一个类；\r\n-   `Main`： 表示我们的类名，在保存时文件要和它同名，否则你的程序是编译不了的。你可以试试，如果把我们上面的 `Main.java` 改成其他名字，你看看是不是还能编译成功呢？\r\n-   `public static void main(String[] args){}`：主方法，这是我们以后最常接触到的一个方法，每个主类当中都必须有一个 `main` 方法；\r\n-   `System.out.println(&quot;Hello World!&quot;)`：控制台输出语句，执行该语句会在控制台中输出字符串，字符串要用双引号 `&quot;&quot;` 括起来，你可以把其中的 `Hello Wolrd!` 换成你想要打印的内容试试看；\r\n\r\n## 5. 总结\r\n\r\n好了，今天的内容到此就结束了，主要介绍了如何在 Windows 和 macOS 中安装 JDK，以及如何写我们的第一个 `Hello World` 程序。最后，则是对我们的 `Hello World` 程序中的相关知识进行了介绍。	<h2>1. 前言</h2>\n<p>要进行 Java 开发，那怎么能少得了 JDK 呢，那么就首先来教大家如何安装并配置 JDK；</p>\n<h2>2. 下载并安装 JDK</h2>\n<h3>2.1 Windows</h3>\n<h4>2.1.1 安装</h4>\n<ol>\n<li>首先进入  <a href="https://www.oracle.com/java/technologies/javase-downloads.html">Oracle 官网</a>，然后找到自己想要的 JDK 版本，这边以 JDK 11 为例；</li>\n</ol>\n<p><img src="https://img-blog.csdnimg.cn/img_convert/e0f644ac6dc11c0aad90950033f1ae9c.png" alt=""></p>\n<ol start="2">\n<li>点击 JDK Download 后，它会跳转到具体下载页面，然后根据自己的系统来进行选择，此处以 Windows 10 64 位为例；</li>\n</ol>\n<p><img src="https://img-blog.csdnimg.cn/img_convert/b434fc59fc0db7b731efe183c785e5b2.png" alt=""></p>\n<ol start="3">\n<li>点击最后的连接后，它会让你同意协议，勾选同意，然后登陆你的 Oracle 账户即可开始下载，若是没有 Oracle 账户，点击下面的创建一个即可；</li>\n</ol>\n<p><img src="https://img-blog.csdnimg.cn/img_convert/df34758789f8162b21e126dde9c857a8.png" alt=""></p>\n<p><img src="https://img-blog.csdnimg.cn/img_convert/a52c51e77e39fff25acb7d4f619d5a64.png" alt=""></p>\n<ol start="4">\n<li>下载完成后，进行安装即可，安装流程和我们平常安装软件的一样，就不再赘述，需要注意的是要记住如下的安装路径，因为一般我们都不会安装到默认路径，所以一定要记住你所安装到的路径，这关系到后续的配置步骤；</li>\n</ol>\n<p><img src="https://img-blog.csdnimg.cn/img_convert/21aac5438217aba471cecb3b9c62ce8b.png" alt=""></p>\n<h4>2.1.2  配置 JDK</h4>\n<p>好了，经过上面的配置，我们的 JDK 就已经安装好了，但是这个使用你是用不了的，我们还需要进一步的配置；</p>\n<p>打开系统属性来进行环境变量配置，打开系统属性并进行配置的方式如下：</p>\n<ol>\n<li><strong>Windows + R</strong>  快捷键组合唤醒 Windows 运行窗口，然后输入 <code>sysdm.cpl</code>，紧接着回车即可，一般会打开如下界面，然后点击最上方的 <strong>高级</strong>；</li>\n</ol>\n<p><img src="https://img-blog.csdnimg.cn/img_convert/1268d2679c0f59a877a167804b5e92fc.png" alt=""></p>\n<ol start="2">\n<li>点击高级后，就会打开如下界面，然后打开环境变量；</li>\n</ol>\n<p><img src="https://img-blog.csdnimg.cn/img_convert/d6d1248017060238da834ebb76dde598.png" alt=""><br>\n3.  新建环境变量 <strong>JAVA_HOME</strong>，然后变量值填入刚才安装 JDK 的路径（刚才提醒过要记住！）；</p>\n<p><img src="https://img-blog.csdnimg.cn/img_convert/1f099376b3dc6464825053b8ff6d9d0d.png" alt=""></p>\n<p><img src="https://img-blog.csdnimg.cn/img_convert/0c5bd96f68d6b380828ec2c18544c7fe.png" alt=""></p>\n<ol start="4">\n<li>编辑 <strong>Path</strong> 环境变量，然后新建一个变量值，填入如下内容：<code>%JAVA_HOME%\\bin</code>；</li>\n</ol>\n<p><img src="https://img-blog.csdnimg.cn/img_convert/e48caa51ec79038bd22c82b0aae616f6.png" alt=""></p>\n<ol start="5">\n<li>各种确定，然后突出系统属性即可，到这一步，理论上我们的 JDK 就安装并配置成功了，接下来我们就去确认一下到底安装好了没；</li>\n</ol>\n<h4>2.1.3 验证 JDK</h4>\n<p>按照上述步骤操作完成之后，接下来就是验证了，一般我们可以通过如下三个命令来进行验证；</p>\n<pre class="code-block"><code class="code hljs bash"><span class="hljs-comment"># 查看 JDK 版本</span><br />java -version<br /><br /><span class="hljs-comment"># 编译命令</span><br />javac<br /><br /><span class="hljs-comment"># 运行命令</span><br />java<br /></code></pre>\n<p>打开命令控制台（<strong>Windows + R，然后输入 cmd 回车</strong>），然后输入如上三个命令，如果安装成功，一般是会出现如下内容的；</p>\n<p><img src="https://img-blog.csdnimg.cn/img_convert/389fee69f4cfbba0de01137e77a817f8.png" alt=""></p>\n<p><img src="https://img-blog.csdnimg.cn/img_convert/e9b89e4068316fc20ae2553813b83075.png" alt=""></p>\n<p><img src="https://img-blog.csdnimg.cn/img_convert/ceaa12cd2523d3ea3e96defea9fbd8e1.png" alt=""></p>\n<h3>2.2 macOS</h3>\n<h4>2.2.1 安装</h4>\n<ol>\n<li>首先去 <a href="https://www.oracle.com/java/technologies/javase-jdk11-downloads.html">官网下载</a> 对应安装包；</li>\n</ol>\n<p><img src="https://img-blog.csdnimg.cn/img_convert/05375fdb50e8a131d939192b67508871.png" alt=""></p>\n<ol start="2">\n<li>接受相关协议并登录下载；</li>\n</ol>\n<p><img src="https://img-blog.csdnimg.cn/img_convert/c98fde365fa3703b1defc363ab9bb1a6.png" alt=""></p>\n<p><img src="https://img-blog.csdnimg.cn/img_convert/bcd00cd812ef7035ce24a4bb9b8c3082.png" alt=""></p>\n<ol start="3">\n<li>双击下载好的 <code>.dmg</code> 安装包，然后开始安装；</li>\n</ol>\n<p><img src="https://img-blog.csdnimg.cn/img_convert/305a9616bd833106e93cbc7a4cb58e57.png" alt=""></p>\n<ol start="4">\n<li>安装过程中会让你输入密码，也就是你本机的秘密；</li>\n</ol>\n<p><img src="https://img-blog.csdnimg.cn/img_convert/2f86de8bd7cab234fd2f1cc3bbde6660.png" alt=""></p>\n<ol start="5">\n<li>安装成功；</li>\n</ol>\n<p><img src="https://img-blog.csdnimg.cn/img_convert/d021a88d58cd2e14202014fd3766e3ec.png" alt=""></p>\n<h4>2.2.2 验证</h4>\n<p>不同于 Windows，macOS 下不用再去配置了，它会给你自动配置好，我们只需要去验证即可；</p>\n<ol>\n<li>查看 JDK 版本；</li>\n</ol>\n<pre class="code-block"><code class="code hljs bash">java -version<br /></code></pre>\n<p><img src="https://img-blog.csdnimg.cn/img_convert/9ac7a39c9c0706fd11943f1fab98144e.png" alt=""></p>\n<ol start="2">\n<li>编译命令；</li>\n</ol>\n<p><img src="https://img-blog.csdnimg.cn/img_convert/fd382f325012a601e719bb3217bd2be5.png" alt=""></p>\n<ol start="3">\n<li>运行命令；</li>\n</ol>\n<p><img src="https://img-blog.csdnimg.cn/img_convert/ccd1031edf48f255964bfa5ee8d74584.png" alt=""></p>\n<h2>3. 你的第一个 Java程序：HelloWorld</h2>\n<p>好了，经过上面的安装配置，我们就可以开始我们的第一个 Java 程序编写了，我们不需要任何的基础，只需要你按照上面的步骤配置好 JDK，就可以了，下面就来具体实践：</p>\n<ol>\n<li>打开的编辑器（推荐 VS Code），如果没有，记事本也成，然后写入如下内容，然后保存为 <code>Main.java</code>；</li>\n</ol>\n<pre class="code-block"><code class="code hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span></span>{<br />    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>{<br />        System.out.println(&amp;quot;Hello World!&amp;quot;);<br />    }<br />}<br /></code></pre>\n<ol start="2">\n<li>打开控制命令台，然后进入上述文件存放的路径，使用如下命令进行编译，然后会生成一个 <code>Main.class</code> 文件；</li>\n</ol>\n<pre class="code-block"><code class="code hljs bash">javac Main.java<br /></code></pre>\n<p><img src="https://img-blog.csdnimg.cn/img_convert/273c3a587a1de7098a4a3ae1b60eb2e4.png" alt=""></p>\n<p><img src="https://img-blog.csdnimg.cn/img_convert/88d272607c243733168f3cb18a26afee.png" alt=""></p>\n<ol start="3">\n<li>运行，使用如下命令进行运行，然后就可以看到打印出的最终结果了！</li>\n</ol>\n<pre class="code-block"><code class="code hljs bash">java Main<br /></code></pre>\n<p><img src="https://img-blog.csdnimg.cn/img_convert/d4797369ca28be9d523f5977b98d0e3e.png" alt=""></p>\n<h2>4. 知识点说明</h2>\n<p>我们的 Hello World 是打印出来了，但是你肯定对里边的代码很感兴趣，这一节就主要针对我们的 Hello World 程序进行说明；</p>\n<pre class="code-block"><code class="code hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span></span>{<br />    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>{<br />        System.out.println(&amp;quot;Hello World!&amp;quot;);<br />    }<br />}<br /></code></pre>\n<p>完整的程序代码如上：</p>\n<ul>\n<li><code>public</code>：权限修饰符，表示这一个可以公开访问的类，类似的还有 <code>protected、default、private</code>，后续学习过程中再一一介绍；</li>\n<li><code>class</code>：Java 关键字，表示这是一个类；</li>\n<li><code>Main</code>： 表示我们的类名，在保存时文件要和它同名，否则你的程序是编译不了的。你可以试试，如果把我们上面的 <code>Main.java</code> 改成其他名字，你看看是不是还能编译成功呢？</li>\n<li><code>public static void main(String[] args){}</code>：主方法，这是我们以后最常接触到的一个方法，每个主类当中都必须有一个 <code>main</code> 方法；</li>\n<li><code>System.out.println(&amp;quot;Hello World!&amp;quot;)</code>：控制台输出语句，执行该语句会在控制台中输出字符串，字符串要用双引号 <code>&amp;quot;&amp;quot;</code> 括起来，你可以把其中的 <code>Hello Wolrd!</code> 换成你想要打印的内容试试看；</li>\n</ul>\n<h2>5. 总结</h2>\n<p>好了，今天的内容到此就结束了，主要介绍了如何在 Windows 和 macOS 中安装 JDK，以及如何写我们的第一个 <code>Hello World</code> 程序。最后，则是对我们的 <code>Hello World</code> 程序中的相关知识进行了介绍。</p>\n	12	0	2	t	2021-04-22 22:47:23.914	2021-04-23 17:04:37.516901	2	https://cdn.zhoupb.com/image/generate/3725f1fe6e7a4505df42aa84b5b109f9.png	1.前言要进行Java开发，那怎么能少得了JDK呢，那么就首先来教大家如何安装并配置JDK；2.下载并安装JDK2.1Windows2.1.1安装首先进入Oracle官网，然后找到自己想要的JDK版本，这边以JDK11为例；点击JDKDownload后，它会跳转到具体下载页面，然后根据自己的系统来进行选择，此处以Windows1064位为例；点击最后的连接后，它会让你同意协议，勾选同意，然后登陆你的Oracle账户即可开始下载，若是没有Oracle账户，点击下面的创建一个即可；下载完成后，进行安装即可，安装流程和我们平常安装软件的一样，就不再赘述，需要注意的是要记住如下的安装路径，因为一般我们都不会安装到默认路径，所以一定要记住你所安装到的路径，这关系到后续的配置步骤；2.1.2配置JDK好了，经过上面的配置，我们的JDK就已经安装好了，但是这个使用你是用不了的，我们还需要进一步的配置；打开系统属性来进行环境变量配置，打开系统属性并进行配置的方式如下：Windows+R快捷键组合唤醒Windows运行窗口，然后输入sysdm.cpl，紧接着回车即可，一般会打开如下界面，然后点击最上方的高级；点击高级后，就会打开如下界面，然后打开环境变量；3.新建环境变量JAVA_HOME，然后变量值填入刚才安装JDK的路径（刚才提醒过要记住！）；编辑Path环境变量，然后新建一个变量值，填入如下内容：%JAVA_HOME%\\bin；各种确定，然后突出系统属性即可，到这一步，理论上我们的JDK就安装并配置成功了，接下来我们就去确认一下到底安装好了没；2.1.3验证JDK按照上述步骤操作完成之后，接下来就是验证了，一般我们可以通过如下三个命令来进行验证；#查看JDK版本java-version#编译命令javac#运行命令java打开命令控制台（Windows+R，然后输入cmd回车），然后输入如上三个命令，如果安装成功，一般是会出现如下内容的；2.2macOS2.2.1安装首先去官网下载对应安装包；接受相关协议并登录下载；双击下载好的.dmg安装包，然后开始安装；安装过程中会让你输入密码，也就是你本机的秘密；安装成功；2.2.2验证不同于Windows，macOS下不用再去配置了，它会给你自动配置好，我们只需要去验证即可；查看JDK版本；java-version编译命令；运行命令；3.你的第一个Java程序：HelloWorld好了，经过上面的安装配置，我们就可以开始我们的第一个Java程序编写了，我们不需要任何的基础，只需要你按照上面的步骤配置好JDK，就可以了，下面就来具体实践：打开的编辑器（推荐VSCode），如果没有，记事本也成，然后写入如下内容，然后保存为Main.java；publicclassMain{publicstaticvoidmain(String[]args){System.out.println(&amp;quot;HelloWorld!&amp;quot;);}}打开控制命令台，然后进入上述文件存放的路径，使用如下命令进行编译，然后会生成一个Main.class文件；javacMain.java运行，使用如下命令进行运行，然后就可以看到打印出的最终结果了！javaMain4.知识点说明我们的HelloWorld是打印出来了，但是你肯定对里边的代码很感兴趣，这一节就主要针对我们的HelloWorld程序进行说明；publicclassMain{publicstaticvoidmain(String[]args){System.out.println(&amp;quot;HelloWorld!&amp;quot;);}}完整的程序代码如上：public：权限修饰符，表示这一个可以公开访问的类，类似的还有protected、default、private，后续学习过程中再一一介绍；class：Java关键字，表示这是一个类；Main：表示我们的类名，在保存时文件要和它同名，否则你的程序是编译不了的。你可以试试，如果把我们上面的Main.java改成其他名字，你看看是不是还能编译成功呢？publicstaticvoidmain(String[]args){}：主方法，这是我们以后最常接触到的一个方法，每个主类当中都必须有一个main方法；System.out.println(&amp;quot;HelloWorld!&amp;quot;)：控制台输出语句，执行该语句会在控制台中输出字符串，字符串要用双引号&amp;quot;&amp;quot;括起来，你可以把其中的HelloWolrd!换成你想要打印的内容试试看；5.总结好了，今天的内容到此就结束了，主要介绍了如何在Windows和macOS中安装JDK，以及如何写我们的第一个HelloWorld程序。最后，则是对我们的HelloWorld程序中的相关知识进行了介绍。
13	Java容器	{Java}	# 容器\r\n\r\n## 1. 出现原因\r\n\r\n解决程序运行时需要创建新对象，在程序运行前不知道运行的所需的对象数量甚至是类型的问题。\r\n\r\nJava中提供了一套集合类来解决这些问题包括：List、Set、Queue、Map\r\n\r\n## 2. Java容器分类\r\n\r\n- Collection：独立的元素序列，都服从一条或多条的规则\r\n  1. List ：必须按照插入顺序保存元素\r\n  2. Set ： 不能含有重复元素\r\n  3. Queue ：按照排队规则来确定对象的产生顺序\r\n- Map：成对的“键对值”对象，允许使用键来查找值\r\n  1. Map\r\n  2. ArrayList：利用数值来查找值\r\n\r\n## 3.操作容器\r\n\r\n### 3.1添加一组元素\r\n\r\n`Array.asList()`方法：\r\n\r\n该方法接受一个数组或用逗号隔开的元素列表，并转换为一个List对象。\r\n\r\n`Collection.addAll()`方法：\r\n\r\n接受一个Collection对象，可以使用`Array.asList()`产生Collection对象。\r\n\r\n`Collecions.addAll()`方法：\r\n\r\n接受一个Collection对象，以及数组或者逗号隔开的元素列表，并将元素添加到Collection对象中。\r\n\r\n`Collection()`构造器方法：\r\n\r\nCollection构造器方法接受一个Collection对象用于自身初始化。\r\n\r\n```java\r\npublic class TestAddObj {\r\n    public static void main(String[] args) {\r\n        Collection&lt;Integer&gt; collection = new ArrayList&lt;&gt;(Arrays.asList(1,2,3,4,8));// 构造器添加元素\r\n        Integer[] moreInts = {7,5,6};\r\n        collection.addAll(Arrays.asList(moreInts)); //Collection对象addAll()方法添加元素\r\n\r\n        Collections.addAll(collection,9,10,11,12);//Collections类addAll方法添加元素\r\n        Collections.addAll(collection,moreInts);//以Collection对象添加元素\r\n\r\n        for (int i: collection) {\r\n            System.out.print(i+&quot;\\t&quot;);//打印元素\r\n        }\r\n\r\n        List&lt;Integer&gt; list =  Arrays.asList(1,2,3,6); //直接使用Array.asList方法添加\r\n//        list.add(3); // 报错，使用该方法产生的List本质上数组，不能修改大小，即不能适应add方法添加元素或delete方法删除元素\r\n        list.set(2,10);\r\n\r\n        System.out.println();\r\n        for (int i: list) {\r\n            System.out.print(i+&quot;\\t&quot;);\r\n        }\r\n    } \r\n}\r\n```\r\n\r\n### 3.2 打印\r\n\r\n使用打印默认的打印行为(容器提供的`toString`()方法\r\n\r\n```java\r\npublic class TestPrintContainers {\r\n    public static void main(String[] args) {\r\n        System.out.println(fill(new ArrayList&lt;&gt;()));\r\n        System.out.println(fill(new LinkedList&lt;&gt;()));\r\n        System.out.println(fill(new HashSet&lt;&gt;()));\r\n        System.out.println(fill(new TreeSet&lt;&gt;()));\r\n        System.out.println(fill(new LinkedHashSet&lt;&gt;()));\r\n        System.out.println(fill(new TreeMap&lt;&gt;()));\r\n        System.out.println(fill(new HashMap&lt;&gt;()));\r\n        System.out.println(fill(new LinkedHashMap&lt;&gt;()));\r\n\r\n    }\r\n    static Collection&lt;String&gt; fill(Collection&lt;String&gt; collection){\r\n        collection.addAll(Arrays.asList(&quot;rat&quot;,&quot;cat&quot;,&quot;dog&quot;));//使用Collection对象作为参数添加一组元素\r\n        return collection;\r\n    }\r\n    static Map&lt;String,String&gt; fill(Map&lt;String,String&gt; map){\r\n        map.put(&quot;rat&quot;,&quot;Fuzzy&quot;);\r\n        map.put(&quot;cat&quot;,&quot;Rags&quot;);//put&lt;key,value&gt;添加键值 get(key)获取键的值\r\n        map.put(&quot;dog&quot;,&quot;Bosco&quot;);\r\n        map.put(&quot;dog&quot;,&quot;Spot&quot;);\r\n        return map;\r\n    }\r\n}\r\n```\r\n\r\n## 4. List\r\n\r\nList接口在Collection接口的基础上添加了大量的方法，使得可以在List中间插入和移除元素\r\n\r\nList接口的实现类\r\n\r\n- `ArrayList`\r\n\r\n  长于随机访问元素，在其中插入和移除元素时较慢\r\n\r\n- `LinkedList`\r\n\r\n  随机访问较慢，可以较低代价的在List中间插入和移除元素\r\n\r\n```java\r\npublic class testList {\r\n    public static void main(String[] args) {\r\n        Random rand = new Random(100);\r\n        ArrayList&lt;Pet&gt; pets = Pets.namePets(7);// 产生pets\r\n\r\n        System.out.println(&quot;1: &quot;+pets);\r\n        Pet lola = new Pet(&quot;lola&quot;);\r\n\r\n        pets.add(lola);//add(obj) 列表最后插入obj\r\n        System.out.println(&quot;2: &quot;+pets);\r\n        System.out.println(&quot;3: &quot;+pets.contains(lola));// contains()判断是否包含\r\n        pets.remove(lola); //remove(obj)删除列表中的对obj象\r\n        Pet p = pets.get(2); //get(Index)获取索引位置对象\r\n        System.out.println(&quot;4: &quot;+p+&quot; &quot;+pets.indexOf(p));//indexOf(obj)获取obj对象的位置\r\n        Pet milo = new Pet(&quot;Milo&quot;);\r\n        pets.add(milo);\r\n        System.out.println(&quot;5: &quot;+ pets.indexOf(milo));\r\n        System.out.println(&quot;6: &quot;+ pets.remove(milo));\r\n\r\n        System.out.println(&quot;7: &quot;+pets.remove(p));\r\n        System.out.println(&quot;8: &quot;+pets);\r\n\r\n        pets.add(3,new Pet(&quot;Jack&quot;));//add(index,obj)将obj插入到index位置\r\n        System.out.println(&quot;9: &quot;+pets);\r\n\r\n        List&lt;Pet&gt; sub = pets.subList(1,4);//sub(start,end)获取[start,end)列表片段\r\n        System.out.println(&quot;10: sub list [1,4) &quot;+sub);\r\n        System.out.println(&quot;11: &quot;+ pets.containsAll(sub));//containsAll(listObj)判断是否包含listObj的全部对象(忽略顺序)\r\n        Collections.sort(sub);//Collections.sort(list)对列表list进行排序(需要list包含的对象实现泛型接口Comparable&lt;&gt;)\r\n        System.out.println(&quot;12: sorted sub &quot;+ sub);\r\n        System.out.println(&quot;13: &quot;+ pets.containsAll(sub));\r\n        Collections.shuffle(sub,rand);//Collections.shuffle(list,rand)将list按rand规则打乱\r\n        System.out.println(&quot;14: shuffle sublist &quot;+sub);\r\n        System.out.println(&quot;15: &quot;+pets.containsAll(sub));\r\n\r\n        List&lt;Pet&gt; copy = new ArrayList&lt;&gt;(pets);\r\n        sub = Arrays.asList(pets.get(1),pets.get(4));//获取pets的第一个和第4个对象，返回一个列表，传入sub\r\n        System.out.println(&quot;16: sub: &quot;+sub);\r\n        copy.retainAll(sub);//retainAll(list)与list所有元素取交集\r\n        System.out.println(&quot;17: &quot;+copy);\r\n\r\n        copy = new ArrayList&lt;&gt;(pets);//构造器传参，初始化list\r\n        System.out.println(copy);\r\n        copy.remove(2);//remove(index)移除index位置对象\r\n        System.out.println(&quot;18: &quot;+copy);\r\n        copy.removeAll(sub);//removeAll(list)与list取差集，移除list中包含的元素\r\n        System.out.println(&quot;19: &quot;+copy);\r\n\r\n\r\n        copy.set(1,new Pet(&quot;Toby&quot;));//set(index,obj)将index位置元素替换成obj\r\n        System.out.println(&quot;20: &quot;+copy);\r\n\r\n        copy.addAll(2,sub);//add(index,list)将list所有元素插入到index位置\r\n        System.out.println(&quot;21: &quot;+copy);\r\n        System.out.println(&quot;22: &quot;+copy.isEmpty());//isEmpty()判断是否非空\r\n        copy.clear();//clear()移除所有元素\r\n        System.out.println(&quot;23: &quot;+ copy.isEmpty());\r\n\r\n        pets.addAll(Pets.namePets(4));\r\n        System.out.println(&quot;24: &quot;+pets);\r\n        Object[] o = pets.toArray();//toArray()转为数组\r\n        System.out.println(&quot;25: &quot;+ o[3]);\r\n        Pet[] pas = pets.toArray(new Pet[0]);//toArray(T[])T[]为数组设置初始值\r\n        System.out.println(&quot;26: &quot;+ pas[3].name);\r\n\r\n    }\r\n}\r\n    class Pets{\r\n        static ArrayList&lt;Pet&gt; namePets(int i){ //返回含有将i个Pet对象的列表\r\n            String[] names = new String[]{&quot;Charlie&quot;,&quot;Max&quot;, &quot;Buddy&quot;,&quot;Oscar&quot;,\r\n                    &quot;Milo&quot;,&quot;Bella&quot;,&quot;Molly&quot;,&quot; Coco&quot; ,&quot;Ruby&quot; ,&quot;Lucy&quot;};\r\n            Random random = new Random();\r\n            ArrayList&lt;Pet&gt; pets = new ArrayList&lt;&gt;();\r\n            for (int j = 0; j &lt; i; j++) {\r\n                pets.add(new Pet(names[j]));\r\n            }\r\n            return pets;\r\n        }\r\n\r\n    }\r\n    class Pet implements Comparable&lt;Pet&gt;{//继承泛型实现sort方法\r\n        public Pet(String name) {\r\n            this.name = name;\r\n        }\r\n        String name;\r\n\r\n        @Override\r\n        public String toString() {//重写toString方法实现打印\r\n            return this.name;\r\n        }\r\n\r\n        @Override\r\n        public int compareTo(Pet anotherPet) {//实现Comparable接口\r\n                return this.name.compareTo(anotherPet.name);\r\n        }\r\n    }\r\n```\r\n\r\n ## 5.迭代器\r\n\r\n迭代器是一个用于遍历并选择一个容器中元素的对象，而不必关心容器中的元素的底层结构。\r\n\r\nJava中使用`Iterator`来表示迭代器对象\r\n\r\n- 使用`iterator`方法要求容器返回一个迭代器。Iterator将准备好返回序列的第一个元素\r\n- `next()`方法返回序列的下一个元素\r\n- `hasNext()`检查是否还有下一个元素\r\n- `remove()`移除序列最新返回的元素\r\n\r\n```java\r\npublic class TestIterator {\r\n    public static void main(String[] args) {\r\n        ArrayList&lt;Pet&gt; pets = Pets.namePets(9);\r\n        System.out.println(pets);\r\n        Iterator&lt;Pet&gt; petIterator = pets.iterator();//use method list.iterator() to create\r\n        while (petIterator.hasNext()){//判断\r\n            Pet p = petIterator.next();//返回下一个元素\r\n            System.out.print(p+&quot;\\t&quot;);\r\n        }\r\n        System.out.println();\r\n        for (Pet p: pets) {  //通过Iterator实现的forEach循环遍历 本质上还是是Iterator\r\n            System.out.print(p+&quot;\\t&quot;);\r\n        }\r\n\r\n        petIterator = pets.iterator();\r\n        for (int i = 0; i &lt; 4; i++) {\r\n            petIterator.next();//返回下一个元素（头部开始）\r\n            petIterator.remove();//移除next()方法返回的元素，使用该方法必须先使用next()方法\r\n        }\r\n        System.out.println();\r\n        System.out.println(pets);\r\n    }\r\n\r\n}\r\n```\r\n\r\n使用迭代器时，不必关心序列底层结构，统一了对容器的访问方式\r\n\r\n```java\r\npublic class TestIterator1 {\r\n    public static void displayContainer(Iterator&lt;Pet&gt; petIterator){\r\n        while (petIterator.hasNext()){\r\n            Pet p = petIterator.next();\r\n            System.out.print(p+&quot;\\t&quot;);\r\n        }\r\n        System.out.println();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        ArrayList&lt;Pet&gt; pets= Pets.namePets(6);\r\n        LinkedList&lt;Pet&gt; petsLL = new LinkedList&lt;&gt;(pets);\r\n        HashSet&lt;Pet&gt; petsHS = new HashSet&lt;&gt;(pets);\r\n        TreeSet&lt;Pet&gt; petsTS = new TreeSet&lt;&gt;(pets); \r\n        displayContainer(pets.iterator());\r\n        displayContainer(petsLL.iterator()); //迭代器能够访问不同的容器\r\n        displayContainer(petsHS.iterator());\r\n        displayContainer(petsTS.iterator());\r\n    }\r\n}\r\n\r\n```\r\n\r\nList类的专用迭代器`ListIterator`\r\n\r\n`ListIterator`添加了`previous`方法和`hasPrevious`方法实现了对前一个元素的访问以及存在性判断；\r\n\r\n添加了`set`方法替换访问过的最后一个元素\r\n\r\n```java\r\npublic class TestListIterator {\r\n\r\n\r\n    public static void main(String[] args) {\r\n        List&lt;Pet&gt;pets = Pets.namePets(7);\r\n        ListIterator&lt;Pet&gt; petListIterator = pets.listIterator();\r\n        while (petListIterator.hasNext()){\r\n            System.out.print(petListIterator.next()+&quot;\\t&quot;);\r\n        }\r\n        System.out.println();\r\n        while (petListIterator.hasPrevious()){\r\n            System.out.print(petListIterator.previous()+&quot;\\t&quot;);//前移动访问\r\n        }\r\n        System.out.println();\r\n        petListIterator.next();\r\n        petListIterator.set(new Pet(&quot;Scout&quot;));//将第一个元素替换\r\n        System.out.println(pets);\r\n    }\r\n}\r\n```\r\n\r\n## 6. LinkedList\r\n\r\n`LinkedList`与`ArrayList`一样实现了基本的List接口,它在中间插入更加高效，在随机访问上要慢一些\r\n\r\n`LinkedList`还添加了作为栈、队列双端队列的方法\r\n\r\n```java\r\npublic class TestLinkedList {\r\n    public static void main(String[] args) {\r\n        LinkedList&lt;Pet&gt; pets = new LinkedList&lt;&gt;(Pets.namePets(8));\r\n        System.out.println(pets);\r\n        //获取头部元素，前面二者完全相同，当为空时抛出NoSuchElementException，peek()方法返回null\r\n        System.out.println(&quot;pets.getFirst(): &quot;+pets.getFirst());\r\n        System.out.println(&quot;pets.element(): &quot;+pets.element());\r\n        System.out.println(&quot;pets.peek(): &quot;+pets.peek());\r\n        //移除头部元素,前面二者完全相同，当为空时抛出NoSuchElementException，poll()方法返回null\r\n        System.out.println(&quot;pets.remove(): &quot;+pets.remove());\r\n        System.out.println(&quot;pets.removeFirst(): &quot;+pets.removeFirst());\r\n        System.out.println(&quot;pets.poll(): &quot;+pets.poll());\r\n        //头部插入\r\n        pets.addFirst(new Pet(&quot;Ollie&quot;));\r\n        System.out.println(&quot;After addFirst: &quot;+pets);\r\n        //尾部插入\r\n        pets.offer(Pets.randomPet());\r\n        System.out.println(&quot;After offer: &quot;+pets);\r\n        pets.add(Pets.randomPet());\r\n        System.out.println(&quot;After add: &quot;+pets);\r\n        pets.addLast(Pets.randomPet());\r\n        System.out.println(&quot;after addLast: &quot;+pets);\r\n        //移除尾部元素\r\n        System.out.println(&quot;pets.removeLast(): &quot;+pets.removeLast());\r\n        \r\n    }\r\n\r\n}\r\n```\r\n\r\n## 7.Stack\r\n\r\n栈通常是指“后进先出的容器”\r\n\r\n`LinckedList`具有实现栈的全部功能的方法，因此可用`LinkedLis`t实现栈\r\n\r\n但是如果只需要栈的行为，使用继承`LinkedList`的栈就不合适，因为会继承`LinkedList`的其他方法\r\n\r\nStack&lt;T&gt;通常有这几类方法\r\n\r\n- `push()`:接受T类型的对象，将其压入栈中\r\n- `pop()`:移除栈顶元素并返回\r\n- `peek()`:返回栈顶元素，但部移除\r\n\r\n```java\r\npublic class TestStack {\r\n    public static void main(String[] args) {\r\n        Stack&lt;String&gt; stringStack = new Stack&lt;&gt;();\r\n        for (String s: &quot;My dog has fleas&quot;.split(&quot; &quot;)) {\r\n            stringStack.push(s);//入栈\r\n        }\r\n        System.out.println(stringStack);\r\n        while (!stringStack.empty()){//empty()方法判断栈是否为空\r\n            System.out.print(stringStack.pop()+&quot;\\t&quot;);//出栈\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n练习：将字母压入栈“+”压入，“-” 取出打印\r\n\r\n```\r\n&quot;+U+n+c---+e+r+t---+a-+i-+n+t+y---+-+r+u--+l+e+s&quot;\r\n```\r\n\r\n```java\r\npublic class TestStack01 {\r\n    public static void main(String[] args) {\r\n\r\n        char[] s = &quot;+U+n+c---+e+r+t---+a-+i-+n+t+y---+-+r+u--+l+e+s&quot;.toCharArray();\r\n        charStack(s);\r\n\r\n    }\r\n    public static Stack&lt;Character&gt; charStack ( char[] s){\r\n        Stack&lt;Character&gt; characterStack = new Stack&lt;&gt;();\r\n        for (int i = 0; i &lt; s.length; i++) {\r\n            System.out.println(characterStack);\r\n            if (s[i] == &#39;+&#39;) {//当遍历到字符数组为加号时，遍历后面元素，检测到非符号时压入栈中\r\n                for (int j = i; j &lt; s.length; j++) { \r\n                    if (!(s[j] == &#39;+&#39; || s[j] == &#39;-&#39;)) {\r\n                        characterStack.push(s[j]);\r\n                        break;\r\n                    }\r\n                }\r\n            } else if (s[i] == &#39;-&#39;) {//检测到&#39;-&#39;弹出元素\r\n                characterStack.pop();\r\n            }\r\n        }\r\n            return characterStack;\r\n    }\r\n}\r\n```\r\n\r\n## 8. Set\r\n\r\nSet不能保存相同元素，将多个相同实例添加到Set时，就会阻止这种重复现象\r\n\r\nSet具有与Collection完全一样的接口，Set实际上就是Collection只是行为不同\r\n\r\n```java\r\npublic class TestSet {\r\n    public static void main(String[] args) {\r\n        Random random = new Random(47);\r\n        Set&lt;Integer&gt; set = new HashSet&lt;&gt;();\r\n        for (int i = 0; i &lt; 10000; i++) {\r\n            set.add(random.nextInt(30));\r\n\r\n        }\r\n        System.out.println(set);//HashSet输出无序\r\n    }\r\n}\r\n```\r\n\r\n```java\r\npublic class TestTreeSet {\r\n    public static void main(String[] args) {\r\n        Set&lt;Integer&gt; set = new TreeSet&lt;&gt;();\r\n        Random rand = new Random(47);\r\n        for (int i = 0; i &lt; 1000; i++) {\r\n            set.add(rand.nextInt(30));\r\n        }\r\n        System.out.println(set);//TreeSet输出有序\r\n    }\r\n}\r\n```\r\n\r\n`Set`操作。 \r\n\r\n```java\r\npublic class SetOperations {\r\n    public static void main(String[] args) {\r\n        HashSet&lt;String&gt; s1 = new HashSet&lt;&gt;();\r\n        Collections.addAll(s1,&quot;A B C D E F G H I J K L&quot;.split(&quot; &quot;));\r\n        s1.add(&quot;M&quot;);\r\n        System.out.println(&quot;Set1 contain H &quot;+s1.contains(&quot;H&quot;));\r\n        System.out.println(&quot;Set1 contain N &quot;+s1.contains(&quot;N&quot;));\r\n        HashSet&lt;String&gt; s2 = new HashSet&lt;&gt;();\r\n        Collections.addAll(s2,&quot;H I J K L&quot;.split(&quot; &quot;));\r\n        System.out.println(&quot;set2 in set1 &quot;+s1.containsAll(s2));\r\n        s1.remove(&quot;H&quot;);\r\n        System.out.println(&quot;Set1: &quot;+s1);\r\n        System.out.println(&quot;Set2: &quot;+s2);\r\n        System.out.println(&quot;set2 in set1 &quot;+s1.containsAll(s2));\r\n        s1.removeAll(s2);\r\n        System.out.println(&quot;set2 removed from set1 &quot;+ s1);\r\n    }\r\n}\r\n```\r\n\r\n## 9. Map\r\n\r\n- Map不是collection的子接口或者实现类。Map是一个接口。\r\n\r\n- Map用于保存具有“映射关系”的数据。每个Entry都持有键-值两个对象。其中，Value可能重复，但是Key不允许重复（和Set类似）。\r\n\r\n- Map可以有多个Value为null，但是只能有一个Key为null。\r\n  \r\n\r\n实现类\r\n\r\n##### HashMap\r\n\r\n和HashSet集合不能保证元素的顺序一样，HashMap也不能保证key-value对的顺序。并且类似于HashSet判断两个key是否相等的标准一样: 两个key通过**equals**()方法比较返回true、 同时**两个key的hashCode值也必须相等**\r\n\r\n&lt;h5&gt;LinkedHashMap&lt;/h5&gt;\r\n\r\nLinkedHashMap也使用**双向链表**来维护key-value对的次序，该链表负责维护Map的迭代顺序，与key-value对的插入顺序一致(注意和TreeMap对所有的key-value进行排序区分）\r\n\r\n&lt;h5&gt; Properties&lt;/h5&gt;\r\n\r\nProperties对象在处理**属性文件**时特别方便（windows平台的.ini文件）。Properties类可以把**Map对象和属性文件**关联，从而把Map对象的key - value对写入到属性文件中，也可把属性文件中的“属性名-属性值”加载进Map对象中。\r\n\r\n##### TreeMap\r\n\r\nTreeMap是一个红黑树结构，每个键值对都作为红黑树的一个节点。TreeMap存储键值对时，需要根据key对节点进行排序，TreeMap可以保证所有的key-value对处于有序状态。 同时，TreeMap也有两种排序方式：自然排序、\r\n\r\n```java\r\npublic class TestMap {\r\n    public static void main(String[] args) {\r\n        Map&lt;String,Pet&gt; petMap = new HashMap&lt;&gt;();\r\n        petMap.put(&quot;MyCat&quot;,new Pet(&quot;Molly&quot;));\r\n        petMap.put(&quot;MyDog&quot;,new Pet(&quot;Ginger&quot;));\r\n        System.out.println(petMap);\r\n        Pet dog = petMap.get(&quot;MyDog&quot;);\r\n        System.out.println(dog);\r\n        System.out.println(petMap.containsKey(&quot;MyDog&quot;));\r\n        System.out.println(petMap.containsValue(dog));\r\n\r\n        System.out.println(petMap.entrySet());//entrySet() 方法返回映射中包含的映射的 Set 视图\r\n        System.out.println(petMap.values() instanceof Collection);// 获取值返回一个Collection\r\n\r\n        ArrayList&lt;String&gt; arrayList = new ArrayList&lt;&gt;();\r\n        System.out.println(Arrays.asList(1,2,3) instanceof List);\r\n    }\r\n}\r\n```\r\n\r\n## 10. Queue \r\n\r\n此接口用于模拟“队列”数据结构（FIFO）。新插入的元素放在队尾，队头存放着保存时间最长的元素\r\n\r\nQueue接口与Collections接口中的方法是独立的\r\n\r\n实现类\r\n\r\nPriorityQueue—— 优先队列（类）\r\n\r\n  其实它并没有按照插入的顺序来存放元素，而是**按照队列中某个属性的大小**来排列的。故而叫优先队列。\r\n\r\nDeque——双端队列（接口）\r\n\r\n- ArrayDeque\r\n  基于数组的双端队列，类似于ArrayList有一个Object[] 数组。\r\n\r\n- LinkedList\r\n\r\n**LinkedList**\r\n\r\n```java\r\npublic class TestLinkedListQueue {\r\n    public static void printQ(Queue q){\r\n        while (q.peek()!=null){//peak()方法返回头部元素\r\n            System.out.print(q.peek()+&quot;\\t&quot;);//remove()方法移除并返回头部元素\r\n            q.remove();\r\n        }\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        Queue&lt;Integer&gt; queue = new LinkedList&lt;&gt;();\r\n        Random random = new Random();\r\n        for (int i = 0; i &lt; 10; i++) {\r\n            queue.offer(random.nextInt(i+10)); //offer()方法入队\r\n        }\r\n        printQ(queue);\r\n        System.out.println();\r\n        Queue&lt;Character&gt; characters = new LinkedList&lt;&gt;();\r\n        for (char c:&quot;FuckYOU!!!!&quot;.toCharArray()){\r\n            characters.offer(c);\r\n        }\r\n        printQ(characters);\r\n    }\r\n}\r\n```\r\n\r\n**PriorityQueue**\r\n\r\n   优先队列会根据元素的优先级对每个插入的元素进行排序，弹出的每个元素为此时优先级最高的元素\r\n\r\n   优先队列的排序方式为默认排序方式，也可以提供Comparator来修改排序\r\n\r\n   ```java\r\n   //优先队列2参数构造器，容量+比较方法\r\n   public PriorityQueue(int initialCapacity,\r\n                        Comparator&lt;? super E&gt; comparator) {\r\n       // Note: This restriction of at least one is not actually needed,\r\n       // but continues for 1.5 compatibility\r\n       if (initialCapacity &lt; 1)\r\n           throw new IllegalArgumentException();\r\n       this.queue = new Object[initialCapacity];\r\n       this.comparator = comparator;\r\n   }\r\n   ```\r\n\r\n   ```java\r\n   public class TestPriorityQueue {\r\n       public static void main(String[] args) {\r\n           PriorityQueue&lt;Integer&gt; priorityQueue = new PriorityQueue&lt;&gt;();\r\n           Random rand = new Random();\r\n           for (int i = 0; i &lt; 10; i++) {\r\n               priorityQueue.offer(rand.nextInt(i+10));\r\n           }\r\n           TestLinkedListQueue.printQ(priorityQueue);\r\n           List&lt;Integer&gt; integerList = Arrays.asList(99,2,22,100,2,7,33,1276);\r\n           PriorityQueue&lt;Integer&gt; priorityQueue1 = new PriorityQueue&lt;&gt;(integerList);\r\n           TestLinkedListQueue.printQ(priorityQueue1);\r\n   \r\n           priorityQueue1 = new PriorityQueue&lt;&gt;(integerList.size(), Collections.reverseOrder());//自定义优先级\r\n           priorityQueue1.addAll(integerList);\r\n           TestLinkedListQueue.printQ(priorityQueue1);\r\n   \r\n           String fact = &quot;SB ZHI YUAN ZHE HUO DONG LANG FEI YE DE SHI JIAN&quot;;\r\n           List&lt;String&gt; strings = Arrays.asList(fact.split(&quot;&quot;));\r\n           PriorityQueue&lt;String&gt; priorityQueue2 = new PriorityQueue&lt;String&gt;(strings);\r\n           int pq2Size = priorityQueue2.size();\r\n           TestLinkedListQueue.printQ(priorityQueue2);\r\n           System.out.println(pq2Size);\r\n   \r\n           PriorityQueue&lt;String&gt; priorityQueue3 = new PriorityQueue&lt;&gt;(pq2Size,Collections.reverseOrder());\r\n           priorityQueue3.addAll(strings);\r\n           TestLinkedListQueue.printQ(priorityQueue3);\r\n           \r\n       }\r\n   }\r\n   ```	<h1>容器</h1>\n<h2>1. 出现原因</h2>\n<p>解决程序运行时需要创建新对象，在程序运行前不知道运行的所需的对象数量甚至是类型的问题。</p>\n<p>Java中提供了一套集合类来解决这些问题包括：List、Set、Queue、Map</p>\n<h2>2. Java容器分类</h2>\n<ul>\n<li>Collection：独立的元素序列，都服从一条或多条的规则\n<ol>\n<li>List ：必须按照插入顺序保存元素</li>\n<li>Set ： 不能含有重复元素</li>\n<li>Queue ：按照排队规则来确定对象的产生顺序</li>\n</ol>\n</li>\n<li>Map：成对的“键对值”对象，允许使用键来查找值\n<ol>\n<li>Map</li>\n<li>ArrayList：利用数值来查找值</li>\n</ol>\n</li>\n</ul>\n<h2>3.操作容器</h2>\n<h3>3.1添加一组元素</h3>\n<p><code>Array.asList()</code>方法：</p>\n<p>该方法接受一个数组或用逗号隔开的元素列表，并转换为一个List对象。</p>\n<p><code>Collection.addAll()</code>方法：</p>\n<p>接受一个Collection对象，可以使用<code>Array.asList()</code>产生Collection对象。</p>\n<p><code>Collecions.addAll()</code>方法：</p>\n<p>接受一个Collection对象，以及数组或者逗号隔开的元素列表，并将元素添加到Collection对象中。</p>\n<p><code>Collection()</code>构造器方法：</p>\n<p>Collection构造器方法接受一个Collection对象用于自身初始化。</p>\n<pre class="code-block"><code class="code hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestAddObj</span> </span>{<br />    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br />        Collection&amp;lt;Integer&amp;gt; collection = <span class="hljs-keyword">new</span> ArrayList&amp;lt;&amp;gt;(Arrays.asList(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">8</span>));<span class="hljs-comment">// 构造器添加元素</span><br />        Integer[] moreInts = {<span class="hljs-number">7</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>};<br />        collection.addAll(Arrays.asList(moreInts)); <span class="hljs-comment">//Collection对象addAll()方法添加元素</span><br /><br />        Collections.addAll(collection,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>,<span class="hljs-number">11</span>,<span class="hljs-number">12</span>);<span class="hljs-comment">//Collections类addAll方法添加元素</span><br />        Collections.addAll(collection,moreInts);<span class="hljs-comment">//以Collection对象添加元素</span><br /><br />        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i: collection) {<br />            System.out.print(i+&amp;quot;\\t&amp;quot;);<span class="hljs-comment">//打印元素</span><br />        }<br /><br />        List&amp;lt;Integer&amp;gt; list =  Arrays.asList(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">6</span>); <span class="hljs-comment">//直接使用Array.asList方法添加</span><br /><span class="hljs-comment">//        list.add(3); // 报错，使用该方法产生的List本质上数组，不能修改大小，即不能适应add方法添加元素或delete方法删除元素</span><br />        list.set(<span class="hljs-number">2</span>,<span class="hljs-number">10</span>);<br /><br />        System.out.println();<br />        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i: list) {<br />            System.out.print(i+&amp;quot;\\t&amp;quot;);<br />        }<br />    } <br />}<br /></code></pre>\n<h3>3.2 打印</h3>\n<p>使用打印默认的打印行为(容器提供的<code>toString</code>()方法</p>\n<pre class="code-block"><code class="code hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestPrintContainers</span> </span>{<br />    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br />        System.out.println(fill(<span class="hljs-keyword">new</span> ArrayList&amp;lt;&amp;gt;()));<br />        System.out.println(fill(<span class="hljs-keyword">new</span> LinkedList&amp;lt;&amp;gt;()));<br />        System.out.println(fill(<span class="hljs-keyword">new</span> HashSet&amp;lt;&amp;gt;()));<br />        System.out.println(fill(<span class="hljs-keyword">new</span> TreeSet&amp;lt;&amp;gt;()));<br />        System.out.println(fill(<span class="hljs-keyword">new</span> LinkedHashSet&amp;lt;&amp;gt;()));<br />        System.out.println(fill(<span class="hljs-keyword">new</span> TreeMap&amp;lt;&amp;gt;()));<br />        System.out.println(fill(<span class="hljs-keyword">new</span> HashMap&amp;lt;&amp;gt;()));<br />        System.out.println(fill(<span class="hljs-keyword">new</span> LinkedHashMap&amp;lt;&amp;gt;()));<br /><br />    }<br />    <span class="hljs-keyword">static</span> Collection&amp;lt;String&amp;gt; fill(Collection&amp;lt;String&amp;gt; collection){<br />        collection.addAll(Arrays.asList(&amp;quot;rat&amp;quot;,&amp;quot;cat&amp;quot;,&amp;quot;dog&amp;quot;));<span class="hljs-comment">//使用Collection对象作为参数添加一组元素</span><br />        <span class="hljs-keyword">return</span> collection;<br />    }<br />    <span class="hljs-keyword">static</span> Map&amp;lt;String,String&amp;gt; fill(Map&amp;lt;String,String&amp;gt; map){<br />        map.put(&amp;quot;rat&amp;quot;,&amp;quot;Fuzzy&amp;quot;);<br />        map.put(&amp;quot;cat&amp;quot;,&amp;quot;Rags&amp;quot;);<span class="hljs-comment">//put&amp;lt;key,value&amp;gt;添加键值 get(key)获取键的值</span><br />        map.put(&amp;quot;dog&amp;quot;,&amp;quot;Bosco&amp;quot;);<br />        map.put(&amp;quot;dog&amp;quot;,&amp;quot;Spot&amp;quot;);<br />        <span class="hljs-keyword">return</span> map;<br />    }<br />}<br /></code></pre>\n<h2>4. List</h2>\n<p>List接口在Collection接口的基础上添加了大量的方法，使得可以在List中间插入和移除元素</p>\n<p>List接口的实现类</p>\n<ul>\n<li>\n<p><code>ArrayList</code></p>\n<p>长于随机访问元素，在其中插入和移除元素时较慢</p>\n</li>\n<li>\n<p><code>LinkedList</code></p>\n<p>随机访问较慢，可以较低代价的在List中间插入和移除元素</p>\n</li>\n</ul>\n<pre class="code-block"><code class="code hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">testList</span> </span>{<br />    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br />        Random rand = <span class="hljs-keyword">new</span> Random(<span class="hljs-number">100</span>);<br />        ArrayList&amp;lt;Pet&amp;gt; pets = Pets.namePets(<span class="hljs-number">7</span>);<span class="hljs-comment">// 产生pets</span><br /><br />        System.out.println(&amp;quot;<span class="hljs-number">1</span>: &amp;quot;+pets);<br />        Pet lola = <span class="hljs-keyword">new</span> Pet(&amp;quot;lola&amp;quot;);<br /><br />        pets.add(lola);<span class="hljs-comment">//add(obj) 列表最后插入obj</span><br />        System.out.println(&amp;quot;<span class="hljs-number">2</span>: &amp;quot;+pets);<br />        System.out.println(&amp;quot;<span class="hljs-number">3</span>: &amp;quot;+pets.contains(lola));<span class="hljs-comment">// contains()判断是否包含</span><br />        pets.remove(lola); <span class="hljs-comment">//remove(obj)删除列表中的对obj象</span><br />        Pet p = pets.get(<span class="hljs-number">2</span>); <span class="hljs-comment">//get(Index)获取索引位置对象</span><br />        System.out.println(&amp;quot;<span class="hljs-number">4</span>: &amp;quot;+p+&amp;quot; &amp;quot;+pets.indexOf(p));<span class="hljs-comment">//indexOf(obj)获取obj对象的位置</span><br />        Pet milo = <span class="hljs-keyword">new</span> Pet(&amp;quot;Milo&amp;quot;);<br />        pets.add(milo);<br />        System.out.println(&amp;quot;<span class="hljs-number">5</span>: &amp;quot;+ pets.indexOf(milo));<br />        System.out.println(&amp;quot;<span class="hljs-number">6</span>: &amp;quot;+ pets.remove(milo));<br /><br />        System.out.println(&amp;quot;<span class="hljs-number">7</span>: &amp;quot;+pets.remove(p));<br />        System.out.println(&amp;quot;<span class="hljs-number">8</span>: &amp;quot;+pets);<br /><br />        pets.add(<span class="hljs-number">3</span>,<span class="hljs-keyword">new</span> Pet(&amp;quot;Jack&amp;quot;));<span class="hljs-comment">//add(index,obj)将obj插入到index位置</span><br />        System.out.println(&amp;quot;<span class="hljs-number">9</span>: &amp;quot;+pets);<br /><br />        List&amp;lt;Pet&amp;gt; sub = pets.subList(<span class="hljs-number">1</span>,<span class="hljs-number">4</span>);<span class="hljs-comment">//sub(start,end)获取[start,end)列表片段</span><br />        System.out.println(&amp;quot;<span class="hljs-number">10</span>: sub list [<span class="hljs-number">1</span>,<span class="hljs-number">4</span>) &amp;quot;+sub);<br />        System.out.println(&amp;quot;<span class="hljs-number">11</span>: &amp;quot;+ pets.containsAll(sub));<span class="hljs-comment">//containsAll(listObj)判断是否包含listObj的全部对象(忽略顺序)</span><br />        Collections.sort(sub);<span class="hljs-comment">//Collections.sort(list)对列表list进行排序(需要list包含的对象实现泛型接口Comparable&amp;lt;&amp;gt;)</span><br />        System.out.println(&amp;quot;<span class="hljs-number">12</span>: sorted sub &amp;quot;+ sub);<br />        System.out.println(&amp;quot;<span class="hljs-number">13</span>: &amp;quot;+ pets.containsAll(sub));<br />        Collections.shuffle(sub,rand);<span class="hljs-comment">//Collections.shuffle(list,rand)将list按rand规则打乱</span><br />        System.out.println(&amp;quot;<span class="hljs-number">14</span>: shuffle sublist &amp;quot;+sub);<br />        System.out.println(&amp;quot;<span class="hljs-number">15</span>: &amp;quot;+pets.containsAll(sub));<br /><br />        List&amp;lt;Pet&amp;gt; copy = <span class="hljs-keyword">new</span> ArrayList&amp;lt;&amp;gt;(pets);<br />        sub = Arrays.asList(pets.get(<span class="hljs-number">1</span>),pets.get(<span class="hljs-number">4</span>));<span class="hljs-comment">//获取pets的第一个和第4个对象，返回一个列表，传入sub</span><br />        System.out.println(&amp;quot;<span class="hljs-number">16</span>: sub: &amp;quot;+sub);<br />        copy.retainAll(sub);<span class="hljs-comment">//retainAll(list)与list所有元素取交集</span><br />        System.out.println(&amp;quot;<span class="hljs-number">17</span>: &amp;quot;+copy);<br /><br />        copy = <span class="hljs-keyword">new</span> ArrayList&amp;lt;&amp;gt;(pets);<span class="hljs-comment">//构造器传参，初始化list</span><br />        System.out.println(copy);<br />        copy.remove(<span class="hljs-number">2</span>);<span class="hljs-comment">//remove(index)移除index位置对象</span><br />        System.out.println(&amp;quot;<span class="hljs-number">18</span>: &amp;quot;+copy);<br />        copy.removeAll(sub);<span class="hljs-comment">//removeAll(list)与list取差集，移除list中包含的元素</span><br />        System.out.println(&amp;quot;<span class="hljs-number">19</span>: &amp;quot;+copy);<br /><br /><br />        copy.set(<span class="hljs-number">1</span>,<span class="hljs-keyword">new</span> Pet(&amp;quot;Toby&amp;quot;));<span class="hljs-comment">//set(index,obj)将index位置元素替换成obj</span><br />        System.out.println(&amp;quot;<span class="hljs-number">20</span>: &amp;quot;+copy);<br /><br />        copy.addAll(<span class="hljs-number">2</span>,sub);<span class="hljs-comment">//add(index,list)将list所有元素插入到index位置</span><br />        System.out.println(&amp;quot;<span class="hljs-number">21</span>: &amp;quot;+copy);<br />        System.out.println(&amp;quot;<span class="hljs-number">22</span>: &amp;quot;+copy.isEmpty());<span class="hljs-comment">//isEmpty()判断是否非空</span><br />        copy.clear();<span class="hljs-comment">//clear()移除所有元素</span><br />        System.out.println(&amp;quot;<span class="hljs-number">23</span>: &amp;quot;+ copy.isEmpty());<br /><br />        pets.addAll(Pets.namePets(<span class="hljs-number">4</span>));<br />        System.out.println(&amp;quot;<span class="hljs-number">24</span>: &amp;quot;+pets);<br />        Object[] o = pets.toArray();<span class="hljs-comment">//toArray()转为数组</span><br />        System.out.println(&amp;quot;<span class="hljs-number">25</span>: &amp;quot;+ o[<span class="hljs-number">3</span>]);<br />        Pet[] pas = pets.toArray(<span class="hljs-keyword">new</span> Pet[<span class="hljs-number">0</span>]);<span class="hljs-comment">//toArray(T[])T[]为数组设置初始值</span><br />        System.out.println(&amp;quot;<span class="hljs-number">26</span>: &amp;quot;+ pas[<span class="hljs-number">3</span>].name);<br /><br />    }<br />}<br />    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Pets</span></span>{<br />        <span class="hljs-keyword">static</span> ArrayList&amp;lt;Pet&amp;gt; namePets(<span class="hljs-keyword">int</span> i){ <span class="hljs-comment">//返回含有将i个Pet对象的列表</span><br />            String[] names = <span class="hljs-keyword">new</span> String[]{&amp;quot;Charlie&amp;quot;,&amp;quot;Max&amp;quot;, &amp;quot;Buddy&amp;quot;,&amp;quot;Oscar&amp;quot;,<br />                    &amp;quot;Milo&amp;quot;,&amp;quot;Bella&amp;quot;,&amp;quot;Molly&amp;quot;,&amp;quot; Coco&amp;quot; ,&amp;quot;Ruby&amp;quot; ,&amp;quot;Lucy&amp;quot;};<br />            Random random = <span class="hljs-keyword">new</span> Random();<br />            ArrayList&amp;lt;Pet&amp;gt; pets = <span class="hljs-keyword">new</span> ArrayList&amp;lt;&amp;gt;();<br />            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &amp;lt; i; j++) {<br />                pets.add(<span class="hljs-keyword">new</span> Pet(names[j]));<br />            }<br />            <span class="hljs-keyword">return</span> pets;<br />        }<br /><br />    }<br />    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Pet</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Comparable</span>&amp;<span class="hljs-title">lt</span></span>;Pet&amp;gt;{<span class="hljs-comment">//继承泛型实现sort方法</span><br />        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Pet</span><span class="hljs-params">(String name)</span> </span>{<br />            <span class="hljs-keyword">this</span>.name = name;<br />        }<br />        String name;<br /><br />        <span class="hljs-meta">@Override</span><br />        <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>{<span class="hljs-comment">//重写toString方法实现打印</span><br />            <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.name;<br />        }<br /><br />        <span class="hljs-meta">@Override</span><br />        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compareTo</span><span class="hljs-params">(Pet anotherPet)</span> </span>{<span class="hljs-comment">//实现Comparable接口</span><br />                <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.name.compareTo(anotherPet.name);<br />        }<br />    }<br /></code></pre>\n<h2>5.迭代器</h2>\n<p>迭代器是一个用于遍历并选择一个容器中元素的对象，而不必关心容器中的元素的底层结构。</p>\n<p>Java中使用<code>Iterator</code>来表示迭代器对象</p>\n<ul>\n<li>使用<code>iterator</code>方法要求容器返回一个迭代器。Iterator将准备好返回序列的第一个元素</li>\n<li><code>next()</code>方法返回序列的下一个元素</li>\n<li><code>hasNext()</code>检查是否还有下一个元素</li>\n<li><code>remove()</code>移除序列最新返回的元素</li>\n</ul>\n<pre class="code-block"><code class="code hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestIterator</span> </span>{<br />    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br />        ArrayList&amp;lt;Pet&amp;gt; pets = Pets.namePets(<span class="hljs-number">9</span>);<br />        System.out.println(pets);<br />        Iterator&amp;lt;Pet&amp;gt; petIterator = pets.iterator();<span class="hljs-comment">//use method list.iterator() to create</span><br />        <span class="hljs-keyword">while</span> (petIterator.hasNext()){<span class="hljs-comment">//判断</span><br />            Pet p = petIterator.next();<span class="hljs-comment">//返回下一个元素</span><br />            System.out.print(p+&amp;quot;\\t&amp;quot;);<br />        }<br />        System.out.println();<br />        <span class="hljs-keyword">for</span> (Pet p: pets) {  <span class="hljs-comment">//通过Iterator实现的forEach循环遍历 本质上还是是Iterator</span><br />            System.out.print(p+&amp;quot;\\t&amp;quot;);<br />        }<br /><br />        petIterator = pets.iterator();<br />        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &amp;lt; <span class="hljs-number">4</span>; i++) {<br />            petIterator.next();<span class="hljs-comment">//返回下一个元素（头部开始）</span><br />            petIterator.remove();<span class="hljs-comment">//移除next()方法返回的元素，使用该方法必须先使用next()方法</span><br />        }<br />        System.out.println();<br />        System.out.println(pets);<br />    }<br /><br />}<br /></code></pre>\n<p>使用迭代器时，不必关心序列底层结构，统一了对容器的访问方式</p>\n<pre class="code-block"><code class="code hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestIterator1</span> </span>{<br />    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">displayContainer</span><span class="hljs-params">(Iterator&amp;lt;Pet&amp;gt; petIterator)</span></span>{<br />        <span class="hljs-keyword">while</span> (petIterator.hasNext()){<br />            Pet p = petIterator.next();<br />            System.out.print(p+&amp;quot;\\t&amp;quot;);<br />        }<br />        System.out.println();<br />    }<br /><br />    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br />        ArrayList&amp;lt;Pet&amp;gt; pets= Pets.namePets(<span class="hljs-number">6</span>);<br />        LinkedList&amp;lt;Pet&amp;gt; petsLL = <span class="hljs-keyword">new</span> LinkedList&amp;lt;&amp;gt;(pets);<br />        HashSet&amp;lt;Pet&amp;gt; petsHS = <span class="hljs-keyword">new</span> HashSet&amp;lt;&amp;gt;(pets);<br />        TreeSet&amp;lt;Pet&amp;gt; petsTS = <span class="hljs-keyword">new</span> TreeSet&amp;lt;&amp;gt;(pets); <br />        displayContainer(pets.iterator());<br />        displayContainer(petsLL.iterator()); <span class="hljs-comment">//迭代器能够访问不同的容器</span><br />        displayContainer(petsHS.iterator());<br />        displayContainer(petsTS.iterator());<br />    }<br />}<br /><br /></code></pre>\n<p>List类的专用迭代器<code>ListIterator</code></p>\n<p><code>ListIterator</code>添加了<code>previous</code>方法和<code>hasPrevious</code>方法实现了对前一个元素的访问以及存在性判断；</p>\n<p>添加了<code>set</code>方法替换访问过的最后一个元素</p>\n<pre class="code-block"><code class="code hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestListIterator</span> </span>{<br /><br /><br />    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br />        List&amp;lt;Pet&amp;gt;pets = Pets.namePets(<span class="hljs-number">7</span>);<br />        ListIterator&amp;lt;Pet&amp;gt; petListIterator = pets.listIterator();<br />        <span class="hljs-keyword">while</span> (petListIterator.hasNext()){<br />            System.out.print(petListIterator.next()+&amp;quot;\\t&amp;quot;);<br />        }<br />        System.out.println();<br />        <span class="hljs-keyword">while</span> (petListIterator.hasPrevious()){<br />            System.out.print(petListIterator.previous()+&amp;quot;\\t&amp;quot;);<span class="hljs-comment">//前移动访问</span><br />        }<br />        System.out.println();<br />        petListIterator.next();<br />        petListIterator.set(<span class="hljs-keyword">new</span> Pet(&amp;quot;Scout&amp;quot;));<span class="hljs-comment">//将第一个元素替换</span><br />        System.out.println(pets);<br />    }<br />}<br /></code></pre>\n<h2>6. LinkedList</h2>\n<p><code>LinkedList</code>与<code>ArrayList</code>一样实现了基本的List接口,它在中间插入更加高效，在随机访问上要慢一些</p>\n<p><code>LinkedList</code>还添加了作为栈、队列双端队列的方法</p>\n<pre class="code-block"><code class="code hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestLinkedList</span> </span>{<br />    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br />        LinkedList&amp;lt;Pet&amp;gt; pets = <span class="hljs-keyword">new</span> LinkedList&amp;lt;&amp;gt;(Pets.namePets(<span class="hljs-number">8</span>));<br />        System.out.println(pets);<br />        <span class="hljs-comment">//获取头部元素，前面二者完全相同，当为空时抛出NoSuchElementException，peek()方法返回null</span><br />        System.out.println(&amp;quot;pets.getFirst(): &amp;quot;+pets.getFirst());<br />        System.out.println(&amp;quot;pets.element(): &amp;quot;+pets.element());<br />        System.out.println(&amp;quot;pets.peek(): &amp;quot;+pets.peek());<br />        <span class="hljs-comment">//移除头部元素,前面二者完全相同，当为空时抛出NoSuchElementException，poll()方法返回null</span><br />        System.out.println(&amp;quot;pets.remove(): &amp;quot;+pets.remove());<br />        System.out.println(&amp;quot;pets.removeFirst(): &amp;quot;+pets.removeFirst());<br />        System.out.println(&amp;quot;pets.poll(): &amp;quot;+pets.poll());<br />        <span class="hljs-comment">//头部插入</span><br />        pets.addFirst(<span class="hljs-keyword">new</span> Pet(&amp;quot;Ollie&amp;quot;));<br />        System.out.println(&amp;quot;After addFirst: &amp;quot;+pets);<br />        <span class="hljs-comment">//尾部插入</span><br />        pets.offer(Pets.randomPet());<br />        System.out.println(&amp;quot;After offer: &amp;quot;+pets);<br />        pets.add(Pets.randomPet());<br />        System.out.println(&amp;quot;After add: &amp;quot;+pets);<br />        pets.addLast(Pets.randomPet());<br />        System.out.println(&amp;quot;after addLast: &amp;quot;+pets);<br />        <span class="hljs-comment">//移除尾部元素</span><br />        System.out.println(&amp;quot;pets.removeLast(): &amp;quot;+pets.removeLast());<br />        <br />    }<br /><br />}<br /></code></pre>\n<h2>7.Stack</h2>\n<p>栈通常是指“后进先出的容器”</p>\n<p><code>LinckedList</code>具有实现栈的全部功能的方法，因此可用<code>LinkedLis</code>t实现栈</p>\n<p>但是如果只需要栈的行为，使用继承<code>LinkedList</code>的栈就不合适，因为会继承<code>LinkedList</code>的其他方法</p>\n<p>Stack&lt;T&gt;通常有这几类方法</p>\n<ul>\n<li><code>push()</code>:接受T类型的对象，将其压入栈中</li>\n<li><code>pop()</code>:移除栈顶元素并返回</li>\n<li><code>peek()</code>:返回栈顶元素，但部移除</li>\n</ul>\n<pre class="code-block"><code class="code hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestStack</span> </span>{<br />    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br />        Stack&amp;lt;String&amp;gt; stringStack = <span class="hljs-keyword">new</span> Stack&amp;lt;&amp;gt;();<br />        <span class="hljs-keyword">for</span> (String s: &amp;quot;My dog has fleas&amp;quot;.split(&amp;quot; &amp;quot;)) {<br />            stringStack.push(s);<span class="hljs-comment">//入栈</span><br />        }<br />        System.out.println(stringStack);<br />        <span class="hljs-keyword">while</span> (!stringStack.empty()){<span class="hljs-comment">//empty()方法判断栈是否为空</span><br />            System.out.print(stringStack.pop()+&amp;quot;\\t&amp;quot;);<span class="hljs-comment">//出栈</span><br />        }<br />    }<br />}<br /></code></pre>\n<p>练习：将字母压入栈“+”压入，“-” 取出打印</p>\n<pre class="code-block"><code class="hljs">&amp;quot;+U+n+c---+e+r+t---+a-+i-+n+t+y---+-+r+u--+l+e+s&amp;quot;\n</code></pre>\n<pre class="code-block"><code class="code hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestStack01</span> </span>{<br />    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br /><br />        <span class="hljs-keyword">char</span>[] s = &amp;quot;+U+n+c---+e+r+t---+a-+i-+n+t+y---+-+r+u--+l+e+s&amp;quot;.toCharArray();<br />        charStack(s);<br /><br />    }<br />    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Stack&amp;lt;Character&amp;gt; charStack ( <span class="hljs-keyword">char</span>[] s){<br />        Stack&amp;lt;Character&amp;gt; characterStack = <span class="hljs-keyword">new</span> Stack&amp;lt;&amp;gt;();<br />        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &amp;lt; s.length; i++) {<br />            System.out.println(characterStack);<br />            <span class="hljs-keyword">if</span> (s[i] == &amp;#<span class="hljs-number">39</span>;+&amp;#<span class="hljs-number">39</span>;) {<span class="hljs-comment">//当遍历到字符数组为加号时，遍历后面元素，检测到非符号时压入栈中</span><br />                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i; j &amp;lt; s.length; j++) { <br />                    <span class="hljs-keyword">if</span> (!(s[j] == &amp;#<span class="hljs-number">39</span>;+&amp;#<span class="hljs-number">39</span>; || s[j] == &amp;#<span class="hljs-number">39</span>;-&amp;#<span class="hljs-number">39</span>;)) {<br />                        characterStack.push(s[j]);<br />                        <span class="hljs-keyword">break</span>;<br />                    }<br />                }<br />            } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (s[i] == &amp;#<span class="hljs-number">39</span>;-&amp;#<span class="hljs-number">39</span>;) {<span class="hljs-comment">//检测到&amp;#39;-&amp;#39;弹出元素</span><br />                characterStack.pop();<br />            }<br />        }<br />            <span class="hljs-keyword">return</span> characterStack;<br />    }<br />}<br /></code></pre>\n<h2>8. Set</h2>\n<p>Set不能保存相同元素，将多个相同实例添加到Set时，就会阻止这种重复现象</p>\n<p>Set具有与Collection完全一样的接口，Set实际上就是Collection只是行为不同</p>\n<pre class="code-block"><code class="code hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestSet</span> </span>{<br />    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br />        Random random = <span class="hljs-keyword">new</span> Random(<span class="hljs-number">47</span>);<br />        Set&amp;lt;Integer&amp;gt; set = <span class="hljs-keyword">new</span> HashSet&amp;lt;&amp;gt;();<br />        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &amp;lt; <span class="hljs-number">10000</span>; i++) {<br />            set.add(random.nextInt(<span class="hljs-number">30</span>));<br /><br />        }<br />        System.out.println(set);<span class="hljs-comment">//HashSet输出无序</span><br />    }<br />}<br /></code></pre>\n<pre class="code-block"><code class="code hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestTreeSet</span> </span>{<br />    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br />        Set&amp;lt;Integer&amp;gt; set = <span class="hljs-keyword">new</span> TreeSet&amp;lt;&amp;gt;();<br />        Random rand = <span class="hljs-keyword">new</span> Random(<span class="hljs-number">47</span>);<br />        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &amp;lt; <span class="hljs-number">1000</span>; i++) {<br />            set.add(rand.nextInt(<span class="hljs-number">30</span>));<br />        }<br />        System.out.println(set);<span class="hljs-comment">//TreeSet输出有序</span><br />    }<br />}<br /></code></pre>\n<p><code>Set</code>操作。</p>\n<pre class="code-block"><code class="code hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SetOperations</span> </span>{<br />    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br />        HashSet&amp;lt;String&amp;gt; s1 = <span class="hljs-keyword">new</span> HashSet&amp;lt;&amp;gt;();<br />        Collections.addAll(s1,&amp;quot;A B C D E F G H I J K L&amp;quot;.split(&amp;quot; &amp;quot;));<br />        s1.add(&amp;quot;M&amp;quot;);<br />        System.out.println(&amp;quot;Set1 contain H &amp;quot;+s1.contains(&amp;quot;H&amp;quot;));<br />        System.out.println(&amp;quot;Set1 contain N &amp;quot;+s1.contains(&amp;quot;N&amp;quot;));<br />        HashSet&amp;lt;String&amp;gt; s2 = <span class="hljs-keyword">new</span> HashSet&amp;lt;&amp;gt;();<br />        Collections.addAll(s2,&amp;quot;H I J K L&amp;quot;.split(&amp;quot; &amp;quot;));<br />        System.out.println(&amp;quot;set2 in set1 &amp;quot;+s1.containsAll(s2));<br />        s1.remove(&amp;quot;H&amp;quot;);<br />        System.out.println(&amp;quot;Set1: &amp;quot;+s1);<br />        System.out.println(&amp;quot;Set2: &amp;quot;+s2);<br />        System.out.println(&amp;quot;set2 in set1 &amp;quot;+s1.containsAll(s2));<br />        s1.removeAll(s2);<br />        System.out.println(&amp;quot;set2 removed from set1 &amp;quot;+ s1);<br />    }<br />}<br /></code></pre>\n<h2>9. Map</h2>\n<ul>\n<li>\n<p>Map不是collection的子接口或者实现类。Map是一个接口。</p>\n</li>\n<li>\n<p>Map用于保存具有“映射关系”的数据。每个Entry都持有键-值两个对象。其中，Value可能重复，但是Key不允许重复（和Set类似）。</p>\n</li>\n<li>\n<p>Map可以有多个Value为null，但是只能有一个Key为null。</p>\n</li>\n</ul>\n<p>实现类</p>\n<h5>HashMap</h5>\n<p>和HashSet集合不能保证元素的顺序一样，HashMap也不能保证key-value对的顺序。并且类似于HashSet判断两个key是否相等的标准一样: 两个key通过<strong>equals</strong>()方法比较返回true、 同时<strong>两个key的hashCode值也必须相等</strong></p>\n<p>&lt;h5&gt;LinkedHashMap&lt;/h5&gt;</p>\n<p>LinkedHashMap也使用<strong>双向链表</strong>来维护key-value对的次序，该链表负责维护Map的迭代顺序，与key-value对的插入顺序一致(注意和TreeMap对所有的key-value进行排序区分）</p>\n<p>&lt;h5&gt; Properties&lt;/h5&gt;</p>\n<p>Properties对象在处理<strong>属性文件</strong>时特别方便（windows平台的.ini文件）。Properties类可以把<strong>Map对象和属性文件</strong>关联，从而把Map对象的key - value对写入到属性文件中，也可把属性文件中的“属性名-属性值”加载进Map对象中。</p>\n<h5>TreeMap</h5>\n<p>TreeMap是一个红黑树结构，每个键值对都作为红黑树的一个节点。TreeMap存储键值对时，需要根据key对节点进行排序，TreeMap可以保证所有的key-value对处于有序状态。 同时，TreeMap也有两种排序方式：自然排序、</p>\n<pre class="code-block"><code class="code hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestMap</span> </span>{<br />    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br />        Map&amp;lt;String,Pet&amp;gt; petMap = <span class="hljs-keyword">new</span> HashMap&amp;lt;&amp;gt;();<br />        petMap.put(&amp;quot;MyCat&amp;quot;,<span class="hljs-keyword">new</span> Pet(&amp;quot;Molly&amp;quot;));<br />        petMap.put(&amp;quot;MyDog&amp;quot;,<span class="hljs-keyword">new</span> Pet(&amp;quot;Ginger&amp;quot;));<br />        System.out.println(petMap);<br />        Pet dog = petMap.get(&amp;quot;MyDog&amp;quot;);<br />        System.out.println(dog);<br />        System.out.println(petMap.containsKey(&amp;quot;MyDog&amp;quot;));<br />        System.out.println(petMap.containsValue(dog));<br /><br />        System.out.println(petMap.entrySet());<span class="hljs-comment">//entrySet() 方法返回映射中包含的映射的 Set 视图</span><br />        System.out.println(petMap.values() <span class="hljs-keyword">instanceof</span> Collection);<span class="hljs-comment">// 获取值返回一个Collection</span><br /><br />        ArrayList&amp;lt;String&amp;gt; arrayList = <span class="hljs-keyword">new</span> ArrayList&amp;lt;&amp;gt;();<br />        System.out.println(Arrays.asList(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>) <span class="hljs-keyword">instanceof</span> List);<br />    }<br />}<br /></code></pre>\n<h2>10. Queue</h2>\n<p>此接口用于模拟“队列”数据结构（FIFO）。新插入的元素放在队尾，队头存放着保存时间最长的元素</p>\n<p>Queue接口与Collections接口中的方法是独立的</p>\n<p>实现类</p>\n<p>PriorityQueue—— 优先队列（类）</p>\n<p>其实它并没有按照插入的顺序来存放元素，而是<strong>按照队列中某个属性的大小</strong>来排列的。故而叫优先队列。</p>\n<p>Deque——双端队列（接口）</p>\n<ul>\n<li>\n<p>ArrayDeque<br>\n基于数组的双端队列，类似于ArrayList有一个Object[] 数组。</p>\n</li>\n<li>\n<p>LinkedList</p>\n</li>\n</ul>\n<p><strong>LinkedList</strong></p>\n<pre class="code-block"><code class="code hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestLinkedListQueue</span> </span>{<br />    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">printQ</span><span class="hljs-params">(Queue q)</span></span>{<br />        <span class="hljs-keyword">while</span> (q.peek()!=<span class="hljs-keyword">null</span>){<span class="hljs-comment">//peak()方法返回头部元素</span><br />            System.out.print(q.peek()+&amp;quot;\\t&amp;quot;);<span class="hljs-comment">//remove()方法移除并返回头部元素</span><br />            q.remove();<br />        }<br />    }<br /><br />    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br />        Queue&amp;lt;Integer&amp;gt; queue = <span class="hljs-keyword">new</span> LinkedList&amp;lt;&amp;gt;();<br />        Random random = <span class="hljs-keyword">new</span> Random();<br />        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &amp;lt; <span class="hljs-number">10</span>; i++) {<br />            queue.offer(random.nextInt(i+<span class="hljs-number">10</span>)); <span class="hljs-comment">//offer()方法入队</span><br />        }<br />        printQ(queue);<br />        System.out.println();<br />        Queue&amp;lt;Character&amp;gt; characters = <span class="hljs-keyword">new</span> LinkedList&amp;lt;&amp;gt;();<br />        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">char</span> c:&amp;quot;FuckYOU!!!!&amp;quot;.toCharArray()){<br />            characters.offer(c);<br />        }<br />        printQ(characters);<br />    }<br />}<br /></code></pre>\n<p><strong>PriorityQueue</strong></p>\n<p>优先队列会根据元素的优先级对每个插入的元素进行排序，弹出的每个元素为此时优先级最高的元素</p>\n<p>优先队列的排序方式为默认排序方式，也可以提供Comparator来修改排序</p>\n<pre class="code-block"><code class="code hljs java"><span class="hljs-comment">//优先队列2参数构造器，容量+比较方法</span><br /><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">PriorityQueue</span><span class="hljs-params">(<span class="hljs-keyword">int</span> initialCapacity,<br />                     Comparator&amp;lt;? <span class="hljs-keyword">super</span> E&amp;gt; comparator)</span> </span>{<br />    <span class="hljs-comment">// Note: This restriction of at least one is not actually needed,</span><br />    <span class="hljs-comment">// but continues for 1.5 compatibility</span><br />    <span class="hljs-keyword">if</span> (initialCapacity &amp;lt; <span class="hljs-number">1</span>)<br />        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException();<br />    <span class="hljs-keyword">this</span>.queue = <span class="hljs-keyword">new</span> Object[initialCapacity];<br />    <span class="hljs-keyword">this</span>.comparator = comparator;<br />}<br /></code></pre>\n<pre class="code-block"><code class="code hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestPriorityQueue</span> </span>{<br />    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br />        PriorityQueue&amp;lt;Integer&amp;gt; priorityQueue = <span class="hljs-keyword">new</span> PriorityQueue&amp;lt;&amp;gt;();<br />        Random rand = <span class="hljs-keyword">new</span> Random();<br />        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &amp;lt; <span class="hljs-number">10</span>; i++) {<br />            priorityQueue.offer(rand.nextInt(i+<span class="hljs-number">10</span>));<br />        }<br />        TestLinkedListQueue.printQ(priorityQueue);<br />        List&amp;lt;Integer&amp;gt; integerList = Arrays.asList(<span class="hljs-number">99</span>,<span class="hljs-number">2</span>,<span class="hljs-number">22</span>,<span class="hljs-number">100</span>,<span class="hljs-number">2</span>,<span class="hljs-number">7</span>,<span class="hljs-number">33</span>,<span class="hljs-number">1276</span>);<br />        PriorityQueue&amp;lt;Integer&amp;gt; priorityQueue1 = <span class="hljs-keyword">new</span> PriorityQueue&amp;lt;&amp;gt;(integerList);<br />        TestLinkedListQueue.printQ(priorityQueue1);<br /><br />        priorityQueue1 = <span class="hljs-keyword">new</span> PriorityQueue&amp;lt;&amp;gt;(integerList.size(), Collections.reverseOrder());<span class="hljs-comment">//自定义优先级</span><br />        priorityQueue1.addAll(integerList);<br />        TestLinkedListQueue.printQ(priorityQueue1);<br /><br />        String fact = &amp;quot;SB ZHI YUAN ZHE HUO DONG LANG FEI YE DE SHI JIAN&amp;quot;;<br />        List&amp;lt;String&amp;gt; strings = Arrays.asList(fact.split(&amp;quot;&amp;quot;));<br />        PriorityQueue&amp;lt;String&amp;gt; priorityQueue2 = <span class="hljs-keyword">new</span> PriorityQueue&amp;lt;String&amp;gt;(strings);<br />        <span class="hljs-keyword">int</span> pq2Size = priorityQueue2.size();<br />        TestLinkedListQueue.printQ(priorityQueue2);<br />        System.out.println(pq2Size);<br /><br />        PriorityQueue&amp;lt;String&amp;gt; priorityQueue3 = <span class="hljs-keyword">new</span> PriorityQueue&amp;lt;&amp;gt;(pq2Size,Collections.reverseOrder());<br />        priorityQueue3.addAll(strings);<br />        TestLinkedListQueue.printQ(priorityQueue3);<br />        <br />    }<br />}<br /></code></pre>\n	2	1	0	f	2021-04-22 22:41:24.322	2021-04-23 23:01:43.084304	2	https://cdn.zhoupb.com/image/generate/41f3898c4708e134d16ba849a803a14a.png	容器1.出现原因解决程序运行时需要创建新对象，在程序运行前不知道运行的所需的对象数量甚至是类型的问题。Java中提供了一套集合类来解决这些问题包括：List、Set、Queue、Map2.Java容器分类Collection：独立的元素序列，都服从一条或多条的规则List：必须按照插入顺序保存元素Set：不能含有重复元素Queue：按照排队规则来确定对象的产生顺序Map：成对的“键对值”对象，允许使用键来查找值MapArrayList：利用数值来查找值3.操作容器3.1添加一组元素Array.asList()方法：该方法接受一个数组或用逗号隔开的元素列表，并转换为一个List对象。Collection.addAll()方法：接受一个Collection对象，可以使用Array.asList()产生Collection对象。Collecions.addAll()方法：接受一个Collection对象，以及数组或者逗号隔开的元素列表，并将元素添加到Collection对象中。Collection()构造器方法：Collection构造器方法接受一个Collection对象用于自身初始化。publicclassTestAddObj{publicstaticvoidmain(String[]args){Collection&amp;lt;Integer&amp;gt;collection=newArrayList&amp;lt;&amp;gt;(Arrays.asList(1,2,3,4,8));//构造器添加元素Integer[]moreInts={7,5,6};collection.addAll(Arrays.asList(moreInts));//Collection对象addAll()方法添加元素Collections.addAll(collection,9,10,11,12);//Collections类addAll方法添加元素Collections.addAll(collection,moreInts);//以Collection对象添加元素for(inti:collection){System.out.print(i+&amp;quot;\\t&amp;quot;);//打印元素}List&amp;lt;Integer&amp;gt;list=Arrays.asList(1,2,3,6);//直接使用Array.asList方法添加//list.add(3);//报错，使用该方法产生的List本质上数组，不能修改大小，即不能适应add方法添加元素或delete方法删除元素list.set(2,10);System.out.println();for(inti:list){System.out.print(i+&amp;quot;\\t&amp;quot;);}}}3.2打印使用打印默认的打印行为(容器提供的toString()方法publicclassTestPrintContainers{publicstaticvoidmain(String[]args){System.out.println(fill(newArrayList&amp;lt;&amp;gt;()));System.out.println(fill(newLinkedList&amp;lt;&amp;gt;()));System.out.println(fill(newHashSet&amp;lt;&amp;gt;()));System.out.println(fill(newTreeSet&amp;lt;&amp;gt;()));System.out.println(fill(newLinkedHashSet&amp;lt;&amp;gt;()));System.out.println(fill(newTreeMap&amp;lt;&amp;gt;()));System.out.println(fill(newHashMap&amp;lt;&amp;gt;()));System.out.println(fill(newLinkedHashMap&amp;lt;&amp;gt;()));}staticCollection&amp;lt;String&amp;gt;fill(Collection&amp;lt;String&amp;gt;collection){collection.addAll(Arrays.asList(&amp;quot;rat&amp;quot;,&amp;quot;cat&amp;quot;,&amp;quot;dog&amp;quot;));//使用Collection对象作为参数添加一组元素returncollection;}staticMap&amp;lt;String,String&amp;gt;fill(Map&amp;lt;String,String&amp;gt;map){map.put(&amp;quot;rat&amp;quot;,&amp;quot;Fuzzy&amp;quot;);map.put(&amp;quot;cat&amp;quot;,&amp;quot;Rags&amp;quot;);//put&amp;lt;key,value&amp;gt;添加键值get(key)获取键的值map.put(&amp;quot;dog&amp;quot;,&amp;quot;Bosco&amp;quot;);map.put(&amp;quot;dog&amp;quot;,&amp;quot;Spot&amp;quot;);returnmap;}}4.ListList接口在Collection接口的基础上添加了大量的方法，使得可以在List中间插入和移除元素List接口的实现类ArrayList长于随机访问元素，在其中插入和移除元素时较慢LinkedList随机访问较慢，可以较低代价的在List中间插入和移除元素publicclasstestList{publicstaticvoidmain(String[]args){Randomrand=newRandom(100);ArrayList&amp;lt;Pet&amp;gt;pets=Pets.namePets(7);//产生petsSystem.out.println(&amp;quot;1:&amp;quot;+pets);Petlola=newPet(&amp;quot;lola&amp;quot;);pets.add(lola);//add(obj)列表最后插入objSystem.out.println(&amp;quot;2:&amp;quot;+pets);System.out.println(&amp;quot;3:&amp;quot;+pets.contains(lola));//contains()判断是否包含pets.remove(lola);//remove(obj)删除列表中的对obj象Petp=pets.get(2);//get(Index)获取索引位置对象System.out.println(&amp;quot;4:&amp;quot;+p+&amp;quot;&amp;quot;+pets.indexOf(p));//indexOf(obj)获取obj对象的位置Petmilo=newPet(&amp;quot;Milo&amp;quot;);pets.add(milo);System.out.println(&amp;quot;5:&amp;quot;+pets.indexOf(milo));System.out.println(&amp;quot;6:&amp;quot;+pets.remove(milo));System.out.println(&amp;quot;7:&amp;quot;+pets.remove(p));System.out.println(&amp;quot;8:&amp;quot;+pets);pets.add(3,newPet(&amp;quot;Jack&amp;quot;));//add(index,obj)将obj插入到index位置System.out.println(&amp;quot;9:&amp;quot;+pets);List&amp;lt;Pet&amp;gt;sub=pets.subList(1,4);//sub(start,end)获取[start,end)列表片段System.out.println(&amp;quot;10:sublist[1,4)&amp;quot;+sub);System.out.println(&amp;quot;11:&amp;quot;+pets.containsAll(sub));//containsAll(listObj)判断是否包含listObj的全部对象(忽略顺序)Collections.sort(sub);//Collections.sort(list)对列表list进行排序(需要list包含的对象实现泛型接口Comparable&amp;lt;&amp;gt;)System.out.println(&amp;quot;12:sortedsub&amp;quot;+sub);System.out.println(&amp;quot;13:&amp;quot;+pets.containsAll(sub));Collections.shuffle(sub,rand);//Collections.shuffle(list,rand)将list按rand规则打乱System.out.println(&amp;quot;14:shufflesublist&amp;quot;+sub);System.out.println(&amp;quot;15:&amp;quot;+pets.containsAll(sub));List&amp;lt;Pet&amp;gt;copy=newArrayList&amp;lt;&amp;gt;(pets);sub=Arrays.asList(pets.get(1),pets.get(4));//获取pets的第一个和第4个对象，返回一个列表，传入subSystem.out.println(&amp;quot;16:sub:&amp;quot;+sub);copy.retainAll(sub);//retainAll(list)与list所有元素取交集System.out.println(&amp;quot;17:&amp;quot;+copy);copy=newArrayList&amp;lt;&amp;gt;(pets);//构造器传参，初始化listSystem.out.println(copy);copy.remove(2);//remove(index)移除index位置对象System.out.println(&amp;quot;18:&amp;quot;+copy);copy.removeAll(sub);//removeAll(list)与list取差集，移除list中包含的元素System.out.println(&amp;quot;19:&amp;quot;+copy);copy.set(1,newPet(&amp;quot;Toby&amp;quot;));//set(index,obj)将index位置元素替换成objSystem.out.println(&amp;quot;20:&amp;quot;+copy);copy.addAll(2,sub);//add(index,list)将list所有元素插入到index位置System.out.println(&amp;quot;21:&amp;quot;+copy);System.out.println(&amp;quot;22:&amp;quot;+copy.isEmpty());//isEmpty()判断是否非空copy.clear();//clear()移除所有元素System.out.println(&amp;quot;23:&amp;quot;+copy.isEmpty());pets.addAll(Pets.namePets(4));System.out.println(&amp;quot;24:&amp;quot;+pets);Object[]o=pets.toArray();//toArray()转为数组System.out.println(&amp;quot;25:&amp;quot;+o[3]);Pet[]pas=pets.toArray(newPet[0]);//toArray(T[])T[]为数组设置初始值System.out.println(&amp;quot;26:&amp;quot;+pas[3].name);}}classPets{staticArrayList&amp;lt;Pet&amp;gt;namePets(inti){//返回含有将i个Pet对象的列表String[]names=newString[]{&amp;quot;Charlie&amp;quot;,&amp;quot;Max&amp;quot;,&amp;quot;Buddy&amp;quot;,&amp;quot;Oscar&amp;quot;,&amp;quot;Milo&amp;quot;,&amp;quot;Bella&amp;quot;,&amp;quot;Molly&amp;quot;,&amp;quot;Coco&amp;quot;,&amp;quot;Ruby&amp;quot;,&amp;quot;Lucy&amp;quot;};Randomrandom=newRandom();ArrayList&amp;lt;Pet&amp;gt;pets=newArrayList&amp;lt;&amp;gt;();for(intj=0;j&amp;lt;i;j++){pets.add(newPet(names[j]));}returnpets;}}classPetimplementsComparable&amp;lt;Pet&amp;gt;{//继承泛型实现sort方法publicPet(Stringname){this.name=name;}Stringname;@OverridepublicStringtoString(){//重写toString方法实现打印returnthis.name;}@OverridepublicintcompareTo(PetanotherPet){//实现Comparable接口returnthis.name.compareTo(anotherPet.name);}}5.迭代器迭代器是一个用于遍历并选择一个容器中元素的对象，而不必关心容器中的元素的底层结构。Java中使用Iterator来表示迭代器对象使用iterator方法要求容器返回一个迭代器。Iterator将准备好返回序列的第一个元素next()方法返回序列的下一个元素hasNext()检查是否还有下一个元素remove()移除序列最新返回的元素publicclassTestIterator{publicstaticvoidmain(String[]args){ArrayList&amp;lt;Pet&amp;gt;pets=Pets.namePets(9);System.out.println(pets);Iterator&amp;lt;Pet&amp;gt;petIterator=pets.iterator();//usemethodlist.iterator()tocreatewhile(petIterator.hasNext()){//判断Petp=petIterator.next();//返回下一个元素System.out.print(p+&amp;quot;\\t&amp;quot;);}System.out.println();for(Petp:pets){//通过Iterator实现的forEach循环遍历本质上还是是IteratorSystem.out.print(p+&amp;quot;\\t&amp;quot;);}petIterator=pets.iterator();for(inti=0;i&amp;lt;4;i++){petIterator.next();//返回下一个元素（头部开始）petIterator.remove();//移除next()方法返回的元素，使用该方法必须先使用next()方法}System.out.println();System.out.println(pets);}}使用迭代器时，不必关心序列底层结构，统一了对容器的访问方式publicclassTestIterator1{publicstaticvoiddisplayContainer(Iterator&amp;lt;Pet&amp;gt;petIterator){while(petIterator.hasNext()){Petp=petIterator.next();System.out.print(p+&amp;quot;\\t&amp;quot;);}System.out.println();}publicstaticvoidmain(String[]args){ArrayList&amp;lt;Pet&amp;gt;pets=Pets.namePets(6);LinkedList&amp;lt;Pet&amp;gt;petsLL=newLinkedList&amp;lt;&amp;gt;(pets);HashSet&amp;lt;Pet&amp;gt;petsHS=newHashSet&amp;lt;&amp;gt;(pets);TreeSet&amp;lt;Pet&amp;gt;petsTS=newTreeSet&amp;lt;&amp;gt;(pets);displayContainer(pets.iterator());displayContainer(petsLL.iterator());//迭代器能够访问不同的容器displayContainer(petsHS.iterator());displayContainer(petsTS.iterator());}}List类的专用迭代器ListIteratorListIterator添加了previous方法和hasPrevious方法实现了对前一个元素的访问以及存在性判断；添加了set方法替换访问过的最后一个元素publicclassTestListIterator{publicstaticvoidmain(String[]args){List&amp;lt;Pet&amp;gt;pets=Pets.namePets(7);ListIterator&amp;lt;Pet&amp;gt;petListIterator=pets.listIterator();while(petListIterator.hasNext()){System.out.print(petListIterator.next()+&amp;quot;\\t&amp;quot;);}System.out.println();while(petListIterator.hasPrevious()){System.out.print(petListIterator.previous()+&amp;quot;\\t&amp;quot;);//前移动访问}System.out.println();petListIterator.next();petListIterator.set(newPet(&amp;quot;Scout&amp;quot;));//将第一个元素替换System.out.println(pets);}}6.LinkedListLinkedList与ArrayList一样实现了基本的List接口,它在中间插入更加高效，在随机访问上要慢一些LinkedList还添加了作为栈、队列双端队列的方法publicclassTestLinkedList{publicstaticvoidmain(String[]args){LinkedList&amp;lt;Pet&amp;gt;pets=newLinkedList&amp;lt;&amp;gt;(Pets.namePets(8));System.out.println(pets);//获取头部元素，前面二者完全相同，当为空时抛出NoSuchElementException，peek()方法返回nullSystem.out.println(&amp;quot;pets.getFirst():&amp;quot;+pets.getFirst());System.out.println(&amp;quot;pets.element():&amp;quot;+pets.element());System.out.println(&amp;quot;pets.peek():&amp;quot;+pets.peek());//移除头部元素,前面二者完全相同，当为空时抛出NoSuchElementException，poll()方法返回nullSystem.out.println(&amp;quot;pets.remove():&amp;quot;+pets.remove());System.out.println(&amp;quot;pets.removeFirst():&amp;quot;+pets.removeFirst());System.out.println(&amp;quot;pets.poll():&amp;quot;+pets.poll());//头部插入pets.addFirst(newPet(&amp;quot;Ollie&amp;quot;));System.out.println(&amp;quot;AfteraddFirst:&amp;quot;+pets);//尾部插入pets.offer(Pets.randomPet());System.out.println(&amp;quot;Afteroffer:&amp;quot;+pets);pets.add(Pets.randomPet());System.out.println(&amp;quot;Afteradd:&amp;quot;+pets);pets.addLast(Pets.randomPet());System.out.println(&amp;quot;afteraddLast:&amp;quot;+pets);//移除尾部元素System.out.println(&amp;quot;pets.removeLast():&amp;quot;+pets.removeLast());}}7.Stack栈通常是指“后进先出的容器”LinckedList具有实现栈的全部功能的方法，因此可用LinkedList实现栈但是如果只需要栈的行为，使用继承LinkedList的栈就不合适，因为会继承LinkedList的其他方法Stack&lt;T&gt;通常有这几类方法push():接受T类型的对象，将其压入栈中pop():移除栈顶元素并返回peek():返回栈顶元素，但部移除publicclassTestStack{publicstaticvoidmain(String[]args){Stack&amp;lt;String&amp;gt;stringStack=newStack&amp;lt;&amp;gt;();for(Strings:&amp;quot;Mydoghasfleas&amp;quot;.split(&amp;quot;&amp;quot;)){stringStack.push(s);//入栈}System.out.println(stringStack);while(!stringStack.empty()){//empty()方法判断栈是否为空System.out.print(stringStack.pop()+&amp;quot;\\t&amp;quot;);//出栈}}}练习：将字母压入栈“+”压入，“-”取出打印&amp;quot;+U+n+c---+e+r+t---+a-+i-+n+t+y---+-+r+u--+l+e+s&amp;quot;publicclassTestStack01{publicstaticvoidmain(String[]args){char[]s=&amp;quot;+U+n+c---+e+r+t---+a-+i-+n+t+y---+-+r+u--+l+e+s&amp;quot;.toCharArray();charStack(s);}publicstaticStack&amp;lt;Character&amp;gt;charStack(char[]s){Stack&amp;lt;Character&amp;gt;characterStack=newStack&amp;lt;&amp;gt;();for(inti=0;i&amp;lt;s.length;i++){System.out.println(characterStack);if(s[i]==&amp;#39;+&amp;#39;){//当遍历到字符数组为加号时，遍历后面元素，检测到非符号时压入栈中for(intj=i;j&amp;lt;s.length;j++){if(!(s[j]==&amp;#39;+&amp;#39;||s[j]==&amp;#39;-&amp;#39;)){characterStack.push(s[j]);break;}}}elseif(s[i]==&amp;#39;-&amp;#39;){//检测到&amp;#39;-&amp;#39;弹出元素characterStack.pop();}}returncharacterStack;}}8.SetSet不能保存相同元素，将多个相同实例添加到Set时，就会阻止这种重复现象Set具有与Collection完全一样的接口，Set实际上就是Collection只是行为不同publicclassTestSet{publicstaticvoidmain(String[]args){Randomrandom=newRandom(47);Set&amp;lt;Integer&amp;gt;set=newHashSet&amp;lt;&amp;gt;();for(inti=0;i&amp;lt;10000;i++){set.add(random.nextInt(30));}System.out.println(set);//HashSet输出无序}}publicclassTestTreeSet{publicstaticvoidmain(String[]args){Set&amp;lt;Integer&amp;gt;set=newTreeSet&amp;lt;&amp;gt;();Randomrand=newRandom(47);for(inti=0;i&amp;lt;1000;i++){set.add(rand.nextInt(30));}System.out.println(set);//TreeSet输出有序}}Set操作。publicclassSetOperations{publicstaticvoidmain(String[]args){HashSet&amp;lt;String&amp;gt;s1=newHashSet&amp;lt;&amp;gt;();Collections.addAll(s1,&amp;quot;ABCDEFGHIJKL&amp;quot;.split(&amp;quot;&amp;quot;));s1.add(&amp;quot;M&amp;quot;);System.out.println(&amp;quot;Set1containH&amp;quot;+s1.contains(&amp;quot;H&amp;quot;));System.out.println(&amp;quot;Set1containN&amp;quot;+s1.contains(&amp;quot;N&amp;quot;));HashSet&amp;lt;String&amp;gt;s2=newHashSet&amp;lt;&amp;gt;();Collections.addAll(s2,&amp;quot;HIJKL&amp;quot;.split(&amp;quot;&amp;quot;));System.out.println(&amp;quot;set2inset1&amp;quot;+s1.containsAll(s2));s1.remove(&amp;quot;H&amp;quot;);System.out.println(&amp;quot;Set1:&amp;quot;+s1);System.out.println(&amp;quot;Set2:&amp;quot;+s2);System.out.println(&amp;quot;set2inset1&amp;quot;+s1.containsAll(s2));s1.removeAll(s2);System.out.println(&amp;quot;set2removedfromset1&amp;quot;+s1);}}9.MapMap不是collection的子接口或者实现类。Map是一个接口。Map用于保存具有“映射关系”的数据。每个Entry都持有键-值两个对象。其中，Value可能重复，但是Key不允许重复（和Set类似）。Map可以有多个Value为null，但是只能有一个Key为null。实现类HashMap和HashSet集合不能保证元素的顺序一样，HashMap也不能保证key-value对的顺序。并且类似于HashSet判断两个key是否相等的标准一样:两个key通过equals()方法比较返回true、同时两个key的hashCode值也必须相等&lt;h5&gt;LinkedHashMap&lt;/h5&gt;LinkedHashMap也使用双向链表来维护key-value对的次序，该链表负责维护Map的迭代顺序，与key-value对的插入顺序一致(注意和TreeMap对所有的key-value进行排序区分）&lt;h5&gt;Properties&lt;/h5&gt;Properties对象在处理属性文件时特别方便（windows平台的.ini文件）。Properties类可以把Map对象和属性文件关联，从而把Map对象的key-value对写入到属性文件中，也可把属性文件中的“属性名-属性值”加载进Map对象中。TreeMapTreeMap是一个红黑树结构，每个键值对都作为红黑树的一个节点。TreeMap存储键值对时，需要根据key对节点进行排序，TreeMap可以保证所有的key-value对处于有序状态。同时，TreeMap也有两种排序方式：自然排序、publicclassTestMap{publicstaticvoidmain(String[]args){Map&amp;lt;String,Pet&amp;gt;petMap=newHashMap&amp;lt;&amp;gt;();petMap.put(&amp;quot;MyCat&amp;quot;,newPet(&amp;quot;Molly&amp;quot;));petMap.put(&amp;quot;MyDog&amp;quot;,newPet(&amp;quot;Ginger&amp;quot;));System.out.println(petMap);Petdog=petMap.get(&amp;quot;MyDog&amp;quot;);System.out.println(dog);System.out.println(petMap.containsKey(&amp;quot;MyDog&amp;quot;));System.out.println(petMap.containsValue(dog));System.out.println(petMap.entrySet());//entrySet()方法返回映射中包含的映射的Set视图System.out.println(petMap.values()instanceofCollection);//获取值返回一个CollectionArrayList&amp;lt;String&amp;gt;arrayList=newArrayList&amp;lt;&amp;gt;();System.out.println(Arrays.asList(1,2,3)instanceofList);}}10.Queue此接口用于模拟“队列”数据结构（FIFO）。新插入的元素放在队尾，队头存放着保存时间最长的元素Queue接口与Collections接口中的方法是独立的实现类PriorityQueue——优先队列（类）其实它并没有按照插入的顺序来存放元素，而是按照队列中某个属性的大小来排列的。故而叫优先队列。Deque——双端队列（接口）ArrayDeque基于数组的双端队列，类似于ArrayList有一个Object[]数组。LinkedListLinkedListpublicclassTestLinkedListQueue{publicstaticvoidprintQ(Queueq){while(q.peek()!=null){//peak()方法返回头部元素System.out.print(q.peek()+&amp;quot;\\t&amp;quot;);//remove()方法移除并返回头部元素q.remove();}}publicstaticvoidmain(String[]args){Queue&amp;lt;Integer&amp;gt;queue=newLinkedList&amp;lt;&amp;gt;();Randomrandom=newRandom();for(inti=0;i&amp;lt;10;i++){queue.offer(random.nextInt(i+10));//offer()方法入队}printQ(queue);System.out.println();Queue&amp;lt;Character&amp;gt;characters=newLinkedList&amp;lt;&amp;gt;();for(charc:&amp;quot;FuckYOU!!!!&amp;quot;.toCharArray()){characters.offer(c);}printQ(characters);}}PriorityQueue优先队列会根据元素的优先级对每个插入的元素进行排序，弹出的每个元素为此时优先级最高的元素优先队列的排序方式为默认排序方式，也可以提供Comparator来修改排序//优先队列2参数构造器，容量+比较方法publicPriorityQueue(intinitialCapacity,Comparator&amp;lt;?superE&amp;gt;comparator){//Note:Thisrestrictionofatleastoneisnotactuallyneeded,//butcontinuesfor1.5compatibilityif(initialCapacity&amp;lt;1)thrownewIllegalArgumentException();this.queue=newObject[initialCapacity];this.comparator=comparator;}publicclassTestPriorityQueue{publicstaticvoidmain(String[]args){PriorityQueue&amp;lt;Integer&amp;gt;priorityQueue=newPriorityQueue&amp;lt;&amp;gt;();Randomrand=newRandom();for(inti=0;i&amp;lt;10;i++){priorityQueue.offer(rand.nextInt(i+10));}TestLinkedListQueue.printQ(priorityQueue);List&amp;lt;Integer&amp;gt;integerList=Arrays.asList(99,2,22,100,2,7,33,1276);PriorityQueue&amp;lt;Integer&amp;gt;priorityQueue1=newPriorityQueue&amp;lt;&amp;gt;(integerList);TestLinkedListQueue.printQ(priorityQueue1);priorityQueue1=newPriorityQueue&amp;lt;&amp;gt;(integerList.size(),Collections.reverseOrder());//自定义优先级priorityQueue1.addAll(integerList);TestLinkedListQueue.printQ(priorityQueue1);Stringfact=&amp;quot;SBZHIYUANZHEHUODONGLANGFEIYEDESHIJIAN&amp;quot;;List&amp;lt;String&amp;gt;strings=Arrays.asList(fact.split(&amp;quot;&amp;quot;));PriorityQueue&amp;lt;String&amp;gt;priorityQueue2=newPriorityQueue&amp;lt;String&amp;gt;(strings);intpq2Size=priorityQueue2.size();TestLinkedListQueue.printQ(priorityQueue2);System.out.println(pq2Size);PriorityQueue&amp;lt;String&amp;gt;priorityQueue3=newPriorityQueue&amp;lt;&amp;gt;(pq2Size,Collections.reverseOrder());priorityQueue3.addAll(strings);TestLinkedListQueue.printQ(priorityQueue3);}}
14	Ajax简介	{ajax,前端}	##Ajax简介\r\n- AJAX = Asynchronous JavaScript and XML（异步的 JavaScript 和 XML）。\r\n- AJAX 是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术。\r\n- 使用ajax技术的网页，通过在后台服务器进行少量的数据交换，就可以实现异步局部更新。\r\n\r\n##简易实现Ajax\r\n```java\r\n//类使用了RestController\r\n    @RequestMapping(&quot;/a1&quot;)\r\n    public void test01(String name , HttpServletResponse response) throws IOException {\r\n        if (&quot;admin&quot;.equals(name)){\r\n            response.getWriter().print(&quot;ttttt&quot;);\r\n        }else{\r\n            response.getWriter().print(&quot;fffff&quot;);\r\n        }\r\n    }\r\n```\r\n- 当用户在文本框输入admin后失去焦点，输出ttttt和success\r\n- 输入的不是admin时或者无输入后失去焦点，输出fffff和success\r\n```html\r\n&lt;script&gt;\r\n    function a1(){\r\n      $.post({\r\n        url:&quot;${pageContext.request.contextPath}/a1&quot;,\r\n        data:{&#39;name&#39;:$(&quot;#username&quot;).val()},\r\n        success:function (data,status) {\r\n          alert(data);\r\n          alert(status);\r\n        }\r\n      });\r\n    }\r\n  &lt;/script&gt;\r\n  &lt;%--onblur：失去焦点触发事件--%&gt;\r\n用户名:&lt;input type=&quot;text&quot; id=&quot;username&quot; onblur=&quot;a1()&quot;/&gt;\r\n```\r\n##SpringMVC实现数据回显\r\n###创建实体类\r\n```java\r\n@Data\r\n@AllArgsConstructor\r\n@NoArgsConstructor\r\npublic class User {\r\n   private String name;\r\n   private int age;\r\n   private String sex;\r\n}\r\n```\r\n###写controller\r\n```java\r\n@RequestMapping(&quot;/a2&quot;)\r\npublic List&lt;User&gt; ajax2(){\r\n   List&lt;User&gt; list = new ArrayList&lt;User&gt;();\r\n   list.add(new User(&quot;朗朗1号&quot;,3,&quot;男&quot;));\r\n   list.add(new User(&quot;朗朗2号&quot;,3,&quot;男&quot;));\r\n   list.add(new User(&quot;朗朗3号&quot;,3,&quot;男&quot;));\r\n   return list; //由于@RestController注解，将list转成json格式返回\r\n}\r\n```\r\n\r\n###前端页面\r\n```html\r\n&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;\r\n&lt;html&gt;\r\n&lt;head&gt;\r\n   &lt;title&gt;Title&lt;/title&gt;\r\n&lt;/head&gt;\r\n&lt;body&gt;\r\n&lt;input type=&quot;button&quot; id=&quot;btn&quot; value=&quot;获取数据&quot;/&gt;\r\n&lt;table width=&quot;80%&quot; align=&quot;center&quot;&gt;\r\n   &lt;tr&gt;\r\n       &lt;td&gt;姓名&lt;/td&gt;\r\n       &lt;td&gt;年龄&lt;/td&gt;\r\n       &lt;td&gt;性别&lt;/td&gt;\r\n   &lt;/tr&gt;\r\n   &lt;tbody id=&quot;content&quot;&gt;\r\n   &lt;/tbody&gt;\r\n&lt;/table&gt;\r\n\r\n&lt;script src=&quot;${pageContext.request.contextPath}/statics/js/jquery-3.1.1.min.js&quot;&gt;&lt;/script&gt;\r\n&lt;script&gt;\r\n\r\n   $(function () {\r\n       $(&quot;#btn&quot;).click(function () {\r\n           $.post(&quot;${pageContext.request.contextPath}/a2&quot;,function (data) {\r\n               console.log(data)\r\n               var html=&quot;&quot;;\r\n               for (var i = 0; i &lt;data.length ; i++) {\r\n                   html+= &quot;&lt;tr&gt;&quot; +\r\n                       &quot;&lt;td&gt;&quot; + data[i].name + &quot;&lt;/td&gt;&quot; +\r\n                       &quot;&lt;td&gt;&quot; + data[i].age + &quot;&lt;/td&gt;&quot; +\r\n                       &quot;&lt;td&gt;&quot; + data[i].sex + &quot;&lt;/td&gt;&quot; +\r\n                       &quot;&lt;/tr&gt;&quot;\r\n              }\r\n               $(&quot;#content&quot;).html(html);\r\n          });\r\n      })\r\n  })\r\n&lt;/script&gt;\r\n&lt;/body&gt;\r\n```\r\n\r\n##注册提示效果\r\n###写controller\r\n\r\n```java\r\n@RequestMapping(&quot;/a3&quot;)\r\npublic String ajax3(String name,String pwd){\r\n   String msg = &quot;&quot;;\r\n   //模拟数据库中存在数据\r\n   if (name!=null){\r\n       if (&quot;admin&quot;.equals(name)){\r\n           msg = &quot;OK&quot;;\r\n      }else {\r\n           msg = &quot;用户名输入错误&quot;;\r\n      }\r\n  }\r\n   if (pwd!=null){\r\n       if (&quot;123456&quot;.equals(pwd)){\r\n           msg = &quot;OK&quot;;\r\n      }else {\r\n           msg = &quot;密码输入有误&quot;;\r\n      }\r\n  }\r\n   return msg; //由于@RestController注解，将msg转成json格式返回\r\n}\r\n```\r\n\r\n###写login.jsp\r\n```html\r\n&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;\r\n&lt;html&gt;\r\n&lt;head&gt;\r\n   &lt;title&gt;ajax&lt;/title&gt;\r\n   &lt;script src=&quot;${pageContext.request.contextPath}/statics/js/jquery-3.1.1.min.js&quot;&gt;&lt;/script&gt;\r\n   &lt;script&gt;\r\n\r\n       function a1(){\r\n           $.post({\r\n               url:&quot;${pageContext.request.contextPath}/a3&quot;,\r\n               data:{&#39;name&#39;:$(&quot;#name&quot;).val()},\r\n               success:function (data) {\r\n                   if (data.toString()==&#39;OK&#39;){\r\n                       $(&quot;#userInfo&quot;).css(&quot;color&quot;,&quot;green&quot;);\r\n                  }else {\r\n                       $(&quot;#userInfo&quot;).css(&quot;color&quot;,&quot;red&quot;);\r\n                  }\r\n                   $(&quot;#userInfo&quot;).html(data);\r\n              }\r\n          });\r\n      }\r\n       function a2(){\r\n           $.post({\r\n               url:&quot;${pageContext.request.contextPath}/a3&quot;,\r\n               data:{&#39;pwd&#39;:$(&quot;#pwd&quot;).val()},\r\n               success:function (data) {\r\n                   if (data.toString()==&#39;OK&#39;){\r\n                       $(&quot;#pwdInfo&quot;).css(&quot;color&quot;,&quot;green&quot;);\r\n                  }else {\r\n                       $(&quot;#pwdInfo&quot;).css(&quot;color&quot;,&quot;red&quot;);\r\n                  }\r\n                   $(&quot;#pwdInfo&quot;).html(data);\r\n              }\r\n          });\r\n      }\r\n\r\n   &lt;/script&gt;\r\n&lt;/head&gt;\r\n&lt;body&gt;\r\n&lt;p&gt;\r\n  用户名:&lt;input type=&quot;text&quot; id=&quot;name&quot; onblur=&quot;a1()&quot;/&gt;\r\n   &lt;span id=&quot;userInfo&quot;&gt;&lt;/span&gt;\r\n&lt;/p&gt;\r\n&lt;p&gt;\r\n  密码:&lt;input type=&quot;text&quot; id=&quot;pwd&quot; onblur=&quot;a2()&quot;/&gt;\r\n   &lt;span id=&quot;pwdInfo&quot;&gt;&lt;/span&gt;\r\n&lt;/p&gt;\r\n&lt;/body&gt;\r\n&lt;/html&gt;\r\n```\r\n![局部刷新示例](https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/04/17/kuangstudy2b1affc4-cf70-4c4d-8f4f-e70e65c02069.png &quot;局部刷新示例&quot;)	<p>##Ajax简介</p>\n<ul>\n<li>AJAX = Asynchronous JavaScript and XML（异步的 JavaScript 和 XML）。</li>\n<li>AJAX 是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术。</li>\n<li>使用ajax技术的网页，通过在后台服务器进行少量的数据交换，就可以实现异步局部更新。</li>\n</ul>\n<p>##简易实现Ajax</p>\n<pre class="code-block"><code class="code hljs java"><span class="hljs-comment">//类使用了RestController</span><br />    <span class="hljs-meta">@RequestMapping(&amp;quot;/a1&amp;quot;)</span><br />    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">(String name , HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> IOException </span>{<br />        <span class="hljs-keyword">if</span> (&amp;quot;admin&amp;quot;.equals(name)){<br />            response.getWriter().print(&amp;quot;ttttt&amp;quot;);<br />        }<span class="hljs-keyword">else</span>{<br />            response.getWriter().print(&amp;quot;fffff&amp;quot;);<br />        }<br />    }<br /></code></pre>\n<ul>\n<li>当用户在文本框输入admin后失去焦点，输出ttttt和success</li>\n<li>输入的不是admin时或者无输入后失去焦点，输出fffff和success</li>\n</ul>\n<pre class="code-block"><code class="code hljs html"><span class="hljs-symbol">&amp;lt;</span>script<span class="hljs-symbol">&amp;gt;</span><br />    function a1(){<br />      $.post({<br />        url:<span class="hljs-symbol">&amp;quot;</span>${pageContext.request.contextPath}/a1<span class="hljs-symbol">&amp;quot;</span>,<br />        data:{<span class="hljs-symbol">&amp;#39;</span>name<span class="hljs-symbol">&amp;#39;</span>:$(<span class="hljs-symbol">&amp;quot;</span>#username<span class="hljs-symbol">&amp;quot;</span>).val()},<br />        success:function (data,status) {<br />          alert(data);<br />          alert(status);<br />        }<br />      });<br />    }<br />  <span class="hljs-symbol">&amp;lt;</span>/script<span class="hljs-symbol">&amp;gt;</span><br />  <span class="hljs-symbol">&amp;lt;</span>%--onblur：失去焦点触发事件--%<span class="hljs-symbol">&amp;gt;</span><br />用户名:<span class="hljs-symbol">&amp;lt;</span>input type=<span class="hljs-symbol">&amp;quot;</span>text<span class="hljs-symbol">&amp;quot;</span> id=<span class="hljs-symbol">&amp;quot;</span>username<span class="hljs-symbol">&amp;quot;</span> onblur=<span class="hljs-symbol">&amp;quot;</span>a1()<span class="hljs-symbol">&amp;quot;</span>/<span class="hljs-symbol">&amp;gt;</span><br /></code></pre>\n<p>##SpringMVC实现数据回显<br>\n###创建实体类</p>\n<pre class="code-block"><code class="code hljs java"><span class="hljs-meta">@Data</span><br /><span class="hljs-meta">@AllArgsConstructor</span><br /><span class="hljs-meta">@NoArgsConstructor</span><br /><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>{<br />   <span class="hljs-keyword">private</span> String name;<br />   <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br />   <span class="hljs-keyword">private</span> String sex;<br />}<br /></code></pre>\n<p>###写controller</p>\n<pre class="code-block"><code class="code hljs java"><span class="hljs-meta">@RequestMapping(&amp;quot;/a2&amp;quot;)</span><br /><span class="hljs-keyword">public</span> List&amp;lt;User&amp;gt; ajax2(){<br />   List&amp;lt;User&amp;gt; list = <span class="hljs-keyword">new</span> ArrayList&amp;lt;User&amp;gt;();<br />   list.add(<span class="hljs-keyword">new</span> User(&amp;quot;朗朗<span class="hljs-number">1</span>号&amp;quot;,<span class="hljs-number">3</span>,&amp;quot;男&amp;quot;));<br />   list.add(<span class="hljs-keyword">new</span> User(&amp;quot;朗朗<span class="hljs-number">2</span>号&amp;quot;,<span class="hljs-number">3</span>,&amp;quot;男&amp;quot;));<br />   list.add(<span class="hljs-keyword">new</span> User(&amp;quot;朗朗<span class="hljs-number">3</span>号&amp;quot;,<span class="hljs-number">3</span>,&amp;quot;男&amp;quot;));<br />   <span class="hljs-keyword">return</span> list; <span class="hljs-comment">//由于@RestController注解，将list转成json格式返回</span><br />}<br /></code></pre>\n<p>###前端页面</p>\n<pre class="code-block"><code class="code hljs html"><span class="hljs-symbol">&amp;lt;</span>%@ page contentType=<span class="hljs-symbol">&amp;quot;</span>text/html;charset=UTF-8<span class="hljs-symbol">&amp;quot;</span> language=<span class="hljs-symbol">&amp;quot;</span>java<span class="hljs-symbol">&amp;quot;</span> %<span class="hljs-symbol">&amp;gt;</span><br /><span class="hljs-symbol">&amp;lt;</span>html<span class="hljs-symbol">&amp;gt;</span><br /><span class="hljs-symbol">&amp;lt;</span>head<span class="hljs-symbol">&amp;gt;</span><br />   <span class="hljs-symbol">&amp;lt;</span>title<span class="hljs-symbol">&amp;gt;</span>Title<span class="hljs-symbol">&amp;lt;</span>/title<span class="hljs-symbol">&amp;gt;</span><br /><span class="hljs-symbol">&amp;lt;</span>/head<span class="hljs-symbol">&amp;gt;</span><br /><span class="hljs-symbol">&amp;lt;</span>body<span class="hljs-symbol">&amp;gt;</span><br /><span class="hljs-symbol">&amp;lt;</span>input type=<span class="hljs-symbol">&amp;quot;</span>button<span class="hljs-symbol">&amp;quot;</span> id=<span class="hljs-symbol">&amp;quot;</span>btn<span class="hljs-symbol">&amp;quot;</span> value=<span class="hljs-symbol">&amp;quot;</span>获取数据<span class="hljs-symbol">&amp;quot;</span>/<span class="hljs-symbol">&amp;gt;</span><br /><span class="hljs-symbol">&amp;lt;</span>table width=<span class="hljs-symbol">&amp;quot;</span>80%<span class="hljs-symbol">&amp;quot;</span> align=<span class="hljs-symbol">&amp;quot;</span>center<span class="hljs-symbol">&amp;quot;</span><span class="hljs-symbol">&amp;gt;</span><br />   <span class="hljs-symbol">&amp;lt;</span>tr<span class="hljs-symbol">&amp;gt;</span><br />       <span class="hljs-symbol">&amp;lt;</span>td<span class="hljs-symbol">&amp;gt;</span>姓名<span class="hljs-symbol">&amp;lt;</span>/td<span class="hljs-symbol">&amp;gt;</span><br />       <span class="hljs-symbol">&amp;lt;</span>td<span class="hljs-symbol">&amp;gt;</span>年龄<span class="hljs-symbol">&amp;lt;</span>/td<span class="hljs-symbol">&amp;gt;</span><br />       <span class="hljs-symbol">&amp;lt;</span>td<span class="hljs-symbol">&amp;gt;</span>性别<span class="hljs-symbol">&amp;lt;</span>/td<span class="hljs-symbol">&amp;gt;</span><br />   <span class="hljs-symbol">&amp;lt;</span>/tr<span class="hljs-symbol">&amp;gt;</span><br />   <span class="hljs-symbol">&amp;lt;</span>tbody id=<span class="hljs-symbol">&amp;quot;</span>content<span class="hljs-symbol">&amp;quot;</span><span class="hljs-symbol">&amp;gt;</span><br />   <span class="hljs-symbol">&amp;lt;</span>/tbody<span class="hljs-symbol">&amp;gt;</span><br /><span class="hljs-symbol">&amp;lt;</span>/table<span class="hljs-symbol">&amp;gt;</span><br /><br /><span class="hljs-symbol">&amp;lt;</span>script src=<span class="hljs-symbol">&amp;quot;</span>${pageContext.request.contextPath}/statics/js/jquery-3.1.1.min.js<span class="hljs-symbol">&amp;quot;</span><span class="hljs-symbol">&amp;gt;</span><span class="hljs-symbol">&amp;lt;</span>/script<span class="hljs-symbol">&amp;gt;</span><br /><span class="hljs-symbol">&amp;lt;</span>script<span class="hljs-symbol">&amp;gt;</span><br /><br />   $(function () {<br />       $(<span class="hljs-symbol">&amp;quot;</span>#btn<span class="hljs-symbol">&amp;quot;</span>).click(function () {<br />           $.post(<span class="hljs-symbol">&amp;quot;</span>${pageContext.request.contextPath}/a2<span class="hljs-symbol">&amp;quot;</span>,function (data) {<br />               console.log(data)<br />               var html=<span class="hljs-symbol">&amp;quot;</span><span class="hljs-symbol">&amp;quot;</span>;<br />               for (var i = 0; i <span class="hljs-symbol">&amp;lt;</span>data.length ; i++) {<br />                   html+= <span class="hljs-symbol">&amp;quot;</span><span class="hljs-symbol">&amp;lt;</span>tr<span class="hljs-symbol">&amp;gt;</span><span class="hljs-symbol">&amp;quot;</span> +<br />                       <span class="hljs-symbol">&amp;quot;</span><span class="hljs-symbol">&amp;lt;</span>td<span class="hljs-symbol">&amp;gt;</span><span class="hljs-symbol">&amp;quot;</span> + data[i].name + <span class="hljs-symbol">&amp;quot;</span><span class="hljs-symbol">&amp;lt;</span>/td<span class="hljs-symbol">&amp;gt;</span><span class="hljs-symbol">&amp;quot;</span> +<br />                       <span class="hljs-symbol">&amp;quot;</span><span class="hljs-symbol">&amp;lt;</span>td<span class="hljs-symbol">&amp;gt;</span><span class="hljs-symbol">&amp;quot;</span> + data[i].age + <span class="hljs-symbol">&amp;quot;</span><span class="hljs-symbol">&amp;lt;</span>/td<span class="hljs-symbol">&amp;gt;</span><span class="hljs-symbol">&amp;quot;</span> +<br />                       <span class="hljs-symbol">&amp;quot;</span><span class="hljs-symbol">&amp;lt;</span>td<span class="hljs-symbol">&amp;gt;</span><span class="hljs-symbol">&amp;quot;</span> + data[i].sex + <span class="hljs-symbol">&amp;quot;</span><span class="hljs-symbol">&amp;lt;</span>/td<span class="hljs-symbol">&amp;gt;</span><span class="hljs-symbol">&amp;quot;</span> +<br />                       <span class="hljs-symbol">&amp;quot;</span><span class="hljs-symbol">&amp;lt;</span>/tr<span class="hljs-symbol">&amp;gt;</span><span class="hljs-symbol">&amp;quot;</span><br />              }<br />               $(<span class="hljs-symbol">&amp;quot;</span>#content<span class="hljs-symbol">&amp;quot;</span>).html(html);<br />          });<br />      })<br />  })<br /><span class="hljs-symbol">&amp;lt;</span>/script<span class="hljs-symbol">&amp;gt;</span><br /><span class="hljs-symbol">&amp;lt;</span>/body<span class="hljs-symbol">&amp;gt;</span><br /></code></pre>\n<p>##注册提示效果<br>\n###写controller</p>\n<pre class="code-block"><code class="code hljs java"><span class="hljs-meta">@RequestMapping(&amp;quot;/a3&amp;quot;)</span><br /><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">ajax3</span><span class="hljs-params">(String name,String pwd)</span></span>{<br />   String msg = &amp;quot;&amp;quot;;<br />   <span class="hljs-comment">//模拟数据库中存在数据</span><br />   <span class="hljs-keyword">if</span> (name!=<span class="hljs-keyword">null</span>){<br />       <span class="hljs-keyword">if</span> (&amp;quot;admin&amp;quot;.equals(name)){<br />           msg = &amp;quot;OK&amp;quot;;<br />      }<span class="hljs-keyword">else</span> {<br />           msg = &amp;quot;用户名输入错误&amp;quot;;<br />      }<br />  }<br />   <span class="hljs-keyword">if</span> (pwd!=<span class="hljs-keyword">null</span>){<br />       <span class="hljs-keyword">if</span> (&amp;quot;<span class="hljs-number">123456</span>&amp;quot;.equals(pwd)){<br />           msg = &amp;quot;OK&amp;quot;;<br />      }<span class="hljs-keyword">else</span> {<br />           msg = &amp;quot;密码输入有误&amp;quot;;<br />      }<br />  }<br />   <span class="hljs-keyword">return</span> msg; <span class="hljs-comment">//由于@RestController注解，将msg转成json格式返回</span><br />}<br /></code></pre>\n<p>###写login.jsp</p>\n<pre class="code-block"><code class="code hljs html"><span class="hljs-symbol">&amp;lt;</span>%@ page contentType=<span class="hljs-symbol">&amp;quot;</span>text/html;charset=UTF-8<span class="hljs-symbol">&amp;quot;</span> language=<span class="hljs-symbol">&amp;quot;</span>java<span class="hljs-symbol">&amp;quot;</span> %<span class="hljs-symbol">&amp;gt;</span><br /><span class="hljs-symbol">&amp;lt;</span>html<span class="hljs-symbol">&amp;gt;</span><br /><span class="hljs-symbol">&amp;lt;</span>head<span class="hljs-symbol">&amp;gt;</span><br />   <span class="hljs-symbol">&amp;lt;</span>title<span class="hljs-symbol">&amp;gt;</span>ajax<span class="hljs-symbol">&amp;lt;</span>/title<span class="hljs-symbol">&amp;gt;</span><br />   <span class="hljs-symbol">&amp;lt;</span>script src=<span class="hljs-symbol">&amp;quot;</span>${pageContext.request.contextPath}/statics/js/jquery-3.1.1.min.js<span class="hljs-symbol">&amp;quot;</span><span class="hljs-symbol">&amp;gt;</span><span class="hljs-symbol">&amp;lt;</span>/script<span class="hljs-symbol">&amp;gt;</span><br />   <span class="hljs-symbol">&amp;lt;</span>script<span class="hljs-symbol">&amp;gt;</span><br /><br />       function a1(){<br />           $.post({<br />               url:<span class="hljs-symbol">&amp;quot;</span>${pageContext.request.contextPath}/a3<span class="hljs-symbol">&amp;quot;</span>,<br />               data:{<span class="hljs-symbol">&amp;#39;</span>name<span class="hljs-symbol">&amp;#39;</span>:$(<span class="hljs-symbol">&amp;quot;</span>#name<span class="hljs-symbol">&amp;quot;</span>).val()},<br />               success:function (data) {<br />                   if (data.toString()==<span class="hljs-symbol">&amp;#39;</span>OK<span class="hljs-symbol">&amp;#39;</span>){<br />                       $(<span class="hljs-symbol">&amp;quot;</span>#userInfo<span class="hljs-symbol">&amp;quot;</span>).css(<span class="hljs-symbol">&amp;quot;</span>color<span class="hljs-symbol">&amp;quot;</span>,<span class="hljs-symbol">&amp;quot;</span>green<span class="hljs-symbol">&amp;quot;</span>);<br />                  }else {<br />                       $(<span class="hljs-symbol">&amp;quot;</span>#userInfo<span class="hljs-symbol">&amp;quot;</span>).css(<span class="hljs-symbol">&amp;quot;</span>color<span class="hljs-symbol">&amp;quot;</span>,<span class="hljs-symbol">&amp;quot;</span>red<span class="hljs-symbol">&amp;quot;</span>);<br />                  }<br />                   $(<span class="hljs-symbol">&amp;quot;</span>#userInfo<span class="hljs-symbol">&amp;quot;</span>).html(data);<br />              }<br />          });<br />      }<br />       function a2(){<br />           $.post({<br />               url:<span class="hljs-symbol">&amp;quot;</span>${pageContext.request.contextPath}/a3<span class="hljs-symbol">&amp;quot;</span>,<br />               data:{<span class="hljs-symbol">&amp;#39;</span>pwd<span class="hljs-symbol">&amp;#39;</span>:$(<span class="hljs-symbol">&amp;quot;</span>#pwd<span class="hljs-symbol">&amp;quot;</span>).val()},<br />               success:function (data) {<br />                   if (data.toString()==<span class="hljs-symbol">&amp;#39;</span>OK<span class="hljs-symbol">&amp;#39;</span>){<br />                       $(<span class="hljs-symbol">&amp;quot;</span>#pwdInfo<span class="hljs-symbol">&amp;quot;</span>).css(<span class="hljs-symbol">&amp;quot;</span>color<span class="hljs-symbol">&amp;quot;</span>,<span class="hljs-symbol">&amp;quot;</span>green<span class="hljs-symbol">&amp;quot;</span>);<br />                  }else {<br />                       $(<span class="hljs-symbol">&amp;quot;</span>#pwdInfo<span class="hljs-symbol">&amp;quot;</span>).css(<span class="hljs-symbol">&amp;quot;</span>color<span class="hljs-symbol">&amp;quot;</span>,<span class="hljs-symbol">&amp;quot;</span>red<span class="hljs-symbol">&amp;quot;</span>);<br />                  }<br />                   $(<span class="hljs-symbol">&amp;quot;</span>#pwdInfo<span class="hljs-symbol">&amp;quot;</span>).html(data);<br />              }<br />          });<br />      }<br /><br />   <span class="hljs-symbol">&amp;lt;</span>/script<span class="hljs-symbol">&amp;gt;</span><br /><span class="hljs-symbol">&amp;lt;</span>/head<span class="hljs-symbol">&amp;gt;</span><br /><span class="hljs-symbol">&amp;lt;</span>body<span class="hljs-symbol">&amp;gt;</span><br /><span class="hljs-symbol">&amp;lt;</span>p<span class="hljs-symbol">&amp;gt;</span><br />  用户名:<span class="hljs-symbol">&amp;lt;</span>input type=<span class="hljs-symbol">&amp;quot;</span>text<span class="hljs-symbol">&amp;quot;</span> id=<span class="hljs-symbol">&amp;quot;</span>name<span class="hljs-symbol">&amp;quot;</span> onblur=<span class="hljs-symbol">&amp;quot;</span>a1()<span class="hljs-symbol">&amp;quot;</span>/<span class="hljs-symbol">&amp;gt;</span><br />   <span class="hljs-symbol">&amp;lt;</span>span id=<span class="hljs-symbol">&amp;quot;</span>userInfo<span class="hljs-symbol">&amp;quot;</span><span class="hljs-symbol">&amp;gt;</span><span class="hljs-symbol">&amp;lt;</span>/span<span class="hljs-symbol">&amp;gt;</span><br /><span class="hljs-symbol">&amp;lt;</span>/p<span class="hljs-symbol">&amp;gt;</span><br /><span class="hljs-symbol">&amp;lt;</span>p<span class="hljs-symbol">&amp;gt;</span><br />  密码:<span class="hljs-symbol">&amp;lt;</span>input type=<span class="hljs-symbol">&amp;quot;</span>text<span class="hljs-symbol">&amp;quot;</span> id=<span class="hljs-symbol">&amp;quot;</span>pwd<span class="hljs-symbol">&amp;quot;</span> onblur=<span class="hljs-symbol">&amp;quot;</span>a2()<span class="hljs-symbol">&amp;quot;</span>/<span class="hljs-symbol">&amp;gt;</span><br />   <span class="hljs-symbol">&amp;lt;</span>span id=<span class="hljs-symbol">&amp;quot;</span>pwdInfo<span class="hljs-symbol">&amp;quot;</span><span class="hljs-symbol">&amp;gt;</span><span class="hljs-symbol">&amp;lt;</span>/span<span class="hljs-symbol">&amp;gt;</span><br /><span class="hljs-symbol">&amp;lt;</span>/p<span class="hljs-symbol">&amp;gt;</span><br /><span class="hljs-symbol">&amp;lt;</span>/body<span class="hljs-symbol">&amp;gt;</span><br /><span class="hljs-symbol">&amp;lt;</span>/html<span class="hljs-symbol">&amp;gt;</span><br /></code></pre>\n<p>![局部刷新示例](<a href="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/04/17/kuangstudy2b1affc4-cf70-4c4d-8f4f-e70e65c02069.png">https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/04/17/kuangstudy2b1affc4-cf70-4c4d-8f4f-e70e65c02069.png</a> &quot;局部刷新示例&quot;)</p>\n	9	0	0	f	2021-04-22 22:43:38.245	2021-04-23 23:03:21.124691	2	https://cdn.zhoupb.com/image/generate/bea163f9e88d8810c230e96e79293bda.png	##Ajax简介AJAX=AsynchronousJavaScriptandXML（异步的JavaScript和XML）。AJAX是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术。使用ajax技术的网页，通过在后台服务器进行少量的数据交换，就可以实现异步局部更新。##简易实现Ajax//类使用了RestController@RequestMapping(&amp;quot;/a1&amp;quot;)publicvoidtest01(Stringname,HttpServletResponseresponse)throwsIOException{if(&amp;quot;admin&amp;quot;.equals(name)){response.getWriter().print(&amp;quot;ttttt&amp;quot;);}else{response.getWriter().print(&amp;quot;fffff&amp;quot;);}}当用户在文本框输入admin后失去焦点，输出ttttt和success输入的不是admin时或者无输入后失去焦点，输出fffff和success&amp;lt;script&amp;gt;functiona1(){$.post({url:&amp;quot;${pageContext.request.contextPath}/a1&amp;quot;,data:{&amp;#39;name&amp;#39;:$(&amp;quot;#username&amp;quot;).val()},success:function(data,status){alert(data);alert(status);}});}&amp;lt;/script&amp;gt;&amp;lt;%--onblur：失去焦点触发事件--%&amp;gt;用户名:&amp;lt;inputtype=&amp;quot;text&amp;quot;id=&amp;quot;username&amp;quot;onblur=&amp;quot;a1()&amp;quot;/&amp;gt;##SpringMVC实现数据回显###创建实体类@Data@AllArgsConstructor@NoArgsConstructorpublicclassUser{privateStringname;privateintage;privateStringsex;}###写controller@RequestMapping(&amp;quot;/a2&amp;quot;)publicList&amp;lt;User&amp;gt;ajax2(){List&amp;lt;User&amp;gt;list=newArrayList&amp;lt;User&amp;gt;();list.add(newUser(&amp;quot;朗朗1号&amp;quot;,3,&amp;quot;男&amp;quot;));list.add(newUser(&amp;quot;朗朗2号&amp;quot;,3,&amp;quot;男&amp;quot;));list.add(newUser(&amp;quot;朗朗3号&amp;quot;,3,&amp;quot;男&amp;quot;));returnlist;//由于@RestController注解，将list转成json格式返回}###前端页面&amp;lt;%@pagecontentType=&amp;quot;text/html;charset=UTF-8&amp;quot;language=&amp;quot;java&amp;quot;%&amp;gt;&amp;lt;html&amp;gt;&amp;lt;head&amp;gt;&amp;lt;title&amp;gt;Title&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;&amp;lt;body&amp;gt;&amp;lt;inputtype=&amp;quot;button&amp;quot;id=&amp;quot;btn&amp;quot;value=&amp;quot;获取数据&amp;quot;/&amp;gt;&amp;lt;tablewidth=&amp;quot;80%&amp;quot;align=&amp;quot;center&amp;quot;&amp;gt;&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;姓名&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;年龄&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;性别&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&amp;lt;tbodyid=&amp;quot;content&amp;quot;&amp;gt;&amp;lt;/tbody&amp;gt;&amp;lt;/table&amp;gt;&amp;lt;scriptsrc=&amp;quot;${pageContext.request.contextPath}/statics/js/jquery-3.1.1.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&amp;lt;script&amp;gt;$(function(){$(&amp;quot;#btn&amp;quot;).click(function(){$.post(&amp;quot;${pageContext.request.contextPath}/a2&amp;quot;,function(data){console.log(data)varhtml=&amp;quot;&amp;quot;;for(vari=0;i&amp;lt;data.length;i++){html+=&amp;quot;&amp;lt;tr&amp;gt;&amp;quot;+&amp;quot;&amp;lt;td&amp;gt;&amp;quot;+data[i].name+&amp;quot;&amp;lt;/td&amp;gt;&amp;quot;+&amp;quot;&amp;lt;td&amp;gt;&amp;quot;+data[i].age+&amp;quot;&amp;lt;/td&amp;gt;&amp;quot;+&amp;quot;&amp;lt;td&amp;gt;&amp;quot;+data[i].sex+&amp;quot;&amp;lt;/td&amp;gt;&amp;quot;+&amp;quot;&amp;lt;/tr&amp;gt;&amp;quot;}$(&amp;quot;#content&amp;quot;).html(html);});})})&amp;lt;/script&amp;gt;&amp;lt;/body&amp;gt;##注册提示效果###写controller@RequestMapping(&amp;quot;/a3&amp;quot;)publicStringajax3(Stringname,Stringpwd){Stringmsg=&amp;quot;&amp;quot;;//模拟数据库中存在数据if(name!=null){if(&amp;quot;admin&amp;quot;.equals(name)){msg=&amp;quot;OK&amp;quot;;}else{msg=&amp;quot;用户名输入错误&amp;quot;;}}if(pwd!=null){if(&amp;quot;123456&amp;quot;.equals(pwd)){msg=&amp;quot;OK&amp;quot;;}else{msg=&amp;quot;密码输入有误&amp;quot;;}}returnmsg;//由于@RestController注解，将msg转成json格式返回}###写login.jsp&amp;lt;%@pagecontentType=&amp;quot;text/html;charset=UTF-8&amp;quot;language=&amp;quot;java&amp;quot;%&amp;gt;&amp;lt;html&amp;gt;&amp;lt;head&amp;gt;&amp;lt;title&amp;gt;ajax&amp;lt;/title&amp;gt;&amp;lt;scriptsrc=&amp;quot;${pageContext.request.contextPath}/statics/js/jquery-3.1.1.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&amp;lt;script&amp;gt;functiona1(){$.post({url:&amp;quot;${pageContext.request.contextPath}/a3&amp;quot;,data:{&amp;#39;name&amp;#39;:$(&amp;quot;#name&amp;quot;).val()},success:function(data){if(data.toString()==&amp;#39;OK&amp;#39;){$(&amp;quot;#userInfo&amp;quot;).css(&amp;quot;color&amp;quot;,&amp;quot;green&amp;quot;);}else{$(&amp;quot;#userInfo&amp;quot;).css(&amp;quot;color&amp;quot;,&amp;quot;red&amp;quot;);}$(&amp;quot;#userInfo&amp;quot;).html(data);}});}functiona2(){$.post({url:&amp;quot;${pageContext.request.contextPath}/a3&amp;quot;,data:{&amp;#39;pwd&amp;#39;:$(&amp;quot;#pwd&amp;quot;).val()},success:function(data){if(data.toString()==&amp;#39;OK&amp;#39;){$(&amp;quot;#pwdInfo&amp;quot;).css(&amp;quot;color&amp;quot;,&amp;quot;green&amp;quot;);}else{$(&amp;quot;#pwdInfo&amp;quot;).css(&amp;quot;color&amp;quot;,&amp;quot;red&amp;quot;);}$(&amp;quot;#pwdInfo&amp;quot;).html(data);}});}&amp;lt;/script&amp;gt;&amp;lt;/head&amp;gt;&amp;lt;body&amp;gt;&amp;lt;p&amp;gt;用户名:&amp;lt;inputtype=&amp;quot;text&amp;quot;id=&amp;quot;name&amp;quot;onblur=&amp;quot;a1()&amp;quot;/&amp;gt;&amp;lt;spanid=&amp;quot;userInfo&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;密码:&amp;lt;inputtype=&amp;quot;text&amp;quot;id=&amp;quot;pwd&amp;quot;onblur=&amp;quot;a2()&amp;quot;/&amp;gt;&amp;lt;spanid=&amp;quot;pwdInfo&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;![局部刷新示例](https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/04/17/kuangstudy2b1affc4-cf70-4c4d-8f4f-e70e65c02069.png&quot;局部刷新示例&quot;)
18	测试	{标签}	**文字加粗**\n\n# 标题一\n\n\n![image.png](https://cdn.zhoupb.com/image/upload/2e8aae2cbf8bccee1c2a465cc0d1ce08.png)\n\n![3da8-kpamyii1977789.gif](https://cdn.zhoupb.com/image/upload/449f622632bcf144ec685b3ad7714bd7.gif)\n\n	<p><strong>文字加粗</strong></p>\n<h1>标题一</h1>\n<p><img src="https://cdn.zhoupb.com/image/upload/2e8aae2cbf8bccee1c2a465cc0d1ce08.png" alt="image.png"></p>\n<p><img src="https://cdn.zhoupb.com/image/upload/449f622632bcf144ec685b3ad7714bd7.gif" alt="3da8-kpamyii1977789.gif"></p>\n	0	0	0	f	2021-04-24 08:24:49.404709	2021-04-24 08:24:49.404709	1	https://cdn.zhoupb.com/image/generate/fa6b1b60a47ae993c5bbc154a2294fa3.png	文字加粗标题一
12	SpringMVC配置	{SpringMVC}	第一种：Springmvc（继承接口 配置）：\r\n在web.xml里：\r\n1、配置DispatchServlet，这个是Springmvc的核心，前端控制器。（DispatchServlet要绑定spring配置文件（springmvc-servlet））\r\n2、在Springmvc中，‘/:’只匹配所有请求，不会匹配jsp页面。\r\n                                   &#39;/*&#39; 匹配所有请求，包括jsp页面\r\nSpringmvc-servlet:\r\n1、处理器映射器；\r\n&lt;bean class = &#39;org.springframework.web.servlet.handler.BeanNameUrlHanderMapping&#39;/&gt;\r\n2、处理器适配器；\r\n&lt;bean class = &#39;org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter&#39;/&gt;\r\n3、视图解析器：模板引擎 Thymleaf Framework…；\r\n&lt;bean class &#39;org.springframework.web.servlet.view.InternalResourceViewResolver&#39; id = &#39;InternalResourceViewResolver&#39;&gt;\r\n\t&lt;property name = &#39;prefix&#39; value = &#39;/WEB-INF/jsp&#39;/&gt;  前缀\r\n\t&lt;property name = &#39;suffix&#39; value = &#39;.jsp&#39;/&gt;  后缀\r\n\t\r\n&lt;/bean&gt;\r\n4、只要实现了Controller的接口的类，说明这就是一个控制器了\r\n\r\n第二种：Springmvc（注解方式配置）：\r\n1、自动扫描包，让指定包下的注解生效，由IOC容器统一管理；\r\n&lt;context:component-scan base-package = &#39;com.kuang.controller&#39;/&gt;\r\n2、让springmvc不处理静态资源  .css .js .html .mp3 ；\r\n&lt;mvc:default-servlet-handler/&gt;\r\n3、支持注解驱动，在spring中一般采用@RequestMapping注解来完成映射关系，要想使@RequestMapping注解生效，必须向上下文注册DefaultAnnotationHandlerMapping和一个AnnotationMethodHandlerAdapter实例，这两个实例分别在类级别和方法级别处理，而annotation-driven配置帮助我们自动完成上述两个实例的注入。\r\n&lt;mvc:annotation-driven/&gt;	<p>第一种：Springmvc（继承接口 配置）：<br>\n在web.xml里：<br>\n1、配置DispatchServlet，这个是Springmvc的核心，前端控制器。（DispatchServlet要绑定spring配置文件（springmvc-servlet））<br>\n2、在Springmvc中，‘/:’只匹配所有请求，不会匹配jsp页面。<br>\n'/*' 匹配所有请求，包括jsp页面<br>\nSpringmvc-servlet:<br>\n1、处理器映射器；<br>\n&lt;bean class = 'org.springframework.web.servlet.handler.BeanNameUrlHanderMapping'/&gt;<br>\n2、处理器适配器；<br>\n&lt;bean class = 'org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter'/&gt;<br>\n3、视图解析器：模板引擎 Thymleaf Framework…；<br>\n&lt;bean class 'org.springframework.web.servlet.view.InternalResourceViewResolver' id = 'InternalResourceViewResolver'&gt;<br>\n&lt;property name = 'prefix' value = '/WEB-INF/jsp'/&gt;  前缀<br>\n&lt;property name = 'suffix' value = '.jsp'/&gt;  后缀</p>\n<p>&lt;/bean&gt;<br>\n4、只要实现了Controller的接口的类，说明这就是一个控制器了</p>\n<p>第二种：Springmvc（注解方式配置）：<br>\n1、自动扫描包，让指定包下的注解生效，由IOC容器统一管理；<br>\n&lt;context:component-scan base-package = 'com.kuang.controller'/&gt;<br>\n2、让springmvc不处理静态资源  .css .js .html .mp3 ；<br>\n&lt;mvc:default-servlet-handler/&gt;<br>\n3、支持注解驱动，在spring中一般采用@RequestMapping注解来完成映射关系，要想使@RequestMapping注解生效，必须向上下文注册DefaultAnnotationHandlerMapping和一个AnnotationMethodHandlerAdapter实例，这两个实例分别在类级别和方法级别处理，而annotation-driven配置帮助我们自动完成上述两个实例的注入。<br>\n&lt;mvc:annotation-driven/&gt;</p>\n	13	1	0	f	2021-04-22 22:37:56.12	2021-04-23 23:01:19.89413	2	https://cdn.zhoupb.com/image/generate/252f95cf3cc8106b3f0761de56b5cd04.png	第一种：Springmvc（继承接口配置）：在web.xml里：1、配置DispatchServlet，这个是Springmvc的核心，前端控制器。（DispatchServlet要绑定spring配置文件（springmvc-servlet））2、在Springmvc中，‘/:’只匹配所有请求，不会匹配jsp页面。'/*'匹配所有请求，包括jsp页面Springmvc-servlet:1、处理器映射器；&lt;beanclass='org.springframework.web.servlet.handler.BeanNameUrlHanderMapping'/&gt;2、处理器适配器；&lt;beanclass='org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter'/&gt;3、视图解析器：模板引擎ThymleafFramework…；&lt;beanclass'org.springframework.web.servlet.view.InternalResourceViewResolver'id='InternalResourceViewResolver'&gt;&lt;propertyname='prefix'value='/WEB-INF/jsp'/&gt;前缀&lt;propertyname='suffix'value='.jsp'/&gt;后缀&lt;/bean&gt;4、只要实现了Controller的接口的类，说明这就是一个控制器了第二种：Springmvc（注解方式配置）：1、自动扫描包，让指定包下的注解生效，由IOC容器统一管理；&lt;context:component-scanbase-package='com.kuang.controller'/&gt;2、让springmvc不处理静态资源.css.js.html.mp3；&lt;mvc:default-servlet-handler/&gt;3、支持注解驱动，在spring中一般采用@RequestMapping注解来完成映射关系，要想使@RequestMapping注解生效，必须向上下文注册DefaultAnnotationHandlerMapping和一个AnnotationMethodHandlerAdapter实例，这两个实例分别在类级别和方法级别处理，而annotation-driven配置帮助我们自动完成上述两个实例的注入。&lt;mvc:annotation-driven/&gt;
1	SpringBoot是什么？	{Java,Spring,SpringBoot}	# SpringBoot是什么？\r\nSpringBoot是Spring的一个脚手架，简化了Spring开发的难度，不用再写繁重的配置，提供了各种启动器，大大提高了开发效率\r\n# SpringBoot有哪些优点？\r\n1.搭建项目快\r\n2.SpringBoot的核心理念就是：约定大于配置，不需要再做大量的配置\r\n3.让测试变得简单，内置了JUnit,SpringBoot Test等测试框架，方便测试\r\n4.内嵌Tomcat容器\r\n5.避免了大量的Maven导入和各种版本的冲突\r\n# SpringBoot的核心注解\r\n@SpringBootApplication是SpringBoot的核心注解，主要组合包含了以下3个注解：\r\n1.@SpringBootConfiguration:组合了@Configuration注解，实现配置文件的功能\r\n2.EnableAutoConfiguration:打开自动配置的功能，也可以关闭某个自动配置的选项 eg:@SpringBootApplication(exclude   = {DataSourceAutoConfiguration.class})\r\n3.@ComponentScan：Spring组件扫描\r\n# SpringBoot的核心功能\r\n1.SpringBoot可以以jar包的形式直接运行，好处是节省服务器资源\r\n2.提供starter简化Maven配置：在SpringBoot项目中为我们提供了许多的spring-boot-starter-xxx的项目(起步依赖)，我们   导入指定的这些项目的坐标，就会自动导入和该模块相关的依赖包\r\n3.最重要的一个功能，自动装配，大量减少我们需要进行的配置\r\n# 开启SpringBoot特性有哪几种方式？\r\n1.继承spring-boot-starter-parent项目\r\n2.导入spring-boot-dependencies项目依赖\r\n# SpringBoot事务的使用\r\nSpringBoot的事务很简单，首先使用注解@EnableTransactionManagement开启事务，然后在Service方法上添加注解@Transaction即可\r\n# 你使用了哪些starter maven依赖项\r\n1.spring-boot-starter-web：web支持\r\n2.spring-boot-starter-redis: redis数据库支持\r\n3.mybatis-spring-boot-starter: mybatis框架支持\r\n# SpringBoot如何实现打包\r\n控制台输入：mvn clean package\r\nclean是清空yi&#39;c&#39;cun&#39;z	<h1>SpringBoot是什么？</h1>\n<p>SpringBoot是Spring的一个脚手架，简化了Spring开发的难度，不用再写繁重的配置，提供了各种启动器，大大提高了开发效率</p>\n<h1>SpringBoot有哪些优点？</h1>\n<p>1.搭建项目快<br>\n2.SpringBoot的核心理念就是：约定大于配置，不需要再做大量的配置<br>\n3.让测试变得简单，内置了JUnit,SpringBoot Test等测试框架，方便测试<br>\n4.内嵌Tomcat容器<br>\n5.避免了大量的Maven导入和各种版本的冲突</p>\n<h1>SpringBoot的核心注解</h1>\n<p>@SpringBootApplication是SpringBoot的核心注解，主要组合包含了以下3个注解：<br>\n1.@SpringBootConfiguration:组合了@Configuration注解，实现配置文件的功能<br>\n2.EnableAutoConfiguration:打开自动配置的功能，也可以关闭某个自动配置的选项 eg:@SpringBootApplication(exclude   = {DataSourceAutoConfiguration.class})<br>\n3.@ComponentScan：Spring组件扫描</p>\n<h1>SpringBoot的核心功能</h1>\n<p>1.SpringBoot可以以jar包的形式直接运行，好处是节省服务器资源<br>\n2.提供starter简化Maven配置：在SpringBoot项目中为我们提供了许多的spring-boot-starter-xxx的项目(起步依赖)，我们   导入指定的这些项目的坐标，就会自动导入和该模块相关的依赖包<br>\n3.最重要的一个功能，自动装配，大量减少我们需要进行的配置</p>\n<h1>开启SpringBoot特性有哪几种方式？</h1>\n<p>1.继承spring-boot-starter-parent项目<br>\n2.导入spring-boot-dependencies项目依赖</p>\n<h1>SpringBoot事务的使用</h1>\n<p>SpringBoot的事务很简单，首先使用注解@EnableTransactionManagement开启事务，然后在Service方法上添加注解@Transaction即可</p>\n<h1>你使用了哪些starter maven依赖项</h1>\n<p>1.spring-boot-starter-web：web支持<br>\n2.spring-boot-starter-redis: redis数据库支持<br>\n3.mybatis-spring-boot-starter: mybatis框架支持</p>\n<h1>SpringBoot如何实现打包</h1>\n<p>控制台输入：mvn clean package<br>\nclean是清空yi'c'cun'z</p>\n	18	0	0	f	2021-04-22 17:33:09.018535	2021-04-23 23:03:14.269064	1	https://cdn.zhoupb.com/image/generate/6f4e3c2974659bd4b88f109355101cc5.png	SpringBoot是什么？SpringBoot是Spring的一个脚手架，简化了Spring开发的难度，不用再写繁重的配置，提供了各种启动器，大大提高了开发效率SpringBoot有哪些优点？1.搭建项目快2.SpringBoot的核心理念就是：约定大于配置，不需要再做大量的配置3.让测试变得简单，内置了JUnit,SpringBootTest等测试框架，方便测试4.内嵌Tomcat容器5.避免了大量的Maven导入和各种版本的冲突SpringBoot的核心注解@SpringBootApplication是SpringBoot的核心注解，主要组合包含了以下3个注解：1.@SpringBootConfiguration:组合了@Configuration注解，实现配置文件的功能2.EnableAutoConfiguration:打开自动配置的功能，也可以关闭某个自动配置的选项eg:@SpringBootApplication(exclude={DataSourceAutoConfiguration.class})3.@ComponentScan：Spring组件扫描SpringBoot的核心功能1.SpringBoot可以以jar包的形式直接运行，好处是节省服务器资源2.提供starter简化Maven配置：在SpringBoot项目中为我们提供了许多的spring-boot-starter-xxx的项目(起步依赖)，我们导入指定的这些项目的坐标，就会自动导入和该模块相关的依赖包3.最重要的一个功能，自动装配，大量减少我们需要进行的配置开启SpringBoot特性有哪几种方式？1.继承spring-boot-starter-parent项目2.导入spring-boot-dependencies项目依赖SpringBoot事务的使用SpringBoot的事务很简单，首先使用注解@EnableTransactionManagement开启事务，然后在Service方法上添加注解@Transaction即可你使用了哪些startermaven依赖项1.spring-boot-starter-web：web支持2.spring-boot-starter-redis:redis数据库支持3.mybatis-spring-boot-starter:mybatis框架支持SpringBoot如何实现打包控制台输入：mvncleanpackageclean是清空yi'c'cun'z
\.


--
-- Data for Name: blog_reply; Type: TABLE DATA; Schema: public; Owner: community
--

COPY public.blog_reply (id, content_markdown, content_html, parent_id, vote_count, deleted, create_time, update_time, user_id, blog_id) FROM stdin;
1	谢谢，正有用😘	<p>谢谢，正有用😘</p>\n	-1	0	f	2021-04-22 23:51:53.071693	2021-04-22 23:51:53.071693	1	15
2	感谢！！	<p>感谢！！</p>\n	-1	0	t	2021-04-22 23:52:50.045	2021-04-23 17:06:08.695732	3	15
7	t	<p>t</p>\n	-1	0	t	2021-04-23 23:01:28.818593	2021-04-23 23:01:55.459364	1	14
6	2	<p>2</p>\n	-1	0	t	2021-04-23 23:01:00.473871	2021-04-23 23:02:26.639526	1	1
5	2	<p>2</p>\n	-1	0	t	2021-04-23 22:57:08.799391	2021-04-23 23:02:32.502119	1	1
4	test	<p>test</p>\n	-1	0	t	2021-04-23 22:56:51.137418	2021-04-23 23:02:34.20044	1	1
8	2	<p>2</p>\n	-1	0	t	2021-04-23 23:02:13.997886	2021-04-23 23:02:44.349526	1	14
9	2	<p>2</p>\n	-1	0	t	2021-04-23 23:02:59.789797	2021-04-23 23:03:14.269064	1	1
10	2	<p>2</p>\n	-1	0	t	2021-04-23 23:03:07.604411	2021-04-23 23:03:21.124691	1	14
3	test\n## 2	<p>test</p>\n<h2>2</h2>\n	-1	1	t	2021-04-23 22:55:33.540881	2021-04-23 23:10:59.895423	1	1
\.


--
-- Data for Name: blog_vote; Type: TABLE DATA; Schema: public; Owner: community
--

COPY public.blog_vote (id, blog_id, reply_id, is_up, deleted, create_time, update_time, user_id) FROM stdin;
1	12	-1	t	t	2021-04-22 23:41:25.795691	2021-04-22 23:41:25.795691	1
2	12	-1	t	t	2021-04-22 23:41:30.488563	2021-04-22 23:41:32.490641	1
3	12	-1	t	t	2021-04-22 23:41:43.734642	2021-04-22 23:41:43.734642	1
4	12	-1	f	t	2021-04-22 23:41:45.53631	2021-04-22 23:41:45.53631	1
5	12	-1	t	t	2021-04-22 23:41:50.77269	2021-04-22 23:41:50.77269	1
6	12	-1	f	t	2021-04-22 23:41:53.088401	2021-04-22 23:41:53.088401	1
7	12	-1	f	t	2021-04-22 23:42:01.478602	2021-04-22 23:42:04.929444	1
8	12	-1	t	t	2021-04-22 23:42:06.715779	2021-04-22 23:42:06.715779	1
9	12	-1	f	t	2021-04-23 22:53:35.823312	2021-04-23 22:53:35.823312	1
10	12	-1	t	t	2021-04-23 22:53:39.371891	2021-04-23 22:53:39.371891	1
11	12	-1	f	t	2021-04-23 22:53:43.13822	2021-04-23 22:53:43.13822	1
12	-1	3	t	f	2021-04-23 22:55:37.804265	2021-04-23 22:55:37.804265	1
13	12	-1	t	f	2021-04-23 23:01:18.869759	2021-04-23 23:01:18.869759	1
14	13	-1	t	f	2021-04-23 23:01:42.059433	2021-04-23 23:01:42.059433	1
\.


--
-- Data for Name: discussion; Type: TABLE DATA; Schema: public; Owner: community
--

COPY public.discussion (read_count, vote_count, reply_count, deleted, update_time, user_id, id, create_time, title, description, content_markdown, content_html, last_reply_id) FROM stdin;
1	0	0	f	2021-04-22 23:09:07.188762	1	2	2021-04-22 23:09:03.557831	django中加入pytorch模型	在django的views视图中加载pytorch模型，但是提示没有自己写的modeldefinsert(request):ifrequest.method==&quot;POST&quot;:username=request.POST.get(&quot;username&quot;)text_ints=Init.converts(username)new_text_ints=Init.reset_text([text_ints],seq_len=200)#注意这里要添加一个[]，因为，reset_text处理的二维数据text_tensor=torch.from_numpy(new_text_ints)load_model=torch.load(&quot;E:/Code/Pycharm/Django/NLP/main_other.pkl&quot;)device=&quot;cuda&quot;iftorch.cuda.is_available()else&quot;cpu&quot;batch_size=text_tensor.size(0)#这里是1hs=load_model.init_hidden(batch_size)#初始化隐藏状态text_tensor=text_tensor.to(device)pred,hs=load_model(text_tensor,hs)#判断pred=torch.round(pred)pred=&quot;评论正面&quot;ifpred==1else&quot;评论负面&quot;twz=models.message.objects.create(username=username,pred=pred)twz.save()returnredirect(&#x27;show/&#x27;)returnrender(request,&quot;insert.html&quot;)	在django的views视图中加载pytorch模型，但是提示没有自己写的model\n![image.png](https://cdn.zhoupb.com/image/upload/7486209c601e6909919defd1d7c66d03.png)\n![image.png](https://cdn.zhoupb.com/image/upload/e2e7b3026e56defe179dd4907d9f1d1f.png)\n```python\ndef insert(request):\n    if request.method == "POST":\n        username = request.POST.get("username")\n        text_ints = Init.converts(username)\n        new_text_ints = Init.reset_text([text_ints], seq_len=200)  # 注意这里要添加一个[]，因为，reset_text处理的二维数据\n        text_tensor = torch.from_numpy(new_text_ints)\n        load_model = torch.load("E:/Code/Pycharm/Django/NLP/main_other.pkl")\n        device = "cuda" if torch.cuda.is_available() else "cpu"\n        batch_size = text_tensor.size(0)  # 这里是1\n        hs = load_model.init_hidden(batch_size)  # 初始化隐藏状态\n        text_tensor = text_tensor.to(device)\n        pred, hs = load_model(text_tensor, hs)  # 判断\n        pred = torch.round(pred)\n        pred = "评论正面" if pred==1 else "评论负面"\n        twz = models.message.objects.create(username=username,pred=pred)\n        twz.save()\n        return redirect('show/')\n    return render(request, "insert.html")\n```	<p>在django的views视图中加载pytorch模型，但是提示没有自己写的model<br>\n<img src="https://cdn.zhoupb.com/image/upload/7486209c601e6909919defd1d7c66d03.png" alt="image.png"><br>\n<img src="https://cdn.zhoupb.com/image/upload/e2e7b3026e56defe179dd4907d9f1d1f.png" alt="image.png"></p>\n<pre class="code-block"><code class="code hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">insert</span>(<span class="hljs-params">request</span>):</span><br />    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&quot;POST&quot;</span>:<br />        username = request.POST.get(<span class="hljs-string">&quot;username&quot;</span>)<br />        text_ints = Init.converts(username)<br />        new_text_ints = Init.reset_text([text_ints], seq_len=<span class="hljs-number">200</span>)  <span class="hljs-comment"># 注意这里要添加一个[]，因为，reset_text处理的二维数据</span><br />        text_tensor = torch.from_numpy(new_text_ints)<br />        load_model = torch.load(<span class="hljs-string">&quot;E:/Code/Pycharm/Django/NLP/main_other.pkl&quot;</span>)<br />        device = <span class="hljs-string">&quot;cuda&quot;</span> <span class="hljs-keyword">if</span> torch.cuda.is_available() <span class="hljs-keyword">else</span> <span class="hljs-string">&quot;cpu&quot;</span><br />        batch_size = text_tensor.size(<span class="hljs-number">0</span>)  <span class="hljs-comment"># 这里是1</span><br />        hs = load_model.init_hidden(batch_size)  <span class="hljs-comment"># 初始化隐藏状态</span><br />        text_tensor = text_tensor.to(device)<br />        pred, hs = load_model(text_tensor, hs)  <span class="hljs-comment"># 判断</span><br />        pred = torch.<span class="hljs-built_in">round</span>(pred)<br />        pred = <span class="hljs-string">&quot;评论正面&quot;</span> <span class="hljs-keyword">if</span> pred==<span class="hljs-number">1</span> <span class="hljs-keyword">else</span> <span class="hljs-string">&quot;评论负面&quot;</span><br />        twz = models.message.objects.create(username=username,pred=pred)<br />        twz.save()<br />        <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&#x27;show/&#x27;</span>)<br />    <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;insert.html&quot;</span>)<br /></code></pre>\n	\N
14	0	1	f	2021-04-24 08:44:08.160013	3	15	2021-04-23 08:27:24.705	类.class作为参数是干嘛的？哪位大佬讲明白点	类.class是反射获取这个类的类对象，然后可以通过这个类对象new对象，他作为参数是干嘛的？例如下面这个参数干啥用的	类.class是反射获取这个类的类对象，然后可以通过这个类对象new对象，他作为参数是干嘛的？例如下面这个参数干啥用的\r\n![image.png](https://cdn.zhoupb.com/image/upload/edd8049d93c0ff802ea9b7ca9db7d243.png)\r\n	<p>类.class是反射获取这个类的类对象，然后可以通过这个类对象new对象，他作为参数是干嘛的？例如下面这个参数干啥用的<br>\r\n<img src="https://cdn.zhoupb.com/image/upload/edd8049d93c0ff802ea9b7ca9db7d243.png" alt="image.png"></p>\r\n	4
2	0	0	f	2021-04-22 23:09:17.453784	1	1	2021-04-22 23:07:58.61603	c++编程题求大佬救救孩子	有一个工厂有三类人：固定工资工人A、计件工人B、计时工人C。构建基类：工厂员工Worker类（包括三个成员变量：名字（长度小于60的字符串）、住址(长度小于210的字符串)、工资（longint）；包括成员函数：构造与析构函数（在构造函数中对名字与住址赋值）、输出函数printInfo()用于输出成员的名字、住址、工资）构建派生类：固定工资工人A对应派生类AWorker计件工人B对应派生类BWorker（除了从基类中继承的成员函数与成员变量，新增成员变量：(longint)数量totalNumbers和(longint)每件提成every新增成员函数：getSalary()用B的工资计算方式对工资赋值）计时工人C对应派生类CWorker（除了从基类中继承的成员函数与成员变量，新增成员变量：(longint)时间totalHours和(longint)每小时工资every新增成员函数：getSalary()用C的工资计算方式对工资赋值）三类员工的工资计算方法不同：固定工资工人，每个月领的工资是不变的(int)；计件工人根据生产的产品数量计算工资：数量(int)*每件提成(int)；计时工人根据工作的时间长短计算工资：时长（int）*每小时工资(int)。在main函数中根据输入创建不同的员工，并依次输出每个员工的名字、住址、工资等信息。要求使用多态。	有一个工厂有三类人：固定工资工人A、计件工人B、计时工人C。\r\n\r\n \r\n\r\n构建基类：工厂员工Worker类（包括三个成员变量：名字（长度小于60的字符串）、住址(长度小于210的字符串)、工资（long int）；包括成员函数：构造与析构函数（在构造函数中对名字与住址赋值）、输出函数printInfo()用于输出成员的名字、住址、工资）\r\n\r\n \r\n\r\n构建派生类：\r\n\r\n \r\n\r\n固定工资工人A对应派生类AWorker\r\n\r\n \r\n\r\n计件工人B对应派生类BWorker（除了从基类中继承的成员函数与成员变量，新增成员变量：(long int)数量totalNumbers和(long int)每件提成every   新增成员函数：getSalary()用B的工资计算方式对工资赋值）\r\n\r\n \r\n\r\n计时工人C对应派生类CWorker（除了从基类中继承的成员函数与成员变量，新增成员变量：(long int)时间totalHours和(long int)每小时工资every   新增成员函数：getSalary()用C的工资计算方式对工资赋值）\r\n\r\n三类员工的工资计算方法不同：\r\n\r\n固定工资工人，每个月领的工资是不变的(int)；\r\n\r\n \r\n\r\n计件工人根据生产的产品数量计算工资：数量(int)*每件提成(int)；\r\n\r\n \r\n\r\n计时工人根据工作的时间长短计算工资：时长（int）*每小时工资(int)。\r\n\r\n在main函数中根据输入创建不同的员工，并依次输出每个员工的名字、住址、工资等信息。\r\n\r\n**要求使用多态。**	<p>有一个工厂有三类人：固定工资工人A、计件工人B、计时工人C。</p>\n<p>构建基类：工厂员工Worker类（包括三个成员变量：名字（长度小于60的字符串）、住址(长度小于210的字符串)、工资（long int）；包括成员函数：构造与析构函数（在构造函数中对名字与住址赋值）、输出函数printInfo()用于输出成员的名字、住址、工资）</p>\n<p>构建派生类：</p>\n<p>固定工资工人A对应派生类AWorker</p>\n<p>计件工人B对应派生类BWorker（除了从基类中继承的成员函数与成员变量，新增成员变量：(long int)数量totalNumbers和(long int)每件提成every   新增成员函数：getSalary()用B的工资计算方式对工资赋值）</p>\n<p>计时工人C对应派生类CWorker（除了从基类中继承的成员函数与成员变量，新增成员变量：(long int)时间totalHours和(long int)每小时工资every   新增成员函数：getSalary()用C的工资计算方式对工资赋值）</p>\n<p>三类员工的工资计算方法不同：</p>\n<p>固定工资工人，每个月领的工资是不变的(int)；</p>\n<p>计件工人根据生产的产品数量计算工资：数量(int)*每件提成(int)；</p>\n<p>计时工人根据工作的时间长短计算工资：时长（int）*每小时工资(int)。</p>\n<p>在main函数中根据输入创建不同的员工，并依次输出每个员工的名字、住址、工资等信息。</p>\n<p><strong>要求使用多态。</strong></p>\n	\N
2	0	0	f	2021-04-22 23:36:16.192302	1	5	2021-04-22 23:11:59.21307	onmousemove事件触发一次后无法再触发	&lt;!DOCTYPEhtml&gt;&lt;html&gt;&lt;head&gt;&lt;metacharset=&quot;utf-8&quot;&gt;&lt;title&gt;&lt;/title&gt;&lt;styletype=&quot;text/css&quot;&gt;.w{position:absolute;margin:auto;left:20%;top:35%;}.t{width:160px;height:220px;background-color:pink;position:fixed;top:20px;}.b{width:180px;height:80px;background-color:#7FFFD4;}&lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;div&gt;&lt;divclass=&quot;w&quot;&gt;&lt;divclass=&quot;t&quot;id=&quot;t&quot;&gt;&lt;/div&gt;&lt;divclass=&quot;b&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;scripttype=&quot;text/javascript&quot;&gt;vart=document.getElementById(&#x27;t&#x27;)varboxC,mouseC;t.onmousedown=function(){boxC=t.style.topmouseC=event.clientYt.onmousemove=function(){//t.style.top=event.clientY-100+&#x27;px&#x27;t.style.top=boxC+(event.clientY-mouseC)+&#x27;px&#x27;}}t.onmouseup=function(){t.onmousemove=null}&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;前端小白，想写一个拖拽效果，但是拖拽一次后就无法再拖拽	```html\r\n<!DOCTYPE html>\r\n<html>\r\n\t<head>\r\n\t\t<meta charset="utf-8">\r\n\t\t<title></title>\r\n\t\t<style type="text/css">\r\n\t\t\t.w{\r\n\t\t\t\tposition: absolute;margin: auto;left: 20%;top: 35%;\r\n\t\t\t}\r\n\t\t\t.t{\r\n\t\t\t\twidth: 160px;\r\n\t\t\t\theight: 220px;\r\n\t\t\t\tbackground-color: pink;\r\n\t\t\t\tposition: fixed;top: 20px;\r\n\t\t\t}\r\n\t\t\t.b{\r\n\t\t\t\twidth: 180px;\r\n\t\t\t\theight: 80px;\r\n\t\t\t\tbackground-color: #7FFFD4;\r\n\t\t\t}\r\n\t\t</style>\r\n\t</head>\r\n\t<body>\r\n\t\t<div>\r\n\t\t\t<div class="w">\r\n\t\t\t\t<div class="t" id="t" ></div>\r\n\t\t\t\t<div class="b"></div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t<script type="text/javascript">\r\n\t\t\tvar t = document.getElementById('t')\r\n\t\t\r\n\t\t\tvar boxC,mouseC;\r\n\t\t\tt.onmousedown = function () {\r\n\t\t\t\t\r\n\t\t\t\tboxC = t.style.top\r\n\t\t\t\tmouseC = event.clientY\r\n\t\t\t\t\r\n\t\t\t\tt.onmousemove = function(){\r\n\t\t\t\t\r\n\t\t\t\t\t// t.style.top = event.clientY - 100 + 'px'\r\n\t\t\t\t\tt.style.top = boxC + (event.clientY - mouseC) + 'px'\r\n\t\t\t\t\r\n\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\tt.onmouseup = function(){\r\n\t\t\t\tt.onmousemove = null\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t</script>\r\n\t</body>\r\n</html>\r\n```\r\n前端小白，想写一个拖拽效果，但是拖拽一次后就无法再拖拽	<pre class="code-block"><code class="code hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br /><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br />\t<span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br />\t\t<span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br />\t\t<span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br />\t\t<span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="css"><br />\t\t\t<span class="hljs-selector-class">.w</span>{<br />\t\t\t\t<span class="hljs-attribute">position</span>: absolute;<span class="hljs-attribute">margin</span>: auto;<span class="hljs-attribute">left</span>: <span class="hljs-number">20%</span>;<span class="hljs-attribute">top</span>: <span class="hljs-number">35%</span>;<br />\t\t\t}<br />\t\t\t<span class="hljs-selector-class">.t</span>{<br />\t\t\t\t<span class="hljs-attribute">width</span>: <span class="hljs-number">160px</span>;<br />\t\t\t\t<span class="hljs-attribute">height</span>: <span class="hljs-number">220px</span>;<br />\t\t\t\t<span class="hljs-attribute">background-color</span>: pink;<br />\t\t\t\t<span class="hljs-attribute">position</span>: fixed;<span class="hljs-attribute">top</span>: <span class="hljs-number">20px</span>;<br />\t\t\t}<br />\t\t\t<span class="hljs-selector-class">.b</span>{<br />\t\t\t\t<span class="hljs-attribute">width</span>: <span class="hljs-number">180px</span>;<br />\t\t\t\t<span class="hljs-attribute">height</span>: <span class="hljs-number">80px</span>;<br />\t\t\t\t<span class="hljs-attribute">background-color</span>: <span class="hljs-number">#7FFFD4</span>;<br />\t\t\t}<br />\t\t</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br />\t<span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br />\t<span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br />\t\t<span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br />\t\t\t<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;w&quot;</span>&gt;</span><br />\t\t\t\t<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;t&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;t&quot;</span> &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br />\t\t\t\t<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;b&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br />\t\t\t<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br />\t\t<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br />\t\t<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"><br />\t\t\t<span class="hljs-keyword">var</span> t = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;t&#x27;</span>)<br />\t\t<br />\t\t\t<span class="hljs-keyword">var</span> boxC,mouseC;<br />\t\t\tt.onmousedown = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{<br />\t\t\t\t<br />\t\t\t\tboxC = t.style.top<br />\t\t\t\tmouseC = event.clientY<br />\t\t\t\t<br />\t\t\t\tt.onmousemove = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{<br />\t\t\t\t<br />\t\t\t\t\t<span class="hljs-comment">// t.style.top = event.clientY - 100 + &#x27;px&#x27;</span><br />\t\t\t\t\tt.style.top = boxC + (event.clientY - mouseC) + <span class="hljs-string">&#x27;px&#x27;</span><br />\t\t\t\t<br />\t\t\t\t\t<br />\t\t\t\t}<br />\t\t\t\t<br />\t\t\t}<br />\t\t\tt.onmouseup = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{<br />\t\t\t\tt.onmousemove = <span class="hljs-literal">null</span><br />\t\t\t\t<br />\t\t\t}<br />\t\t</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br />\t<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br /><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br /></code></pre>\r\n<p>前端小白，想写一个拖拽效果，但是拖拽一次后就无法再拖拽</p>\r\n	\N
0	0	0	f	2021-04-23 08:10:24.589	2	7	2021-04-23 08:10:24.589	JS字符串转gb2312编码出现了问题	在将字符串转gb2312编码出现了问题，比如这个字符串“一体机/小组6”，编码得到这个“%D2%BB%CC%E5%BB%FA%2F%D0%A1%D7%E96”，然后我用这串解码的时候，报错了用的是这个方法：https://blog.csdn.net/bamuai7645/article/details/101082559项目好急，然后又有bug，求助各位大佬！！！	在将字符串转gb2312编码出现了问题，比如这个字符串“一体机/小组6”，编码得到这个“%D2%BB%CC%E5%BB%FA%2F%D0%A1%D7%E96”，然后我用这串解码的时候，报错了\r\n用的是这个方法：https://blog.csdn.net/bamuai7645/article/details/101082559\r\n项目好急，然后又有bug，求助各位大佬！！！	<p>在将字符串转gb2312编码出现了问题，比如这个字符串“一体机/小组6”，编码得到这个“%D2%BB%CC%E5%BB%FA%2F%D0%A1%D7%E96”，然后我用这串解码的时候，报错了<br>\n用的是这个方法：<a href="https://blog.csdn.net/bamuai7645/article/details/101082559">https://blog.csdn.net/bamuai7645/article/details/101082559</a><br>\n项目好急，然后又有bug，求助各位大佬！！！</p>\n	\N
3	0	0	f	2021-04-23 22:04:10.20627	1	3	2021-04-22 23:10:00.657443	为什么这个for循环会错误？	#include&lt;stdio.h&gt;#include&lt;stdlib.h&gt;#defineok1#defineerror0#definemaxsize100typedefcharElemTypetypedefstruct//顺序表//{ElemTypedate[maxsize];//可以存放maxsize个ElemType类型的数据intlength;//用以记录表的长度}SqList;//结构体类型名voidCreatList_Sq(SqList*&amp;L,ElemTypea[],intn)//为顺序表赋值为长度为n的数组{for(i=0;i&lt;n;i++){L-&gt;date[i]=a[i];}L-&gt;length=n;//顺序表长度为n}voidInitList(SqList*L)//初始化顺序表{L=(SqList*)malloc(sizeof(SqList));//分配空间L-&gt;length=0;}voidmain(){SqListL1;InitList(L1);ElemTypea[maxsize];printf(&quot;你要输入几个元素进顺序表/n&quot;);inti,n;scanf(&quot;%d/n&quot;,&amp;n);printf(&quot;依次输入元素&quot;);for(i=0;i&lt;n;i++){scanf(&quot;%c/n&quot;,&amp;a[i]);}CreatList_Sq(L1,a,n);}我输入的n为5，但是我运行的时候for循环只让我输入了两个字符就结束了不知道为什么？？	```c\n#include <stdio.h>\n#include <stdlib.h>\n#define ok 1\n#define error 0\n#define maxsize 100\ntypedef  char ElemType\n\ntypedef struct  //顺序表//\n{\n  ElemType date[maxsize];//可以存放maxsize个ElemType类型的数据\n  int length;//用以记录表的长度\n}SqList;//结构体类型名\n\nvoid CreatList_Sq(SqList *&L,ElemType a[],int n)//为顺序表赋值为长度为n的数组\n{\n    for(i=0;i<n;i++)\n       {\n         L->date[i]=a[i];\n       }\n    L->length=n;//顺序表长度为n\n}\n\nvoid InitList(SqList *L)          //初始化顺序表\n{\n  L=(SqList *)malloc(sizeof(SqList));//分配空间\n  L->length =0;\n}\n\nvoid main()\n{\n    SqList L1;\n    InitList(L1);\n    ElemType a[maxsize];\n    printf("你要输入几个元素进顺序表/n");\n    int i,n;\n    scanf("%d/n",&n);\n    printf("依次输入元素");\n    for(i=0;i<n;i++)\n      {\n        scanf("%c/n",&a[i]);\n      }\n    CreatList_Sq(L1,a,n);\n\n}\n```\n我输入的n为5，但是我运行的时候for循环只让我输入了两个字符就结束了不知道为什么？？	<pre class="code-block"><code class="code hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br /><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br /><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ok 1</span><br /><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> <span class="hljs-meta-keyword">error</span> 0</span><br /><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> maxsize 100</span><br /><span class="hljs-keyword">typedef</span>  <span class="hljs-keyword">char</span> ElemType<br /><br /><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>  //顺序表//<br />{</span><br />  ElemType date[maxsize];<span class="hljs-comment">//可以存放maxsize个ElemType类型的数据</span><br />  <span class="hljs-keyword">int</span> length;<span class="hljs-comment">//用以记录表的长度</span><br />}SqList;<span class="hljs-comment">//结构体类型名</span><br /><br /><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">CreatList_Sq</span><span class="hljs-params">(SqList *&amp;L,ElemType a[],<span class="hljs-keyword">int</span> n)</span><span class="hljs-comment">//为顺序表赋值为长度为n的数组</span><br /></span>{<br />    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;n;i++)<br />       {<br />         L-&gt;date[i]=a[i];<br />       }<br />    L-&gt;length=n;<span class="hljs-comment">//顺序表长度为n</span><br />}<br /><br /><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">InitList</span><span class="hljs-params">(SqList *L)</span>          <span class="hljs-comment">//初始化顺序表</span><br /></span>{<br />  L=(SqList *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(SqList));<span class="hljs-comment">//分配空间</span><br />  L-&gt;length =<span class="hljs-number">0</span>;<br />}<br /><br /><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span><br /></span>{<br />    SqList L1;<br />    InitList(L1);<br />    ElemType a[maxsize];<br />    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;你要输入几个元素进顺序表/n&quot;</span>);<br />    <span class="hljs-keyword">int</span> i,n;<br />    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d/n&quot;</span>,&amp;n);<br />    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;依次输入元素&quot;</span>);<br />    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;n;i++)<br />      {<br />        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%c/n&quot;</span>,&amp;a[i]);<br />      }<br />    CreatList_Sq(L1,a,n);<br /><br />}<br /></code></pre>\n<p>我输入的n为5，但是我运行的时候for循环只让我输入了两个字符就结束了不知道为什么？？</p>\n	\N
5	0	0	f	2021-04-23 23:10:32.976415	2	6	2021-04-23 08:09:40.185	输入一个数n（n<=10000）,输出第n个质数，要求运行时间不超过1000毫秒	求大佬帮忙，注意时间一定要控制在1秒内	求大佬帮忙，注意时间一定要控制在1秒内	<p>求大佬帮忙，注意时间一定要控制在1秒内</p>\r\n	\N
0	0	0	f	2021-04-23 08:14:21.966	2	10	2021-04-23 08:14:21.966	非常简单的一个问题，Java中怎么用不了var	看coreJava的时候说从Java10开始可以用var定义局部变量，原文如下：StartingwithJava10,youdonotneedtodeclarethetypesoflocalvariablesiftheycanbeinferredfromtheinitialvalue.Simplyusethekeywordvarinsteadofthetype:varvacationDays=12;//vacationDaysisanintvargreeting=“Hello”;//greetingisaString我试了一下，却不行，不知道有什么讲究？我这样写的publicclasstest1{publicstaticvoidmain(String[]args){varn=100;System.out.println(n);}}编译提示：Warning:(3,13)java:从发行版10开始，‘var’是受限制的本地变量类型，无法用于类型声明，也无法用作数组的元素类型Error:(3,9)java:找不到符号符号:类var位置:类test1	看core Java 的时候说从Java10开始可以用var定义局部变量，原文如下：\r\n\r\nStarting with Java 10, you do not need to declare the types of local variables if they can be inferred from the initial value. Simply use the keyword varinstead of the type:\r\nvar vacationDays = 12; // vacationDays is an int\r\nvar greeting = "Hello"; // greeting is a String\r\n\r\n我试了一下，却不行，不知道有什么讲究？我这样写的\r\n\r\npublic class test1 {\r\n    public static void main(String[] args){\r\n        var n = 100;\r\n        System.out.println(n);\r\n    }\r\n}\r\n\r\n编译提示：\r\nWarning:(3, 13) java: 从发行版 10 开始，'var' 是受限制的本地变量类型，无法用于类型声明，也无法用作数组的元素类型\r\nError:(3, 9) java: 找不到符号\r\n  符号:   类 var\r\n  位置: 类 test1	<p>看core Java 的时候说从Java10开始可以用var定义局部变量，原文如下：</p>\n<p>Starting with Java 10, you do not need to declare the types of local variables if they can be inferred from the initial value. Simply use the keyword varinstead of the type:<br>\nvar vacationDays = 12; // vacationDays is an int<br>\nvar greeting = “Hello”; // greeting is a String</p>\n<p>我试了一下，却不行，不知道有什么讲究？我这样写的</p>\n<p>public class test1 {<br>\npublic static void main(String[] args){<br>\nvar n = 100;<br>\nSystem.out.println(n);<br>\n}<br>\n}</p>\n<p>编译提示：<br>\nWarning:(3, 13) java: 从发行版 10 开始，‘var’ 是受限制的本地变量类型，无法用于类型声明，也无法用作数组的元素类型<br>\nError:(3, 9) java: 找不到符号<br>\n符号:   类 var<br>\n位置: 类 test1</p>\n	\N
0	0	0	f	2021-04-23 08:24:49.652	3	13	2021-04-23 08:24:49.652	往数据库中插入多条数据，一对多	需求是这样的，创建一个部门，部门里有很多员工，一张表里插入新建的部门，另一张表里插入部门及其所有员工，大概是这样的效果表一：iddepartment1部门12部门2表二：iddepartmentemployee1部门1员工12部门1员工23部门1员工34部门2员工15部门2员工2用的baomidou.mybatisplus	需求是这样的，创建一个部门，部门里有很多员工，一张表里插入新建的部门，另一张表里插入部门及其所有员工，大概是这样的效果\r\n\r\n表一：\r\nid   department \r\n1         部门1\r\n2         部门2\r\n表二：\r\nid    department  employee\r\n1       部门1            员工1\r\n2       部门1            员工2\r\n3       部门1            员工3\r\n4       部门2            员工1\r\n5       部门2            员工2\r\n用的baomidou.mybatisplus	<p>需求是这样的，创建一个部门，部门里有很多员工，一张表里插入新建的部门，另一张表里插入部门及其所有员工，大概是这样的效果</p>\n<p>表一：<br>\nid   department<br>\n1         部门1<br>\n2         部门2<br>\n表二：<br>\nid    department  employee<br>\n1       部门1            员工1<br>\n2       部门1            员工2<br>\n3       部门1            员工3<br>\n4       部门2            员工1<br>\n5       部门2            员工2<br>\n用的baomidou.mybatisplus</p>\n	\N
0	0	0	f	2021-04-23 08:25:57.987	3	14	2021-04-23 08:25:57.987	关于继承（小白求助）	如图方框里的这句和ClientGUIextendsJFrame是一个意思吗？	![image.png](https://cdn.zhoupb.com/image/upload/3bc1e0ce94d687ddeb9ebb410b3ab73b.png)\n如图 方框里的这句和ClientGUI extends JFrame是一个意思吗？	<p><img src="https://cdn.zhoupb.com/image/upload/3bc1e0ce94d687ddeb9ebb410b3ab73b.png" alt="image.png"><br>\n如图 方框里的这句和ClientGUI extends JFrame是一个意思吗？</p>\n	\N
0	0	0	t	2021-04-23 17:07:34.654528	2	8	2021-04-23 08:12:07.103	请教大家一个java习题的思路，感觉好复杂的样子	java书上选择结构章节后，有一个课后习题，题目描述是下面这样的：这个选择结构是算不出来的吧。如果有别的思路，如循环和数组，大家也请指出，能解出来也行。	java书上选择结构章节后，有一个课后习题，题目描述是下面这样的：\n![image.png](https://cdn.zhoupb.com/image/upload/5aeba4a597891155bbddd27911f18c05.png)\n这个选择结构是算不出来的吧。如果有别的思路，如循环和数组，大家也请指出，能解出来也行。	<p>java书上选择结构章节后，有一个课后习题，题目描述是下面这样的：<br>\n<img src="https://cdn.zhoupb.com/image/upload/5aeba4a597891155bbddd27911f18c05.png" alt="image.png"><br>\n这个选择结构是算不出来的吧。如果有别的思路，如循环和数组，大家也请指出，能解出来也行。</p>\n	\N
1	0	0	f	2021-04-23 21:17:43.42184	3	11	2021-04-23 08:22:49.274	【求帮助】mysql连接Navciat成功，但连接eclipse一直显示失败	mysql连接Navciat成功，但连接eclipse一直显示失败，账号密码都没错	mysql连接Navciat成功，但连接eclipse一直显示失败，账号密码都没错\n![image.png](https://cdn.zhoupb.com/image/upload/f1e3656c9c94d7444d52d4b399a6a790.png)\n	<p>mysql连接Navciat成功，但连接eclipse一直显示失败，账号密码都没错<br>\n<img src="https://cdn.zhoupb.com/image/upload/f1e3656c9c94d7444d52d4b399a6a790.png" alt="image.png"></p>\n	\N
2	0	0	f	2021-04-23 23:12:02.776569	2	9	2021-04-23 08:13:15.532	问个基础问题byte类型	写了这么多年的程序，byte这个类型很少用。最近老写这个类型,一个byte是有8位，在c#里面如何获取这8位的数据。如何进行移位呢？	写了这么多年的程序，byte这个类型很少用。最近老写这个类型, 一个byte是有8位，在c#里面如何获取这8位的数据。如何进行移位呢？	<p>写了这么多年的程序，byte这个类型很少用。最近老写这个类型, 一个byte是有8位，在c#里面如何获取这8位的数据。如何进行移位呢？</p>\n	\N
7	0	0	f	2021-04-23 09:11:43.783393	1	4	2021-04-22 23:11:15.413252	想问一下大佬们，这个程序哪里出了问题	想问一下大佬们，这个程序哪里出了问题，导致我最后的结果不对，我感觉从Y，N输入就有问题，可我没找出来#include&lt;stdio.h&gt;intmain(){charsex,sports,diet;floatfaHeight,moHeight,chilHeight;printf(&quot;请输入您的性别，女性输F，男性输M：&quot;);sex=getchar();printf(&quot;请输入您父亲的身高（厘米）faHeight=，母亲的身高（厘米）moHeight=&quot;,faHeight,moHeight);scanf(&quot;%f%f&quot;,&amp;faHeight,&amp;moHeight);printf(&quot;您是否喜欢体育锻炼，“是”请输入Y,“不是”请输入N,%c\\n&quot;);sports=getchar();printf(&quot;您的饮食习惯是否健康，“是”请输入Y,“不是”请输入N,%c\\n&quot;);diet=getchar();if(sex==&#x27;M&#x27;){if(sports==&#x27;Y&#x27;&amp;&amp;diet==&#x27;Y&#x27;){chilHeight=(faHeight+moHeight)*0.54*(1+0.02+0.015);}elseif(sports==&#x27;Y&#x27;&amp;&amp;diet==&#x27;N&#x27;){chilHeight=(faHeight+moHeight)*0.54*(1+0.02);}elseif(sports==&#x27;N&#x27;&amp;&amp;diet==&#x27;Y&#x27;){chilHeight=(faHeight+moHeight)*0.54*(1+0.015);}elseif(sports==&#x27;N&#x27;&amp;&amp;diet==&#x27;N&#x27;){chilHeight=(faHeight+moHeight)*0.54;}printf(&quot;您未来的身高chilHeight=%f\\n&quot;,chilHeight);}elseif(sex==&#x27;F&#x27;){if(sports==&#x27;Y&#x27;&amp;&amp;diet==&#x27;Y&#x27;){chilHeight=((faHeight*0.923+moHeight)/2)*(1+0.02+0.015);}elseif(sports==&#x27;Y&#x27;&amp;&amp;diet==&#x27;N&#x27;){chilHeight=((faHeight*0.923+moHeight)/2)*(1+0.02);}elseif(sports==&#x27;N&#x27;&amp;&amp;diet==&#x27;Y&#x27;){chilHeight=((faHeight*0.923+moHeight)/2)*(1+0.015);}elseif(sports==&#x27;N&#x27;&amp;&amp;diet==&#x27;N&#x27;){chilHeight=((faHeight*0.923+moHeight)/2)*(1+0.02+0.015);}printf(&quot;您未来的身高chilHeight=%f\\n&quot;,chilHeight);}return0;}	### 想问一下大佬们，这个程序哪里出了问题，导致我最后的结果不对，我感觉从Y，N输入就有问题，可我没找出来\r\n```c\r\n#include <stdio.h>\r\nint main()\r\n{\r\n\tchar sex,sports,diet;\r\n\tfloat faHeight,moHeight,chilHeight;\r\n\t\tprintf("请输入您的性别，女性输F，男性输M：");\r\n\t\t\tsex=getchar();\r\n\t\tprintf("请输入您父亲的身高（厘米）faHeight=，母亲的身高（厘米）moHeight=",faHeight,moHeight);\r\n\t\t\tscanf("%f %f",&faHeight,&moHeight);\r\n\t\tprintf("您是否喜欢体育锻炼，“是”请输入Y,“不是”请输入N,%c\\n");\r\n\t\t\tsports=getchar();\r\n\t\tprintf("您的饮食习惯是否健康，“是”请输入Y,“不是”请输入N,%c\\n");\r\n\t\t\tdiet=getchar();\r\n\t\t\t\tif(sex=='M')\r\n\t\t\t\t{\r\n\t\t\t\t\tif(sports=='Y'&&diet=='Y')\r\n\t\t\t\t\t\t{chilHeight=(faHeight+moHeight)*0.54*(1+0.02+0.015);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\telse if(sports=='Y'&&diet=='N')\r\n\t\t\t\t\t\t{chilHeight=(faHeight+moHeight)*0.54*(1+0.02);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\telse if(sports=='N'&&diet=='Y')\r\n\t\t\t\t\t\t{chilHeight=(faHeight+moHeight)*0.54*(1+0.015);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\telse if(sports=='N'&&diet=='N')\r\n\t\t\t\t\t\t{chilHeight=(faHeight+moHeight)*0.54;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\tprintf("您未来的身高chilHeight=%f\\n",chilHeight);\r\n\t\t\t\t}\r\n\t\t\t\telse if(sex=='F')\r\n\t\t\t\t{\r\n\t\t\t\t\tif(sports=='Y'&&diet=='Y')\r\n\t\t\t\t\t\t{chilHeight=((faHeight*0.923+moHeight)/2)*(1+0.02+0.015);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\telse if(sports=='Y'&&diet=='N')\r\n\t\t\t\t\t\t{chilHeight=((faHeight*0.923+moHeight)/2)*(1+0.02);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\telse if(sports=='N'&&diet=='Y')\r\n\t\t\t\t\t\t{chilHeight=((faHeight*0.923+moHeight)/2)*(1+0.015);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\telse if(sports=='N'&&diet=='N')\r\n\t\t\t\t\t\t{chilHeight=((faHeight*0.923+moHeight)/2)*(1+0.02+0.015);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\tprintf("您未来的身高chilHeight=%f\\n",chilHeight);\r\n\t\t\t\t}\r\n\t\treturn 0;\r\n}\r\n```\r\n![image.png](https://cdn.zhoupb.com/image/upload/ef6c74b41d1e283798bb665d0dbca28a.png)\r\n	<h3>想问一下大佬们，这个程序哪里出了问题，导致我最后的结果不对，我感觉从Y，N输入就有问题，可我没找出来</h3>\r\n<pre class="code-block"><code class="code hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br /><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span><br /></span>{<br />\t<span class="hljs-keyword">char</span> sex,sports,diet;<br />\t<span class="hljs-keyword">float</span> faHeight,moHeight,chilHeight;<br />\t\t<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入您的性别，女性输F，男性输M：&quot;</span>);<br />\t\t\tsex=getchar();<br />\t\t<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入您父亲的身高（厘米）faHeight=，母亲的身高（厘米）moHeight=&quot;</span>,faHeight,moHeight);<br />\t\t\t<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%f %f&quot;</span>,&amp;faHeight,&amp;moHeight);<br />\t\t<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;您是否喜欢体育锻炼，“是”请输入Y,“不是”请输入N,%c\\n&quot;</span>);<br />\t\t\tsports=getchar();<br />\t\t<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;您的饮食习惯是否健康，“是”请输入Y,“不是”请输入N,%c\\n&quot;</span>);<br />\t\t\tdiet=getchar();<br />\t\t\t\t<span class="hljs-keyword">if</span>(sex==<span class="hljs-string">&#x27;M&#x27;</span>)<br />\t\t\t\t{<br />\t\t\t\t\t<span class="hljs-keyword">if</span>(sports==<span class="hljs-string">&#x27;Y&#x27;</span>&amp;&amp;diet==<span class="hljs-string">&#x27;Y&#x27;</span>)<br />\t\t\t\t\t\t{chilHeight=(faHeight+moHeight)*<span class="hljs-number">0.54</span>*(<span class="hljs-number">1</span>+<span class="hljs-number">0.02</span>+<span class="hljs-number">0.015</span>);<br />\t\t\t\t\t\t}<br />\t\t\t\t\t<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(sports==<span class="hljs-string">&#x27;Y&#x27;</span>&amp;&amp;diet==<span class="hljs-string">&#x27;N&#x27;</span>)<br />\t\t\t\t\t\t{chilHeight=(faHeight+moHeight)*<span class="hljs-number">0.54</span>*(<span class="hljs-number">1</span>+<span class="hljs-number">0.02</span>);<br />\t\t\t\t\t\t}<br />\t\t\t\t\t<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(sports==<span class="hljs-string">&#x27;N&#x27;</span>&amp;&amp;diet==<span class="hljs-string">&#x27;Y&#x27;</span>)<br />\t\t\t\t\t\t{chilHeight=(faHeight+moHeight)*<span class="hljs-number">0.54</span>*(<span class="hljs-number">1</span>+<span class="hljs-number">0.015</span>);<br />\t\t\t\t\t\t}<br />\t\t\t\t\t<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(sports==<span class="hljs-string">&#x27;N&#x27;</span>&amp;&amp;diet==<span class="hljs-string">&#x27;N&#x27;</span>)<br />\t\t\t\t\t\t{chilHeight=(faHeight+moHeight)*<span class="hljs-number">0.54</span>;<br />\t\t\t\t\t\t}<br />\t\t\t\t\t<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;您未来的身高chilHeight=%f\\n&quot;</span>,chilHeight);<br />\t\t\t\t}<br />\t\t\t\t<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(sex==<span class="hljs-string">&#x27;F&#x27;</span>)<br />\t\t\t\t{<br />\t\t\t\t\t<span class="hljs-keyword">if</span>(sports==<span class="hljs-string">&#x27;Y&#x27;</span>&amp;&amp;diet==<span class="hljs-string">&#x27;Y&#x27;</span>)<br />\t\t\t\t\t\t{chilHeight=((faHeight*<span class="hljs-number">0.923</span>+moHeight)/<span class="hljs-number">2</span>)*(<span class="hljs-number">1</span>+<span class="hljs-number">0.02</span>+<span class="hljs-number">0.015</span>);<br />\t\t\t\t\t\t}<br />\t\t\t\t\t<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(sports==<span class="hljs-string">&#x27;Y&#x27;</span>&amp;&amp;diet==<span class="hljs-string">&#x27;N&#x27;</span>)<br />\t\t\t\t\t\t{chilHeight=((faHeight*<span class="hljs-number">0.923</span>+moHeight)/<span class="hljs-number">2</span>)*(<span class="hljs-number">1</span>+<span class="hljs-number">0.02</span>);<br />\t\t\t\t\t\t}<br />\t\t\t\t\t<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(sports==<span class="hljs-string">&#x27;N&#x27;</span>&amp;&amp;diet==<span class="hljs-string">&#x27;Y&#x27;</span>)<br />\t\t\t\t\t\t{chilHeight=((faHeight*<span class="hljs-number">0.923</span>+moHeight)/<span class="hljs-number">2</span>)*(<span class="hljs-number">1</span>+<span class="hljs-number">0.015</span>);<br />\t\t\t\t\t\t}<br />\t\t\t\t\t<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(sports==<span class="hljs-string">&#x27;N&#x27;</span>&amp;&amp;diet==<span class="hljs-string">&#x27;N&#x27;</span>)<br />\t\t\t\t\t\t{chilHeight=((faHeight*<span class="hljs-number">0.923</span>+moHeight)/<span class="hljs-number">2</span>)*(<span class="hljs-number">1</span>+<span class="hljs-number">0.02</span>+<span class="hljs-number">0.015</span>);<br />\t\t\t\t\t\t}<br />\t\t\t\t\t<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;您未来的身高chilHeight=%f\\n&quot;</span>,chilHeight);<br />\t\t\t\t}<br />\t\t<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br />}<br /></code></pre>\r\n<p><img src="https://cdn.zhoupb.com/image/upload/ef6c74b41d1e283798bb665d0dbca28a.png" alt="image.png"></p>\r\n	\N
2	0	0	f	2021-04-23 09:56:09.495955	5	16	2021-04-23 09:32:38.331	请教map的用法	用map的values作为参数取另一个list,取得的表的数据list，怎么和原来的key匹配？比如有一个aMap＜akey，avalue＞，然用aMap.values取得所有avalue，作为参数调用其他的方法取回一个表的实体list，这个list怎么和akey匹配起来，作成另一个bMap＜akey，表的实体＞？谢谢？	用map的values作为参数取另一个list,取得的表的数据list，怎么和原来的key匹配？\r\n比如有一个aMap＜akey，avalue＞，然用aMap. values取得所有avalue，作为参数调用其他的方法取回一个表的实体list，这个list怎么和akey匹配起来，作成另一个bMap＜akey，表的实体＞？谢谢？	<p>用map的values作为参数取另一个list,取得的表的数据list，怎么和原来的key匹配？<br>\r\n比如有一个aMap＜akey，avalue＞，然用aMap. values取得所有avalue，作为参数调用其他的方法取回一个表的实体list，这个list怎么和akey匹配起来，作成另一个bMap＜akey，表的实体＞？谢谢？</p>\r\n	\N
1	0	0	f	2021-04-23 16:36:58.924203	3	12	2021-04-23 08:23:49.519	排序	对一个只包含数字和小写字母的字符串中的正整数数字子串按数字大小进行升序排序，其余字符的相对位置保持不变,只在原数字子串的上进行变动，比如字符串为“aaa77xxxx88jj44”，进行排序后的结果是“aaa44xxxx77jj88”，非数字子串”aaa”、”xxxx”和”jj”的相对位置保持不变。需要考虑：（1）整数溢出，比如数字串为：”99999999999999999999999999999999”,不能把子串转化成整数相比；（2）首位是0的数字串的处理，比如“00000000000000006”是小于“7”的。用Java编写算法实现排序并输出经过排序的字符串。如何将字符串的数字和字母分别放到两个数组中，还要排序完它们的位置不变啊	对一个只包含数字和小写字母的字符串中的正整数数字子串按数字大小进行升序排序，其余字符的相对位置保持不变,只在原数字子串的上进行变动，比如字符串为“aaa77xxxx88jj44”，进行排序后的结果是“aaa44xxxx77jj88”，非数字子串”aaa”、”xxxx”和”jj”的相对位置保持不变。\r\n需要考虑：\r\n（1）整数溢出，比如数字串为：”99999999999999999999999999999999”,不能把子串转化成整数相比；\r\n（2）首位是0的数字串的处理，比如“00000000000000006”是小于“7”的。\r\n 用Java编写算法实现排序并输出经过排序的字符串。\r\n\r\n如何将字符串的数字和字母分别放到两个数组中，还要排序完它们的位置不变啊	<p>对一个只包含数字和小写字母的字符串中的正整数数字子串按数字大小进行升序排序，其余字符的相对位置保持不变,只在原数字子串的上进行变动，比如字符串为“aaa77xxxx88jj44”，进行排序后的结果是“aaa44xxxx77jj88”，非数字子串”aaa”、”xxxx”和”jj”的相对位置保持不变。<br>\n需要考虑：<br>\n（1）整数溢出，比如数字串为：”99999999999999999999999999999999”,不能把子串转化成整数相比；<br>\n（2）首位是0的数字串的处理，比如“00000000000000006”是小于“7”的。<br>\n用Java编写算法实现排序并输出经过排序的字符串。</p>\n<p>如何将字符串的数字和字母分别放到两个数组中，还要排序完它们的位置不变啊</p>\n	\N
\.


--
-- Data for Name: discussion_reply; Type: TABLE DATA; Schema: public; Owner: community
--

COPY public.discussion_reply (id, content_html, content_markdown, parent_id, vote_count, deleted, create_time, update_time, user_id, discussion_id) FROM stdin;
4	<p>看看源码吧</p>\r\n	看看源码吧	-1	0	f	2021-04-23 09:19:21.75	2021-04-23 09:55:01.296222	5	15
\.


--
-- Data for Name: discussion_vote; Type: TABLE DATA; Schema: public; Owner: community
--

COPY public.discussion_vote (id, discussion_id, reply_id, is_up, create_time, update_time, user_id, deleted) FROM stdin;
2	15	-1	f	2021-04-23 09:18:56.099	2021-04-23 09:18:56.099	5	\N
\.


--
-- Data for Name: problem; Type: TABLE DATA; Schema: public; Owner: community
--

COPY public.problem (id, title, tags, content_markdown, content_html, read_count, vote_count, answer_count, is_solved, deleted, create_time, update_time, user_id) FROM stdin;
8	mySQL怎么批量替换查询结果中的字段值。	{mysql}	mySQL怎么批量替换查询结果中的字段值。\r\n\r\n不仅仅是简单替换某字段的，是替换查询结果的字段值。\r\n\r\n比如会员表，在mySQL，我先按照性别、有头像、已通过邮箱验证检索出一部分会员，我想把这些检索出来的会员批量升级成VIP会员。这个操作语句怎么写？拜谢各位老师。\r\n\r\n	<p>mySQL怎么批量替换查询结果中的字段值。</p>\n<p>不仅仅是简单替换某字段的，是替换查询结果的字段值。</p>\n<p>比如会员表，在mySQL，我先按照性别、有头像、已通过邮箱验证检索出一部分会员，我想把这些检索出来的会员批量升级成VIP会员。这个操作语句怎么写？拜谢各位老师。</p>\n	4	0	0	f	f	2021-04-22 23:02:39.93	2021-04-22 23:07:38.810697	2
2	Servlet中登录生成session后注销第一次用地址访问Filter不起作用	{Java,"Java Web"}	# Servlet中登录生成session后注销，第一次用地址访问Filter不起作用，第二次才起作用，是为什么？\r\n\r\n在登录时生成Session\r\n```java\r\nif (&quot;admin&quot;.equals(username) &amp;&amp; &quot;123&quot;.equals(password)) {\r\n\treq.getSession().setAttribute(JavaBean.USER_SESSION, req.getSession().getId());\r\n\tresp.sendRedirect(&quot;/status/success.html&quot;);\r\n} else {\r\n\tresp.sendRedirect(&quot;/error.html&quot;);\r\n}\r\n```\r\n然后注销，清空Session的值\r\n```java\r\nObject user_session = req.getSession().getAttribute(JavaBean.USER_SESSION);\r\nif (user_session != null) {\r\n\treq.getSession().removeAttribute(JavaBean.USER_SESSION);\r\n\tresp.sendRedirect(&quot;/login.html&quot;);\r\n} else {\r\n\tresp.sendRedirect(&quot;/login.html&quot;);\r\n}\r\n```\r\n然后过滤器\r\n```java\r\nHttpServletRequest request = (HttpServletRequest) req;\r\nHttpServletResponse response = (HttpServletResponse) resp;\r\n\r\nif (request.getSession().getAttribute(JavaBean.USER_SESSION) == null) {\r\n\tresponse.sendRedirect(&quot;/error.html&quot;);\r\n}\r\n\r\nchain.doFilter(request, response);\r\n```\r\n![](https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/04/18/kuangstudy43613a45-3935-41c0-9420-998dac75e05f.png)\r\n![](https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/04/18/kuangstudy3c445bf5-a28b-4402-ab75-fbaf135dd366.jpg)\r\n![](https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/04/18/kuangstudyb2730697-a01b-4063-bf7d-6088db01ad6f.png)\r\n![](https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/04/18/kuangstudy80ae9fa6-0174-4c65-b18c-bf6bf21bcb87.png)\r\n![](https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/04/18/kuangstudydad17d8d-382e-453b-b8ac-a409ec25c5d4.png)	<h1>Servlet中登录生成session后注销，第一次用地址访问Filter不起作用，第二次才起作用，是为什么？</h1>\n<p>在登录时生成Session</p>\n<pre class="code-block"><code class="code hljs java"><span class="hljs-keyword">if</span> (&amp;quot;admin&amp;quot;.equals(username) &amp;amp;&amp;amp; &amp;quot;<span class="hljs-number">123</span>&amp;quot;.equals(password)) {<br />\treq.getSession().setAttribute(JavaBean.USER_SESSION, req.getSession().getId());<br />\tresp.sendRedirect(&amp;quot;/status/success.html&amp;quot;);<br />} <span class="hljs-keyword">else</span> {<br />\tresp.sendRedirect(&amp;quot;/error.html&amp;quot;);<br />}<br /></code></pre>\n<p>然后注销，清空Session的值</p>\n<pre class="code-block"><code class="code hljs java">Object user_session = req.getSession().getAttribute(JavaBean.USER_SESSION);<br /><span class="hljs-keyword">if</span> (user_session != <span class="hljs-keyword">null</span>) {<br />\treq.getSession().removeAttribute(JavaBean.USER_SESSION);<br />\tresp.sendRedirect(&amp;quot;/login.html&amp;quot;);<br />} <span class="hljs-keyword">else</span> {<br />\tresp.sendRedirect(&amp;quot;/login.html&amp;quot;);<br />}<br /></code></pre>\n<p>然后过滤器</p>\n<pre class="code-block"><code class="code hljs java">HttpServletRequest request = (HttpServletRequest) req;<br />HttpServletResponse response = (HttpServletResponse) resp;<br /><br /><span class="hljs-keyword">if</span> (request.getSession().getAttribute(JavaBean.USER_SESSION) == <span class="hljs-keyword">null</span>) {<br />\tresponse.sendRedirect(&amp;quot;/error.html&amp;quot;);<br />}<br /><br />chain.doFilter(request, response);<br /></code></pre>\n<p><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/04/18/kuangstudy43613a45-3935-41c0-9420-998dac75e05f.png" alt=""><br>\n<img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/04/18/kuangstudy3c445bf5-a28b-4402-ab75-fbaf135dd366.jpg" alt=""><br>\n<img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/04/18/kuangstudyb2730697-a01b-4063-bf7d-6088db01ad6f.png" alt=""><br>\n<img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/04/18/kuangstudy80ae9fa6-0174-4c65-b18c-bf6bf21bcb87.png" alt=""><br>\n<img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/04/18/kuangstudydad17d8d-382e-453b-b8ac-a409ec25c5d4.png" alt=""></p>\n	4	0	0	f	f	2021-04-22 22:42:25.760891	2021-04-22 23:12:38.704161	1
3	Bootstrat的thymeleaf显示不出样式怎么办	{Java,Thymeleaf}	![](https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/04/17/kuangstudy805e001c-5dd4-4711-a8c5-f4b928fdda55.jpg)![](https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/04/17/kuangstudy0b41d4b2-2c9e-477f-a9fa-cdde52e632ca.jpg)	<p><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/04/17/kuangstudy805e001c-5dd4-4711-a8c5-f4b928fdda55.jpg" alt=""><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/04/17/kuangstudy0b41d4b2-2c9e-477f-a9fa-cdde52e632ca.jpg" alt=""></p>\n	1	0	0	f	f	2021-04-22 22:44:04.347283	2021-04-22 22:44:07.487154	1
5	区间dp 区间长度问题	{算法,动态规划}	为什么区间dp有些时候len的长度要从1开始有些时候要从二开始有些时候又要从三开始\n比如石子合并这题 len 必须从二开始\n而 https://www.luogu.com.cn/problem/P1622\n这题是从一开始\n还有道从三开始的 但是我已经忘记题目了\n求大佬解答\n\n	<p>为什么区间dp有些时候len的长度要从1开始有些时候要从二开始有些时候又要从三开始<br>\n比如石子合并这题 len 必须从二开始<br>\n而 <a href="https://www.luogu.com.cn/problem/P1622">https://www.luogu.com.cn/problem/P1622</a><br>\n这题是从一开始<br>\n还有道从三开始的 但是我已经忘记题目了<br>\n求大佬解答</p>\n	5	0	2	f	f	2021-04-22 22:50:39.088828	2021-04-22 22:54:12.951051	1
7	java项目一启动就报错	{spring}	The last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.\r\n\tat sun.reflect.GeneratedConstructorAccessor55.newInstance(Unknown Source)\r\n\tat sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\r\n\tat java.lang.reflect.Constructor.newInstance(Constructor.java:423)\r\n\tat com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:61)\r\n\tat com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:105)\r\n\tat com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:151)\r\n\tat com.mysql.cj.exceptions.ExceptionFactory.createCommunicationsException(ExceptionFactory.java:167)\r\n\tat com.mysql.cj.protocol.a.NativeSocketConnection.connect(NativeSocketConnection.java:91)\r\n\tat com.mysql.cj.NativeSession.connect(NativeSession.java:152)\r\n\tat com.mysql.cj.jdbc.ConnectionImpl.connectWithRetries(ConnectionImpl.java:849)\r\n\t... 10 common frames omitted\r\nCaused by: java.net.ConnectException: Connection timed out: connect\r\n\tat java.net.DualStackPlainSocketImpl.connect0(Native Method)\r\n\tat java.net.DualStackPlainSocketImpl.socketConnect(DualStackPlainSocketImpl.java:75)\r\n\tat java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:476)\r\n\tat java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:218)\r\n\tat java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:200)\r\n\tat java.net.PlainSocketImpl.connect(PlainSocketImpl.java:162)\r\n\tat java.net.SocksSocketImpl.connect(SocksSocketImpl.java:394)\r\n\tat java.net.Socket.connect(Socket.java:606)\r\n\tat com.mysql.cj.protocol.StandardSocketFactory.connect(StandardSocketFactory.java:155)\r\n\tat com.mysql.cj.protocol.a.NativeSocketConnection.connect(NativeSocketConnection.java:65)\r\n\t... 12 common frames omitted\r\n16:44:49.599 [NettyClientSelector_1] INFO  RocketmqRemoting - [info,95] - closeChannel: close the connection to remote address[] result: true\r\n16:44:50.915 [NettyClientSelector_1] INFO  RocketmqRemoting - [info,95] - closeChannel: close the connection to remote address[] result: true\r\n16:45:19.601 [NettyClientSelector_1] INFO  RocketmqRemoting - [info,95] - closeChannel: close the connection to remote address[] result: true\r\n16:45:20.915 [NettyClientSelector_1] INFO  RocketmqRemoting - [info,95] - closeChannel: close the connection to remote address[] result: true\r\n16:45:49.041 [Druid-ConnectionPool-Create-1303127336] ERROR c.a.d.p.DruidDataSource - [run,2781] - create connection SQLException, url: jdbc:mysql://rm-bp1941yb51xai5t3s.mysql.rds.aliyuncs.com:3306/trade_test?useUnicode=true&characterEncoding=UTF-8&autoReconnect=true&serverTimezone=GMT%2B8&failOverReadOnly=false, errorCode 0, state 08001\r\njava.sql.SQLNonTransientConnectionException: Could not create connection to database server. Attempted reconnect 3 times. Giving up.\r\n\tat com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:110)\r\n\tat com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97)\r\n\tat com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:89)\r\n\tat com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:63)\r\n\tat com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:73)\r\n\tat com.mysql.cj.jdbc.ConnectionImpl.connectWithRetries(ConnectionImpl.java:905)\r\n\tat com.mysql.cj.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:830)\r\n\tat com.mysql.cj.jdbc.ConnectionImpl.<init>(ConnectionImpl.java:455)\r\n\tat com.mysql.cj.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:240)\r\n\tat com.mysql.cj.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:207)\r\n\tat com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:156)\r\n\tat com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:218)\r\n\tat com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:150)\r\n\tat com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1646)\r\n\tat com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1710)\r\n\tat com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:2779)\r\nCaused by: com.mysql.cj.exceptions.CJCommunicationsException: Communications link failure	<p>The last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.<br>\nat sun.reflect.GeneratedConstructorAccessor55.newInstance(Unknown Source)<br>\nat sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)<br>\nat java.lang.reflect.Constructor.newInstance(Constructor.java:423)<br>\nat com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:61)<br>\nat com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:105)<br>\nat com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:151)<br>\nat com.mysql.cj.exceptions.ExceptionFactory.createCommunicationsException(ExceptionFactory.java:167)<br>\nat com.mysql.cj.protocol.a.NativeSocketConnection.connect(NativeSocketConnection.java:91)<br>\nat com.mysql.cj.NativeSession.connect(NativeSession.java:152)<br>\nat com.mysql.cj.jdbc.ConnectionImpl.connectWithRetries(ConnectionImpl.java:849)<br>\n… 10 common frames omitted<br>\nCaused by: java.net.ConnectException: Connection timed out: connect<br>\nat java.net.DualStackPlainSocketImpl.connect0(Native Method)<br>\nat java.net.DualStackPlainSocketImpl.socketConnect(DualStackPlainSocketImpl.java:75)<br>\nat java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:476)<br>\nat java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:218)<br>\nat java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:200)<br>\nat java.net.PlainSocketImpl.connect(PlainSocketImpl.java:162)<br>\nat java.net.SocksSocketImpl.connect(SocksSocketImpl.java:394)<br>\nat java.net.Socket.connect(Socket.java:606)<br>\nat com.mysql.cj.protocol.StandardSocketFactory.connect(StandardSocketFactory.java:155)<br>\nat com.mysql.cj.protocol.a.NativeSocketConnection.connect(NativeSocketConnection.java:65)<br>\n… 12 common frames omitted<br>\n16:44:49.599 [NettyClientSelector_1] INFO  RocketmqRemoting - [info,95] - closeChannel: close the connection to remote address[] result: true<br>\n16:44:50.915 [NettyClientSelector_1] INFO  RocketmqRemoting - [info,95] - closeChannel: close the connection to remote address[] result: true<br>\n16:45:19.601 [NettyClientSelector_1] INFO  RocketmqRemoting - [info,95] - closeChannel: close the connection to remote address[] result: true<br>\n16:45:20.915 [NettyClientSelector_1] INFO  RocketmqRemoting - [info,95] - closeChannel: close the connection to remote address[] result: true<br>\n16:45:49.041 [Druid-ConnectionPool-Create-1303127336] ERROR c.a.d.p.DruidDataSource - [run,2781] - create connection SQLException, url: jdbc:mysql://rm-bp1941yb51xai5t3s.mysql.rds.aliyuncs.com:3306/trade_test?useUnicode=true&amp;characterEncoding=UTF-8&amp;autoReconnect=true&amp;serverTimezone=GMT%2B8&amp;failOverReadOnly=false, errorCode 0, state 08001<br>\njava.sql.SQLNonTransientConnectionException: Could not create connection to database server. Attempted reconnect 3 times. Giving up.<br>\nat com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:110)<br>\nat com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97)<br>\nat com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:89)<br>\nat com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:63)<br>\nat com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:73)<br>\nat com.mysql.cj.jdbc.ConnectionImpl.connectWithRetries(ConnectionImpl.java:905)<br>\nat com.mysql.cj.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:830)<br>\nat com.mysql.cj.jdbc.ConnectionImpl.&lt;init&gt;(ConnectionImpl.java:455)<br>\nat com.mysql.cj.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:240)<br>\nat com.mysql.cj.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:207)<br>\nat com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:156)<br>\nat com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:218)<br>\nat com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:150)<br>\nat com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1646)<br>\nat com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1710)<br>\nat com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:2779)<br>\nCaused by: com.mysql.cj.exceptions.CJCommunicationsException: Communications link failure</p>\n	0	0	0	f	f	2021-04-22 23:00:15.055	2021-04-22 23:00:15.055	2
6	单例模式是什么？	{单例模式}	各位大佬请指教！	<p>各位大佬请指教！</p>\n	14	-1	0	f	f	2021-04-22 22:57:10.253	2021-04-23 23:03:57.879501	2
4	网易笔试的一道算法题（求解）	{算法}	题目：给定一个数组，找出最大子数组，并且该子数组的和能够整除6。\r\n\r\n前几天做了一次网易的笔试题，四道算法题，呜呜呜我算法太菜了一题都不会写，然后挑了一题看起来最短最好理解的一道做，结果也做不出来。。。\r\n这道题问了数学系的同学，除了暴力排列组合也没有找到能够更好解决的方法。\r\n后来想到，可以把整个数组求和，然后模6，得到余数，然后再把数组中的这个数字去掉，或者这个数字的组合去掉，但是这不就是把一个排列组合的问题，转换为另一个排列组合的问题了吗。。郁闷，不过这个找余数的排列组合会更简单就是了，毕竟余数最大也就5。。	<p>题目：给定一个数组，找出最大子数组，并且该子数组的和能够整除6。</p>\n<p>前几天做了一次网易的笔试题，四道算法题，呜呜呜我算法太菜了一题都不会写，然后挑了一题看起来最短最好理解的一道做，结果也做不出来。。。<br>\n这道题问了数学系的同学，除了暴力排列组合也没有找到能够更好解决的方法。<br>\n后来想到，可以把整个数组求和，然后模6，得到余数，然后再把数组中的这个数字去掉，或者这个数字的组合去掉，但是这不就是把一个排列组合的问题，转换为另一个排列组合的问题了吗。。郁闷，不过这个找余数的排列组合会更简单就是了，毕竟余数最大也就5。。</p>\n	7	0	1	f	f	2021-04-22 22:49:23.608348	2021-04-22 23:04:54.109868	1
10	java如何用foreach输出数组里的数	{java}	package exercise;\r\n\r\npublic class qwe {\r\n    public static void main(String[] args){\r\n        int[] a = new int[22];\r\n        for(int i=0,j=-6; i<a.length&&j<=38; j++) {\r\n            if(j%2==1) {\r\n                a[i]=j;\r\n\r\n            }\r\n\r\n        \r\n        }\r\n    }\r\n}	<p>package exercise;</p>\n<p>public class qwe {<br>\npublic static void main(String[] args){<br>\nint[] a = new int[22];<br>\nfor(int i=0,j=-6; i&lt;a.length&amp;&amp;j&lt;=38; j++) {<br>\nif(j%2==1) {<br>\na[i]=j;</p>\n<pre><code>        }\n\n    \n    }\n}\n</code></pre>\n<p>}</p>\n	7	1	0	f	t	2021-04-22 23:14:55.237	2021-04-23 17:09:13.832998	2
9	eclipse运行遇到了错误	{eclipse}	在用eclipse跑一个程序的时候遇到了这样的错误\r\n\r\n严重: 启动过滤器异常\r\njava.nio.file.InvalidPathException: Illegal char <:> at index 3: jar:file:\\D:\\ecli\\.metadata\\.plugins\\org.eclipse.wst.server.core\\tmp0\\wtpwebapps\\Laboratory\\WEB-INF\\lib\\struts2-core-2.3.15.3.jar\r\n    at java.base/sun.nio.fs.WindowsPathParser.normalize(WindowsPathParser.java:182)\r\n    at java.base/sun.nio.fs.WindowsPathParser.parse(WindowsPathParser.java:153)\r\n    at java.base/sun.nio.fs.WindowsPathParser.parse(WindowsPathParser.java:77)\r\n\r\n严重: 一个或多个筛选器启动失败。完整的详细信息将在相应的容器日志文件中找到\r\n\r\n网页运行之后显示这样的错误  麻烦大佬们给看看\r\n![image.png](https://cdn.zhoupb.com/image/upload/0568f0577bfccc97ee77f71afcd94ffd.png)	<p>在用eclipse跑一个程序的时候遇到了这样的错误</p>\n<p>严重: 启动过滤器异常<br>\njava.nio.file.InvalidPathException: Illegal char &lt;:&gt; at index 3: jar:file:\\D:\\ecli.metadata.plugins\\org.eclipse.wst.server.core\\tmp0\\wtpwebapps\\Laboratory\\WEB-INF\\lib\\struts2-core-2.3.15.3.jar<br>\nat java.base/sun.nio.fs.WindowsPathParser.normalize(WindowsPathParser.java:182)<br>\nat java.base/sun.nio.fs.WindowsPathParser.parse(WindowsPathParser.java:153)<br>\nat java.base/sun.nio.fs.WindowsPathParser.parse(WindowsPathParser.java:77)</p>\n<p>严重: 一个或多个筛选器启动失败。完整的详细信息将在相应的容器日志文件中找到</p>\n<p>网页运行之后显示这样的错误  麻烦大佬们给看看<br>\n<img src="https://cdn.zhoupb.com/image/upload/0568f0577bfccc97ee77f71afcd94ffd.png" alt="image.png"></p>\n	1	0	0	f	f	2021-04-22 23:11:42.599	2021-04-22 23:36:27.360896	2
1	求解答	{C++,算法}	在组合型枚举中，两种枚举方式有什么区别？\n方式1：按照指数型枚举进行，枚举每个数选或不选，再加上可行性剪枝\n方式2：枚举每个位置可以填什么数，用一个变量标记下一个要选择的数的下标，避免重复枚举\n方式1,2在时间效率上有什么区别？\n分别在什么情况下使用？\n为什么“小猫爬山”使用方式1可以通过，而方式2会超时？\n\n---\n小猫爬山1：可以通过\n\n```cpp\n#include<iostream>\n#include<algorithm>\n#define N 20 \nusing namespace std;\nint a[N],v[N],n,m,ans=N;\nvoid dfs(int cat,int car){\n    if(car>=ans) return ;//剪枝\n    if(cat==n+1) {//n操作结束，到n+1截止 \n        ans=car;\n        return ;\n    }\n    for(int i=1;i<=car;i++){//从1开始而不是从0开始是因为1缆车才开始放入小猫，直到第car个缆车 \n        if(a[cat]+v[i]<=m){\n            v[i]+=a[cat];\n            dfs(cat+1,car);\n            v[i]-=a[cat];\n        }\n    }\n    v[car+1]=a[cat];\n    dfs(cat+1,car+1);\n    v[car+1]=0; \n}\nint main(){\n    cin >> n >> m;\n    for(int i=1;i<=n;i++) cin >> a[i];\n    sort(a+1,a+n+1);\n    reverse(a+1,a+n+1);//剪枝 \n    dfs(1,0); //当前为第1只猫，当前为第0辆车（在dfs中直接新建缆车）\n    cout << ans << endl; \n    return 0;\n}\n```\n\n---\n小猫爬山，方式2，超时\n```cpp\n#include<iostream>\n#include<cstring>\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\nconst int N=25;\nint n,m,a[N],cnt[N],car=1,start=1,ans=0x7fffffff,b[N];\nvoid dfs(int c,int s,int cat){\n    if(c>=ans) return ;\n    if(cat>n) {\n        ans=min(ans,c);\n        return ;\n    }\n    int flag=1;\n    for(int i=s;i<=n;i++){\n        if(cnt[c]+a[i]<=m&&b[i]==0){\n            b[i]=1;\n            cnt[c]+=a[i];\n            dfs(c,s+1,cat+1);\n            b[i]=0;\n            cnt[c]-=a[i];\n            flag=0;\n        }\n    }\n    if(flag){\n        dfs(c+1,1,cat);\n    }\n\n    return ;\n}\nint main(){\n    cin >> n >> m;\n    for(int i=1;i<=n;i++){\n        cin >> a[i];\n    }\n    sort(a+1,a+n+1);\n    reverse(a+1,a+n+1);\n    dfs(car,start,1);\n    cout << ans << endl;\n    return 0;\n}\n```\n\n\n	<p>在组合型枚举中，两种枚举方式有什么区别？<br>\n方式1：按照指数型枚举进行，枚举每个数选或不选，再加上可行性剪枝<br>\n方式2：枚举每个位置可以填什么数，用一个变量标记下一个要选择的数的下标，避免重复枚举<br>\n方式1,2在时间效率上有什么区别？<br>\n分别在什么情况下使用？<br>\n为什么“小猫爬山”使用方式1可以通过，而方式2会超时？</p>\n<hr>\n<p>小猫爬山1：可以通过</p>\n<pre class="code-block"><code class="code hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br /><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br /><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 20 </span><br /><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br /><span class="hljs-keyword">int</span> a[N],v[N],n,m,ans=N;<br /><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> cat,<span class="hljs-keyword">int</span> car)</span></span>{<br />    <span class="hljs-keyword">if</span>(car&gt;=ans) <span class="hljs-keyword">return</span> ;<span class="hljs-comment">//剪枝</span><br />    <span class="hljs-keyword">if</span>(cat==n+<span class="hljs-number">1</span>) {<span class="hljs-comment">//n操作结束，到n+1截止 </span><br />        ans=car;<br />        <span class="hljs-keyword">return</span> ;<br />    }<br />    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=car;i++){<span class="hljs-comment">//从1开始而不是从0开始是因为1缆车才开始放入小猫，直到第car个缆车 </span><br />        <span class="hljs-keyword">if</span>(a[cat]+v[i]&lt;=m){<br />            v[i]+=a[cat];<br />            dfs(cat+<span class="hljs-number">1</span>,car);<br />            v[i]-=a[cat];<br />        }<br />    }<br />    v[car+<span class="hljs-number">1</span>]=a[cat];<br />    dfs(cat+<span class="hljs-number">1</span>,car+<span class="hljs-number">1</span>);<br />    v[car+<span class="hljs-number">1</span>]=<span class="hljs-number">0</span>; <br />}<br /><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>{<br />    <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; m;<br />    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) <span class="hljs-built_in">cin</span> &gt;&gt; a[i];<br />    sort(a+<span class="hljs-number">1</span>,a+n+<span class="hljs-number">1</span>);<br />    reverse(a+<span class="hljs-number">1</span>,a+n+<span class="hljs-number">1</span>);<span class="hljs-comment">//剪枝 </span><br />    dfs(<span class="hljs-number">1</span>,<span class="hljs-number">0</span>); <span class="hljs-comment">//当前为第1只猫，当前为第0辆车（在dfs中直接新建缆车）</span><br />    <span class="hljs-built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="hljs-built_in">endl</span>; <br />    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br />}<br /></code></pre>\n<hr>\n<p>小猫爬山，方式2，超时</p>\n<pre class="code-block"><code class="code hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br /><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br /><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br /><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br /><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br /><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N=<span class="hljs-number">25</span>;<br /><span class="hljs-keyword">int</span> n,m,a[N],cnt[N],car=<span class="hljs-number">1</span>,start=<span class="hljs-number">1</span>,ans=<span class="hljs-number">0x7fffffff</span>,b[N];<br /><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> c,<span class="hljs-keyword">int</span> s,<span class="hljs-keyword">int</span> cat)</span></span>{<br />    <span class="hljs-keyword">if</span>(c&gt;=ans) <span class="hljs-keyword">return</span> ;<br />    <span class="hljs-keyword">if</span>(cat&gt;n) {<br />        ans=min(ans,c);<br />        <span class="hljs-keyword">return</span> ;<br />    }<br />    <span class="hljs-keyword">int</span> flag=<span class="hljs-number">1</span>;<br />    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=s;i&lt;=n;i++){<br />        <span class="hljs-keyword">if</span>(cnt[c]+a[i]&lt;=m&amp;&amp;b[i]==<span class="hljs-number">0</span>){<br />            b[i]=<span class="hljs-number">1</span>;<br />            cnt[c]+=a[i];<br />            dfs(c,s+<span class="hljs-number">1</span>,cat+<span class="hljs-number">1</span>);<br />            b[i]=<span class="hljs-number">0</span>;<br />            cnt[c]-=a[i];<br />            flag=<span class="hljs-number">0</span>;<br />        }<br />    }<br />    <span class="hljs-keyword">if</span>(flag){<br />        dfs(c+<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,cat);<br />    }<br /><br />    <span class="hljs-keyword">return</span> ;<br />}<br /><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>{<br />    <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; m;<br />    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++){<br />        <span class="hljs-built_in">cin</span> &gt;&gt; a[i];<br />    }<br />    sort(a+<span class="hljs-number">1</span>,a+n+<span class="hljs-number">1</span>);<br />    reverse(a+<span class="hljs-number">1</span>,a+n+<span class="hljs-number">1</span>);<br />    dfs(car,start,<span class="hljs-number">1</span>);<br />    <span class="hljs-built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="hljs-built_in">endl</span>;<br />    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br />}<br /></code></pre>\n	19	0	1	t	f	2021-04-22 22:19:35.582776	2021-04-23 23:04:33.6604	1
\.


--
-- Data for Name: problem_answer; Type: TABLE DATA; Schema: public; Owner: community
--

COPY public.problem_answer (id, content_markdown, content_html, vote_count, is_accept, deleted, create_time, update_time, user_id, problem_id) FROM stdin;
2	那得看前几个状态是否需要处理，像石子合并也可以从1开始，只是没有必要，因为长度为1时的代价就是0，而dp数组初值就是0.	<p>那得看前几个状态是否需要处理，像石子合并也可以从1开始，只是没有必要，因为长度为1时的代价就是0，而dp数组初值就是0.</p>\n	0	f	f	2021-04-22 22:51:04.639918	2021-04-22 22:51:04.639918	1	5
3	<>	<p>&lt;&gt;</p>\n	0	f	t	2021-04-22 23:13:21.473	2021-04-22 23:13:25.085453	3	6
4	dadadadada	<p>dadadadada</p>\n	0	f	t	2021-04-22 23:13:38.611	2021-04-22 23:14:17.691441	3	6
6	**容我想想**	<p><strong>容我想想</strong></p>\n	0	f	f	2021-04-22 23:59:50.064591	2021-04-22 23:59:50.064591	1	4
8	## 这是解答哦\n---\n\n首先 balabala\n\n然后 balabala\n\n就好啦	<h2>这是解答哦</h2>\n<hr>\n<p>首先 balabala</p>\n<p>然后 balabala</p>\n<p>就好啦</p>\n	0	f	f	2021-04-23 00:49:48.453373	2021-04-23 00:49:48.453373	1	5
7	就不告诉你，hhhh	<p>就不告诉你，hhhh</p>\n	0	f	t	2021-04-23 00:44:32.501462	2021-04-23 23:03:49.263042	1	1
5	就不告诉你\n	<p>就不告诉你</p>\n	0	f	t	2021-04-22 23:14:56.472699	2021-04-23 23:03:57.879501	1	6
9	容我回去想想	<p>容我回去想想</p>\n	0	t	f	2021-04-23 00:56:00.02	2021-04-23 23:04:19.992981	3	1
1	不晓得	<p>不晓得</p>\n	1	t	t	2021-04-22 22:21:55.257062	2021-04-23 23:04:33.6604	1	1
\.


--
-- Data for Name: problem_vote; Type: TABLE DATA; Schema: public; Owner: community
--

COPY public.problem_vote (id, problem_id, answer_id, is_up, deleted, create_time, update_time, user_id) FROM stdin;
1	6	-1	f	f	2021-04-22 23:13:03.6	2021-04-22 23:13:03.6	3
3	10	-1	f	t	2021-04-22 23:37:42.581125	2021-04-22 23:37:54.563919	1
2	6	-1	f	t	2021-04-22 23:15:17.340696	2021-04-22 23:15:17.340696	1
4	-1	1	t	f	2021-04-23 23:04:04.893777	2021-04-23 23:04:04.893777	1
\.


--
-- Data for Name: share; Type: TABLE DATA; Schema: public; Owner: community
--

COPY public.share (id, content_html, content_markdown, read_count, vote_count, reply_count, deleted, create_time, update_time, user_id, description) FROM stdin;
1	<p>我在官方库下载了Smartvideo插件，但是不管怎么设置，视频都不显示，后来才知道B站规则改了，插件也失效了，于是，我找到了一个修复版，分享出来。<br>\n下载地址:<a href="https://52kuaiji.cc/4844.html">https://52kuaiji.cc/4844.html</a></p>\n	我在官方库下载了Smartvideo插件，但是不管怎么设置，视频都不显示，后来才知道B站规则改了，插件也失效了，于是，我找到了一个修复版，分享出来。\r\n下载地址:https://52kuaiji.cc/4844.html	5	0	0	f	2021-04-22 17:42:38.533	2021-04-22 22:54:06.54176	2	我在官方库下载了Smartvideo插件，但是不管怎么设置，视频都不显示，后来才知道B站规则改了，插件也失效了，于是，我找到了一个修复版，分享出来。下载地址:https://52kuaiji.cc/4844.html
3	<p>就是自己想学编程，html,css会点，但是一直无法确定学哪一门编程语言，不知道学前端好还是后端好，百度，知乎啥的都查了，但还是感觉很多是推销书籍的，希望大佬们推荐一下。</p>\n	就是自己想学编程，html,css会点，但是一直无法确定学哪一门编程语言，不知道学前端好还是后端好，百度，知乎啥的都查了，但还是感觉很多是推销书籍的，希望大佬们推荐一下。	4	1	1	f	2021-04-22 17:53:23.129	2021-04-22 21:01:08.739891	2	就是自己想学编程，html,css会点，但是一直无法确定学哪一门编程语言，不知道学前端好还是后端好，百度，知乎啥的都查了，但还是感觉很多是推销书籍的，希望大佬们推荐一下。
5	<p>#Java<br>\nJava技术分类<br>\nJava SE ---- 标准版<br>\nJava EE ---- 企业版 网络开发<br>\nJava ME ---- 移动版 已淘汰 诺基亚的塞班系统</p>\n<p>Java语言的特点<br>\n①面向对象<br>\n语言的发展始终都是朝着人类容易理解的方向在发展<br>\n②跨平台<br>\njvm ---- Java的虚拟机，它是Java程序运行的基础平台<br>\njre ---- Java运行环境，它包含了jvm，还包含程序运行所必须的一些代码<br>\njdk ---- Java开发环境，它包含了jre，还包含一些编译和运行的工具<br>\n③健壮性<br>\n垃圾回收器GC ---- 它是一个低级别的线程，它在cpu不怎么繁忙的时候出来工作，检查内存中有没有垃圾，如果有，就释放.</p>\n<p>–配置环境变量<br>\n1.新增：JAVA_HOME<br>\n值：jdk安装的根目录（注意：如果这个文件夹下有bin文件夹，那么这个文件夹就是jdk根目录）<br>\n2.修改变量：Path<br>\n在Path中追加：%JAVA_HOME%\\bin<br>\n3.新增变量：CLASSPATH<br>\n值：.,%JAVA_HOME%\\lib</p>\n<p>1.Java第一步<br>\n打开编译文本notepad++，输入代码：</p>\n<pre class="code-block"><code class="code hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">hello</span></span>{<br />\t<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>{<br />\t\tSystem.out.println(&amp;quot;Hello World!&amp;quot;)<br />\t}<br />}<br /></code></pre>\n<p>保存为hello.java 文件<br>\n然后打开命令行，进行保存文件的路径，输入javac hello.java<br>\n然后文件旁边会生成一个后缀为class的文件，然后再命令行输入java hello<br>\nHello World！就打印出来了。</p>\n<blockquote>\n<p>关于cmd窗口的常用命令<br>\ne： ----- 直接进入e盘根目录 （盘符：可以进入指定盘符）<br>\ndir ----- 查看当前文件夹下的所有内容<br>\ncd 路径 ----- 进入到指定的文件夹<br>\ncd… ----- 返回上层目录<br>\nmd ----- 创建文件夹</p>\n</blockquote>\n<blockquote>\n<p>在cmd窗口下编译运行java程序的命令<br>\n首先进入java原文件所在目录<br>\njavac 文件名.java ----- 将原文件编译出字节码文件<br>\njava 类名 ----- 执行该java类</p>\n</blockquote>\n<p>2.在java中，使用class关键字来定义一个类<br>\n格式：<br>\nclass 类名{<br>\n}<br>\n注意：类名首字母大写，当前文件的文件名于类名一致</p>\n<p>3.所有的程序都是从main方法作为入口开始执行的（注意：方法就是函数的意思），main的固定格式：<br>\npublic static void main(String[] args){}</p>\n<blockquote>\n<p>在java中严格区分大小写，每一行代码都必须以;结尾</p>\n</blockquote>\n<p>4.打印语句的固定格式：<br>\nSystem.out.println(字符串);<br>\n注意：println方法是打印并换行</p>\n<p>5.注释<br>\n以/<em>开头，以</em>/结尾，可以注释一端代码<br>\n//可以注释一行代码</p>\n<p>6.java中的8种基本数据类型<br>\n整型：byte short int long</p>\n<blockquote>\n<p>取值范围：<br>\nbyte ----- -2<sup>7到2</sup>7-1<br>\nshort ----- -2<sup>15到2</sup>15-1<br>\nint ----- -2<sup>31到2</sup>31-1<br>\nlong ----- -2<sup>63到2</sup>63-1</p>\n</blockquote>\n<p>浮点型：float double</p>\n<blockquote>\n<p>取值范围：<br>\nfloat ----- -2<sup>128到2</sup>127<br>\ndouble ------ -2<sup>1024到2</sup>1023<br>\n注意：所有的整数，默认类型是int，所有的浮点数，默认类型是double</p>\n</blockquote>\n<p>字符型：char</p>\n<blockquote>\n<p>char ----- 表示一个unicode编码中的单个符号，我们使用一对单引号，来表示其中一个字符<br>\n注意：如果需要存放多个字符，则使用字符串类型String，它使用一对双引号包着若干个字符<br>\n注意：\\在java中有特殊的含义，这叫转义字符<br>\n\\u可以加四位的十六进制数表示该数对应unicode编码中的某个字符<br>\n\\n表示一个换行符<br>\n\\t表示一个缩进符</p>\n</blockquote>\n<p>布尔型：boolean</p>\n<blockquote>\n<p>boolean ----- 它只有两个值true和false 表示正确和错误<br>\n一般用来分支判断和循环语句中</p>\n</blockquote>\n<p>7.在java中，凡是自己起名字的地方称为“标识符”<br>\n标识符命名规范<br>\n①见名知意（建议使用单词）<br>\n②变量名和方法名：首字母小写，后面每个单词首字母大写，其余字母小写（驼峰原则）<br>\n③类名：首字母大写，后面每个单词首字母大写，其余字母小写<br>\n④常量名：全大写<br>\n⑤包名：全小写<br>\n⑥所有的标识符都必须以字母数字下划线_和$构成，不能以数字开头<br>\n⑦不能是java的关键字，但可以包含java关键字</p>\n<p>8.局部变量<br>\n凡是定义在方法中的变量就是局部变量，局部变量的作用范围是它所定义的当前这一对大括号</p>\n<p>9.成员变量<br>\n凡是定义在方法外面的变量就是成员变量<br>\n所有的成员变量都有默认的初始化值：</p>\n<blockquote>\n<p>整型都是0<br>\n浮点型是0.0<br>\n字符型是空字符<br>\n布尔型是false</p>\n</blockquote>\n<p>所有的局部变量必须手动赋初始化值，否则无法使用d</p>\n<p>10.自动类型转换<br>\n1.不同类型的数值在相互运算的时候，会首先转为相同的类型然后再运算<br>\n2.等号=作为一个赋值运算符，它会将其右边的值赋给左边的变量，如果左右两边类型不一致，也会发生类型转换<br>\n注意：等号右边容量小的可以赋给等号左边容量大的变量<br>\n3.容量小的数据类型会自动往容量大的数据类型转换<br>\n4.在赋值运算符=的右边容量大的类型无法赋值给等号左边容量小的变量</p>\n<blockquote>\n<p>在自动转换的过程中：<br>\nbyte short char 这三种类型并列最小<br>\n他们之间相互运算统一转为int<br>\n除此之外从小到大顺序如下：<br>\nint long float double<br>\n注意：boolean不会和其他七种类型相互运算<br>\n注意：char型和其他基本数据类型运算时，是使用它背后的unicode编码来进行运算的</p>\n</blockquote>\n<p>11.强制类型转换<br>\n容量大的数据往容量小的类型转换，只需要使用一对小括号(目标类型)，就可以完成强制类型转换</p>\n<p>12.String和其他数据类型只能使用+进行运算，+不是加法，而是拼接，首先将其他数据类型转为字符串，然后和当前字符串拼接，返回拼接后的字符串</p>\n<p>13.++和–<br>\n++表示自增1<br>\n–表示自减1<br>\n++和–可以放在变量的前面或者后面，如果放到前面，则是先自增自减，然后使用，如果放到后面，则是先使用变量，然后再自增自减</p>\n	#Java\r\nJava技术分类\r\nJava SE ---- 标准版\r\nJava EE ---- 企业版 网络开发\r\nJava ME ---- 移动版 已淘汰 诺基亚的塞班系统\r\n\r\nJava语言的特点\r\n①面向对象\r\n语言的发展始终都是朝着人类容易理解的方向在发展\r\n②跨平台\r\njvm ---- Java的虚拟机，它是Java程序运行的基础平台\r\njre ---- Java运行环境，它包含了jvm，还包含程序运行所必须的一些代码\r\njdk ---- Java开发环境，它包含了jre，还包含一些编译和运行的工具\r\n③健壮性\r\n垃圾回收器GC ---- 它是一个低级别的线程，它在cpu不怎么繁忙的时候出来工作，检查内存中有没有垃圾，如果有，就释放.\r\n\r\n--配置环境变量\r\n    1.新增：JAVA_HOME\r\n    值：jdk安装的根目录（注意：如果这个文件夹下有bin文件夹，那么这个文件夹就是jdk根目录）\r\n    2.修改变量：Path\r\n    在Path中追加：%JAVA_HOME%\\bin\r\n    3.新增变量：CLASSPATH\r\n    值：.,%JAVA_HOME%\\lib\r\n\r\n1.Java第一步\r\n打开编译文本notepad++，输入代码：\r\n```java\r\nclass hello{\r\n\tpublic static void main(String[] args){\r\n\t\tSystem.out.println(&quot;Hello World!&quot;)\r\n\t}\r\n}\r\n```\r\n保存为hello.java 文件\r\n然后打开命令行，进行保存文件的路径，输入javac hello.java\r\n然后文件旁边会生成一个后缀为class的文件，然后再命令行输入java hello\r\nHello World！就打印出来了。\r\n\r\n> 关于cmd窗口的常用命令\r\ne： ----- 直接进入e盘根目录 （盘符：可以进入指定盘符）\r\ndir ----- 查看当前文件夹下的所有内容\r\ncd 路径 ----- 进入到指定的文件夹\r\ncd.. ----- 返回上层目录\r\nmd ----- 创建文件夹\r\n\r\n> 在cmd窗口下编译运行java程序的命令\r\n首先进入java原文件所在目录\r\njavac 文件名.java ----- 将原文件编译出字节码文件\r\njava 类名 ----- 执行该java类\r\n\r\n2.在java中，使用class关键字来定义一个类\r\n格式：\r\nclass 类名{\r\n}\r\n注意：类名首字母大写，当前文件的文件名于类名一致\r\n\r\n3.所有的程序都是从main方法作为入口开始执行的（注意：方法就是函数的意思），main的固定格式：\r\npublic static void main(String[] args){}\r\n\r\n> 在java中严格区分大小写，每一行代码都必须以;结尾\r\n\r\n4.打印语句的固定格式：\r\nSystem.out.println(字符串);\r\n注意：println方法是打印并换行\r\n\r\n5.注释\r\n以/*开头，以*/结尾，可以注释一端代码\r\n//可以注释一行代码\r\n\r\n6.java中的8种基本数据类型\r\n整型：byte short int long\r\n> 取值范围：\r\nbyte ----- -2^7到2^7-1\r\nshort ----- -2^15到2^15-1\r\nint ----- -2^31到2^31-1\r\nlong ----- -2^63到2^63-1\r\n\r\n浮点型：float double \r\n> 取值范围：\r\nfloat ----- -2^128到2^127\r\ndouble ------ -2^1024到2^1023\r\n注意：所有的整数，默认类型是int，所有的浮点数，默认类型是double\r\n\r\n字符型：char\r\n> char ----- 表示一个unicode编码中的单个符号，我们使用一对单引号，来表示其中一个字符\r\n注意：如果需要存放多个字符，则使用字符串类型String，它使用一对双引号包着若干个字符\r\n注意：\\在java中有特殊的含义，这叫转义字符\r\n\\u可以加四位的十六进制数表示该数对应unicode编码中的某个字符\r\n\\n表示一个换行符\r\n\\t表示一个缩进符\r\n\r\n布尔型：boolean\r\n> boolean ----- 它只有两个值true和false 表示正确和错误\r\n一般用来分支判断和循环语句中\r\n\r\n7.在java中，凡是自己起名字的地方称为“标识符”\r\n标识符命名规范\r\n①见名知意（建议使用单词）\r\n②变量名和方法名：首字母小写，后面每个单词首字母大写，其余字母小写（驼峰原则）\r\n③类名：首字母大写，后面每个单词首字母大写，其余字母小写\r\n④常量名：全大写\r\n⑤包名：全小写\r\n⑥所有的标识符都必须以字母数字下划线_和$构成，不能以数字开头\r\n⑦不能是java的关键字，但可以包含java关键字\r\n\r\n8.局部变量\r\n凡是定义在方法中的变量就是局部变量，局部变量的作用范围是它所定义的当前这一对大括号\r\n\r\n9.成员变量\r\n凡是定义在方法外面的变量就是成员变量\r\n所有的成员变量都有默认的初始化值：\r\n> 整型都是0\r\n浮点型是0.0\r\n字符型是空字符\r\n布尔型是false\r\n\r\n所有的局部变量必须手动赋初始化值，否则无法使用d\r\n\r\n10.自动类型转换\r\n1.不同类型的数值在相互运算的时候，会首先转为相同的类型然后再运算\r\n2.等号=作为一个赋值运算符，它会将其右边的值赋给左边的变量，如果左右两边类型不一致，也会发生类型转换\r\n注意：等号右边容量小的可以赋给等号左边容量大的变量\r\n3.容量小的数据类型会自动往容量大的数据类型转换\r\n4.在赋值运算符=的右边容量大的类型无法赋值给等号左边容量小的变量\r\n\r\n> 在自动转换的过程中：\r\nbyte short char 这三种类型并列最小\r\n他们之间相互运算统一转为int\r\n除此之外从小到大顺序如下：\r\nint long float double\r\n注意：boolean不会和其他七种类型相互运算\r\n注意：char型和其他基本数据类型运算时，是使用它背后的unicode编码来进行运算的\r\n\r\n11.强制类型转换\r\n容量大的数据往容量小的类型转换，只需要使用一对小括号(目标类型)，就可以完成强制类型转换\r\n\r\n12.String和其他数据类型只能使用+进行运算，+不是加法，而是拼接，首先将其他数据类型转为字符串，然后和当前字符串拼接，返回拼接后的字符串\r\n\r\n13.++和--\r\n++表示自增1\r\n--表示自减1\r\n++和--可以放在变量的前面或者后面，如果放到前面，则是先自增自减，然后使用，如果放到后面，则是先使用变量，然后再自增自减	1	0	0	f	2021-04-22 22:56:43.976688	2021-04-22 22:56:47.36461	1	#JavaJava技术分类JavaSE----标准版JavaEE----企业版网络开发JavaME----移动版已淘汰诺基亚的塞班系统Java语言的特点①面向对象语言的发展始终都是朝着人类容易理解的方向在发展②跨平台jvm----Java的虚拟机，它是Java程序运行的基础平台jre----Java运行环境，它包含了jvm，还包含程序运行所必须的一些代码jdk----Java开发环境，它包含了jre，还包含一些编译和运行的工具③健壮性垃圾回收器GC----它是一个低级别的线程，它在cpu不怎么繁忙的时候出来工作，检查内存中有没有垃圾，如果有，就释放.–配置环境变量1.新增：JAVA_HOME值：jdk安装的根目录（注意：如果这个文件夹下有bin文件夹，那么这个文件夹就是jdk根目录）2.修改变量：Path在Path中追加：%JAVA_HOME%\\bin3.新增变量：CLASSPATH值：.,%JAVA_HOME%\\lib1.Java第一步打开编译文本notepad++，输入代码：classhello{publicstaticvoidmain(String[]args){System.out.println(&amp;quot;HelloWorld!&amp;quot;)}}保存为hello.java文件然后打开命令行，进行保存文件的路径，输入javachello.java然后文件旁边会生成一个后缀为class的文件，然后再命令行输入javahelloHelloWorld！就打印出来了。关于cmd窗口的常用命令e：-----直接进入e盘根目录（盘符：可以进入指定盘符）dir-----查看当前文件夹下的所有内容cd路径-----进入到指定的文件夹cd…-----返回上层目录md-----创建文件夹在cmd窗口下编译运行java程序的命令首先进入java原文件所在目录javac文件名.java-----将原文件编译出字节码文件java类名-----执行该java类2.在java中，使用class关键字来定义一个类格式：class类名{}注意：类名首字母大写，当前文件的文件名于类名一致3.所有的程序都是从main方法作为入口开始执行的（注意：方法就是函数的意思），main的固定格式：publicstaticvoidmain(String[]args){}在java中严格区分大小写，每一行代码都必须以;结尾4.打印语句的固定格式：System.out.println(字符串);注意：println方法是打印并换行5.注释以/开头，以/结尾，可以注释一端代码//可以注释一行代码6.java中的8种基本数据类型整型：byteshortintlong取值范围：byte------27到27-1short------215到215-1int------231到231-1long------263到263-1浮点型：floatdouble取值范围：float------2128到2127double-------21024到21023注意：所有的整数，默认类型是int，所有的浮点数，默认类型是double字符型：charchar-----表示一个unicode编码中的单个符号，我们使用一对单引号，来表示其中一个字符注意：如果需要存放多个字符，则使用字符串类型String，它使用一对双引号包着若干个字符注意：\\在java中有特殊的含义，这叫转义字符\\u可以加四位的十六进制数表示该数对应unicode编码中的某个字符\\n表示一个换行符\\t表示一个缩进符布尔型：booleanboolean-----它只有两个值true和false表示正确和错误一般用来分支判断和循环语句中7.在java中，凡是自己起名字的地方称为“标识符”标识符命名规范①见名知意（建议使用单词）②变量名和方法名：首字母小写，后面每个单词首字母大写，其余字母小写（驼峰原则）③类名：首字母大写，后面每个单词首字母大写，其余字母小写④常量名：全大写⑤包名：全小写⑥所有的标识符都必须以字母数字下划线_和$构成，不能以数字开头⑦不能是java的关键字，但可以包含java关键字8.局部变量凡是定义在方法中的变量就是局部变量，局部变量的作用范围是它所定义的当前这一对大括号9.成员变量凡是定义在方法外面的变量就是成员变量所有的成员变量都有默认的初始化值：整型都是0浮点型是0.0字符型是空字符布尔型是false所有的局部变量必须手动赋初始化值，否则无法使用d10.自动类型转换1.不同类型的数值在相互运算的时候，会首先转为相同的类型然后再运算2.等号=作为一个赋值运算符，它会将其右边的值赋给左边的变量，如果左右两边类型不一致，也会发生类型转换注意：等号右边容量小的可以赋给等号左边容量大的变量3.容量小的数据类型会自动往容量大的数据类型转换4.在赋值运算符=的右边容量大的类型无法赋值给等号左边容量小的变量在自动转换的过程中：byteshortchar这三种类型并列最小他们之间相互运算统一转为int除此之外从小到大顺序如下：intlongfloatdouble注意：boolean不会和其他七种类型相互运算注意：char型和其他基本数据类型运算时，是使用它背后的unicode编码来进行运算的11.强制类型转换容量大的数据往容量小的类型转换，只需要使用一对小括号(目标类型)，就可以完成强制类型转换12.String和其他数据类型只能使用+进行运算，+不是加法，而是拼接，首先将其他数据类型转为字符串，然后和当前字符串拼接，返回拼接后的字符串13.++和–++表示自增1–表示自减1++和–可以放在变量的前面或者后面，如果放到前面，则是先自增自减，然后使用，如果放到后面，则是先使用变量，然后再自增自减
4	<p>项目完成了，开心😀</p>\n<p><img src="https://cdn.zhoupb.com/image/upload/e918fb7350af4ec27177a299b47ad663.png" alt="image.png"></p>\n	项目完成了，开心😀\n\n![image.png](https://cdn.zhoupb.com/image/upload/e918fb7350af4ec27177a299b47ad663.png)\n\n	3	0	1	f	2021-04-22 22:16:45.674103	2021-04-22 23:37:06.288657	1	项目完成了，开心😀
6	<p>1 丶 Nginx 怎么实现负载均衡</p>\n<p>这个还是比较简单</p>\n<h2>1.轮询</h2>\n<p>这种是默认的策略，把每个请求按顺序逐一分配到不同的 server，如果 server 挂掉，能自动剔除。</p>\n<pre class="code-block"><code class="hljs">upstream  fengzp.com {   \n    server   192.168.99.100:42000; \n    server   192.168.99.100:42001;  \n}\n</code></pre>\n<h4>2.最少连接</h4>\n<p>把请求分配到连接数最少的 server</p>\n<pre class="code-block"><code class="hljs">upstream  fengzp.com {   \n    least_conn;\n    server   192.168.99.100:42000; \n    server   192.168.99.100:42001;  \n}\n</code></pre>\n<h4>3.权重</h4>\n<p>使用 weight 来指定 server 访问比率，weight 默认是 1。以下配置会是 server2 访问的比例是 server1 的两倍。</p>\n<pre class="code-block"><code class="hljs">upstream  fengzp.com {   \n    server   192.168.99.100:42000 weight=1; \n    server   192.168.99.100:42001 weight=2;  \n}\n</code></pre>\n<h4>4.ip_hash</h4>\n<p>每个请求会按照访问 ip 的 hash 值分配，这样同一客户端连续的 Web 请求都会被分发到同一 server 进行处理，可以解决 session 的问题。如果 server 挂掉，能自动剔除。</p>\n<pre class="code-block"><code class="hljs">upstream  fengzp.com {   \n    ip_hash;\n    server   192.168.99.100:42000; \n    server   192.168.99.100:42001;  \n}\n</code></pre>\n<p>ip_hash 可以和 weight 结合使用。</p>\n<h2>2 丶 Linux 常用的命令</h2>\n<p>参考文章：<a href="https://www.php.cn/linux-415502.html">https://www.php.cn/linux-415502.html</a></p>\n<h2>3 丶微信小程序常用的组件</h2>\n<p>view 丶 text 丶 button 丶 navigator 丶 scroll-view… 等等</p>\n<h2>4 丶 Nginx 怎么配置虚拟主机</h2>\n<p>参考文章：<a href="https://www.php.cn/php-weizijiaocheng-387454.html">https://www.php.cn/php-weizijiaocheng-387454.html</a></p>\n<h2>5 丶 TP5 和 Laravel 框架差异</h2>\n<p>参考文章：<a href="https://www.php.cn/phpkj/thinkphp/422769.html">https://www.php.cn/phpkj/thinkphp/422769.html</a></p>\n<h2>6 丶 TP5 和 Laravel 框架中的数据迁移</h2>\n<p>参考文章：</p>\n<p><a href="https://www.php.cn/js-tutorial-386843.html">https://www.php.cn/js-tutorial-386843.html</a></p>\n<p><a href="https://www.php.cn/phpkj/laravel/414216.html">https://www.php.cn/phpkj/laravel/414216.html</a></p>\n<h2>7 丶 RBAC 模型的讲解</h2>\n<p>什么是 RBAC</p>\n<p>RBAC (基于角色的访问控制)：英文名称 Rose base Access Controller 。本博客介绍这种模型的权限系统设计。取消了用户和权限的直接关联，改为通过用户关联角色、角色关联权限的方法来间接地赋予用户权限。从而实现了解耦。RBAC 在发展过程中分为以下几个版本。RBAC0、RBAC1、RBAC2、RBAC3。</p>\n<h2>8 丶 redis 和 memcached 的区别</h2>\n<p>参考文章：<a href="https://www.php.cn/mysql-tutorials-410551.html">https://www.php.cn/mysql-tutorials-410551.html</a></p>\n<h2>9 丶 redis 中的队列</h2>\n<p>关于 redis 队列的实现方式有两种：</p>\n<p>1.生产者消费者模式。</p>\n<p>普通版本：</p>\n<p>比如一个队列里面，生产者 A push 了一个数据进去，消费者 B pop 了这个数据，那个这个队列依旧为空。所以是一对一的。</p>\n<p>至于是先进先出还是先进后出等，可以依照函数 lpush (从队列左边，也就是队首 push 一个数据) rpush (从队列右边也就是队尾 push 一个数据) lpop (同理) rpop 等来控制。</p>\n<p>阻塞版本：</p>\n<p>但是上面的命令都是立即返回的，无论数据有无，关于取数据 lpop 有个增强版本，blpop (block left pop) 阻塞版本，</p>\n<p>使用方法：blpop key1 key2 … keyn 10</p>\n<p>同时预获取多个 key 的值，并设置超时时间为 10s，如果所有 key，有些 key 有 value 就立即返回，如果所有 key 都没有 value 就阻塞 10 秒返回</p>\n<p>2.发布者订阅者模式。</p>\n<p>概念：</p>\n<p>三个用户 A,B,C 同时都订阅了一个 channel 名字叫 msg，然后发布者往 msg 的 channel 里面发布了一个数据，那么 A,B,C 三个用户都会收到该数据。</p>\n<p>注意点：</p>\n<p>很明显，三个用户 ABC 需要阻塞。怎么收到订阅的数据呢，肯定是依靠注册在 redis 里面的回调函数。</p>\n<p>发布的数据不会在 redis 里面复现，意思就是发布了以后，A,B,C 由于种种原因没收到就没收到。</p>\n<h2>10 丶 redis 中的数据类型</h2>\n<p>Redis 支持五种数据类型：string（字符串），hash（哈希），list（列表），set（集合）及 zset (sorted set：有序集合)。</p>\n<h2>11 丶 MySQL 的读写分离操作</h2>\n<p>参考文章：<a href="https://www.php.cn/mysql-tutorials-360278.html">https://www.php.cn/mysql-tutorials-360278.html</a></p>\n<h2>12 丶 MyIsam 与 InnoDB 的区别</h2>\n<p>1、MyISAM：默认表类型，它是基于传统的 ISAM 类型，ISAM 是 Indexed Sequential Access Method (有索引的顺序访问方法) 的缩写，它是存储记录和文件的标准方法。不是事务安全的，而且不支持外键，如果执行大量的 select，insert MyISAM 比较适合。</p>\n<p>2、InnoDB：支持事务安全的引擎，支持外键、行锁、事务是他的最大特点。如果有大量的 update 和 insert，建议使用 InnoDB，特别是针对多个并发和 QPS 较高的情况。</p>\n<p>一、表锁差异</p>\n<p>MyISAM:</p>\n<p>myisam 只支持表级锁，用户在操作 myisam 表时，select，update，delete，insert 语句都会给表自动加锁，如果加锁以后的表满足 insert 并发的情况下，可以在表的尾部插入新的数据。也可以通过 lock table 命令来锁表，这样操作主要是可以模仿事务，但是消耗非常大，一般只在实验演示中使用。</p>\n<p>InnoDB ：</p>\n<p>Innodb 支持事务和行级锁，是 innodb 的最大特色。</p>\n<p>事务的 ACID 属性：atomicity,consistent,isolation,durable。</p>\n<p>并发事务带来的几个问题：更新丢失，脏读，不可重复读，幻读。</p>\n<p>二、数据库文件差异</p>\n<p>MyISAM ：</p>\n<p>myisam 属于堆表</p>\n<p>myisam 在磁盘存储上有三个文件，每个文件名以表名开头，扩展名指出文件类型。</p>\n<p>.frm 用于存储表的定义</p>\n<p>.MYD 用于存放数据</p>\n<p>.MYI 用于存放表索引</p>\n<p>myisam 表还支持三种不同的存储格式：</p>\n<p>静态表 (默认，但是注意数据末尾不能有空格，会被去掉) 丶动态表丶压缩表。</p>\n<p>InnoDB ：</p>\n<p>innodb 属于索引组织表</p>\n<p>innodb 有两种存储方式，共享表空间存储和多表空间存储</p>\n<p>两种存储方式的表结构和 myisam 一样，以表名开头，扩展名是.frm。</p>\n<p>如果使用共享表空间，那么所有表的数据文件和索引文件都保存在一个表空间里，一个表空间可以有多个文件，通过 innodb_data_file_path 和 innodb_data_home_dir 参数设置共享表空间的位置和名字，一般共享表空间的名字叫 ibdata1-n。</p>\n<p>如果使用多表空间，那么每个表都有一个表空间文件用于存储每个表的数据和索引，文件名以表名开头，以.ibd 为扩展名。</p>\n<p>三、索引差异</p>\n<p>1.关于自动增长</p>\n<p>myisam 引擎的自动增长列必须是索引，如果是组合索引，自动增长可以不是第一列，他可以根据前面几列进行排序后递增。</p>\n<p>innodb 引擎的自动增长咧必须是索引，如果是组合索引也必须是组合索引的第一列。</p>\n<p>2.关于主键</p>\n<p>myisam 允许没有任何索引和主键的表存在，</p>\n<p>myisam 的索引都是保存行的地址。</p>\n<p>innodb 引擎如果没有设定主键或者非空唯一索引，就会自动生成一个 6 字节的主键 (用户不可见)</p>\n<p>innodb 的数据是主索引的一部分，附加索引保存的是主索引的值。</p>\n<p>3.关于 count () 函数</p>\n<p>myisam 保存有表的总行数，如果 select count(*) from table; 会直接取出出该值</p>\n<p>innodb 没有保存表的总行数，如果使用 select count(*) from table; 就会遍历整个表，消耗相当大，但是在加了 where 条件后，myisam 和 innodb 处理的方式都一样。</p>\n<p>4.全文索引</p>\n<p>myisam 支持 FULLTEXT 类型的全文索引</p>\n<p>innodb 不支持 FULLTEXT 类型的全文索引（5.6 开始已经支持了），但是 innodb 可以使用 sphinx 插件支持全文索引，并且效果更好。（sphinx 是一个开源软件，提供多种语言的 API 接口，可以优化 mysql 的各种查询）。</p>\n<p>5.delete from table</p>\n<p>使用这条命令时，innodb 不会从新建立表，而是一条一条的删除数据，在 innodb 上如果要清空保存有大量数据的表，最 好不要使用这个命令。(推荐使用 truncate table，不过需要用户有 drop 此表的权限)。</p>\n<p>6.索引保存位置</p>\n<p>myisam 的索引以表名 +.MYI 文件分别保存。</p>\n<p>innodb 的索引和数据一起保存在表空间里。</p>\n<p>##13 丶 MySQL 中的索引有几种</p>\n<p>一、普通索引</p>\n<p>最基本的索引，只是加快了查询速度。</p>\n<p>二、唯一索引</p>\n<p>与普通索引类似，不同的是：索引的列值必须唯一，但允许有空值，也就是 null，如果是组合索引，则列值的组合必须是唯一的。</p>\n<p>三、主键索引</p>\n<p>即我们常用的主键 id, 它是一种特殊的唯一索引，不允许有空值，一般在建表时同时创建主键索引。</p>\n<p>特点：</p>\n<p>1）一张表只有一个主键索引</p>\n<p>2）主键要求自增</p>\n<p>四、组合索引</p>\n<p>即多个字段建立的索引</p>\n<p>五、全文索引</p>\n<p>fulltext</p>\n<p>myisam 引擎支持</p>\n<p>六、外键</p>\n<p>建立外键需要注意的事项：</p>\n<p>1）表引擎必须一样</p>\n<p>2）字段类型必须一样</p>\n<p>3）长度必须一样</p>\n<p>4）存储范围必须一样</p>\n<p>5）约束字段必须在被引用的字段中出现过</p>\n	1 丶 Nginx 怎么实现负载均衡\r\n\r\n这个还是比较简单\r\n\r\n## 1.轮询\r\n\r\n这种是默认的策略，把每个请求按顺序逐一分配到不同的 server，如果 server 挂掉，能自动剔除。\r\n```\r\nupstream  fengzp.com {   \r\n    server   192.168.99.100:42000; \r\n    server   192.168.99.100:42001;  \r\n}\r\n```\r\n#### 2.最少连接\r\n\r\n把请求分配到连接数最少的 server\r\n```\r\nupstream  fengzp.com {   \r\n    least_conn;\r\n    server   192.168.99.100:42000; \r\n    server   192.168.99.100:42001;  \r\n}\r\n```\r\n\r\n#### 3.权重\r\n\r\n使用 weight 来指定 server 访问比率，weight 默认是 1。以下配置会是 server2 访问的比例是 server1 的两倍。\r\n\r\n```\r\nupstream  fengzp.com {   \r\n    server   192.168.99.100:42000 weight=1; \r\n    server   192.168.99.100:42001 weight=2;  \r\n}\r\n```\r\n\r\n#### 4.ip_hash\r\n\r\n每个请求会按照访问 ip 的 hash 值分配，这样同一客户端连续的 Web 请求都会被分发到同一 server 进行处理，可以解决 session 的问题。如果 server 挂掉，能自动剔除。\r\n```\r\nupstream  fengzp.com {   \r\n    ip_hash;\r\n    server   192.168.99.100:42000; \r\n    server   192.168.99.100:42001;  \r\n}\r\n```\r\nip_hash 可以和 weight 结合使用。\r\n\r\n## 2 丶 Linux 常用的命令\r\n\r\n参考文章：https://www.php.cn/linux-415502.html\r\n\r\n## 3 丶微信小程序常用的组件\r\n\r\nview 丶 text 丶 button 丶 navigator 丶 scroll-view...... 等等\r\n\r\n## 4 丶 Nginx 怎么配置虚拟主机\r\n\r\n参考文章：https://www.php.cn/php-weizijiaocheng-387454.html\r\n\r\n## 5 丶 TP5 和 Laravel 框架差异\r\n\r\n参考文章：https://www.php.cn/phpkj/thinkphp/422769.html\r\n\r\n## 6 丶 TP5 和 Laravel 框架中的数据迁移\r\n\r\n参考文章：\r\n\r\nhttps://www.php.cn/js-tutorial-386843.html\r\n\r\nhttps://www.php.cn/phpkj/laravel/414216.html\r\n\r\n## 7 丶 RBAC 模型的讲解\r\n什么是 RBAC\r\n\r\nRBAC (基于角色的访问控制)：英文名称 Rose base Access Controller 。本博客介绍这种模型的权限系统设计。取消了用户和权限的直接关联，改为通过用户关联角色、角色关联权限的方法来间接地赋予用户权限。从而实现了解耦。RBAC 在发展过程中分为以下几个版本。RBAC0、RBAC1、RBAC2、RBAC3。\r\n\r\n## 8 丶 redis 和 memcached 的区别\r\n\r\n参考文章：https://www.php.cn/mysql-tutorials-410551.html\r\n\r\n## 9 丶 redis 中的队列\r\n\r\n关于 redis 队列的实现方式有两种：\r\n\r\n1.生产者消费者模式。\r\n\r\n普通版本：\r\n\r\n比如一个队列里面，生产者 A push 了一个数据进去，消费者 B pop 了这个数据，那个这个队列依旧为空。所以是一对一的。\r\n\r\n至于是先进先出还是先进后出等，可以依照函数 lpush (从队列左边，也就是队首 push 一个数据) rpush (从队列右边也就是队尾 push 一个数据) lpop (同理) rpop 等来控制。\r\n\r\n阻塞版本：\r\n\r\n但是上面的命令都是立即返回的，无论数据有无，关于取数据 lpop 有个增强版本，blpop (block left pop) 阻塞版本，\r\n\r\n使用方法：blpop key1 key2 ... keyn 10\r\n\r\n同时预获取多个 key 的值，并设置超时时间为 10s，如果所有 key，有些 key 有 value 就立即返回，如果所有 key 都没有 value 就阻塞 10 秒返回\r\n\r\n2.发布者订阅者模式。\r\n\r\n概念：\r\n\r\n三个用户 A,B,C 同时都订阅了一个 channel 名字叫 msg，然后发布者往 msg 的 channel 里面发布了一个数据，那么 A,B,C 三个用户都会收到该数据。\r\n\r\n注意点：\r\n\r\n很明显，三个用户 ABC 需要阻塞。怎么收到订阅的数据呢，肯定是依靠注册在 redis 里面的回调函数。\r\n\r\n发布的数据不会在 redis 里面复现，意思就是发布了以后，A,B,C 由于种种原因没收到就没收到。\r\n\r\n## 10 丶 redis 中的数据类型\r\n\r\nRedis 支持五种数据类型：string（字符串），hash（哈希），list（列表），set（集合）及 zset (sorted set：有序集合)。\r\n\r\n\r\n## 11 丶 MySQL 的读写分离操作\r\n\r\n参考文章：https://www.php.cn/mysql-tutorials-360278.html\r\n\r\n\r\n## 12 丶 MyIsam 与 InnoDB 的区别\r\n\r\n1、MyISAM：默认表类型，它是基于传统的 ISAM 类型，ISAM 是 Indexed Sequential Access Method (有索引的顺序访问方法) 的缩写，它是存储记录和文件的标准方法。不是事务安全的，而且不支持外键，如果执行大量的 select，insert MyISAM 比较适合。\r\n\r\n2、InnoDB：支持事务安全的引擎，支持外键、行锁、事务是他的最大特点。如果有大量的 update 和 insert，建议使用 InnoDB，特别是针对多个并发和 QPS 较高的情况。\r\n\r\n一、表锁差异\r\n\r\nMyISAM:\r\n\r\nmyisam 只支持表级锁，用户在操作 myisam 表时，select，update，delete，insert 语句都会给表自动加锁，如果加锁以后的表满足 insert 并发的情况下，可以在表的尾部插入新的数据。也可以通过 lock table 命令来锁表，这样操作主要是可以模仿事务，但是消耗非常大，一般只在实验演示中使用。\r\n\r\nInnoDB ：\r\n\r\nInnodb 支持事务和行级锁，是 innodb 的最大特色。\r\n\r\n事务的 ACID 属性：atomicity,consistent,isolation,durable。\r\n\r\n并发事务带来的几个问题：更新丢失，脏读，不可重复读，幻读。\r\n\r\n二、数据库文件差异\r\n\r\nMyISAM ：\r\n\r\nmyisam 属于堆表\r\n\r\nmyisam 在磁盘存储上有三个文件，每个文件名以表名开头，扩展名指出文件类型。\r\n\r\n.frm 用于存储表的定义\r\n\r\n.MYD 用于存放数据\r\n\r\n.MYI 用于存放表索引\r\n\r\nmyisam 表还支持三种不同的存储格式：\r\n\r\n静态表 (默认，但是注意数据末尾不能有空格，会被去掉) 丶动态表丶压缩表。\r\n\r\nInnoDB ：\r\n\r\ninnodb 属于索引组织表\r\n\r\ninnodb 有两种存储方式，共享表空间存储和多表空间存储\r\n\r\n两种存储方式的表结构和 myisam 一样，以表名开头，扩展名是.frm。\r\n\r\n如果使用共享表空间，那么所有表的数据文件和索引文件都保存在一个表空间里，一个表空间可以有多个文件，通过 innodb_data_file_path 和 innodb_data_home_dir 参数设置共享表空间的位置和名字，一般共享表空间的名字叫 ibdata1-n。\r\n\r\n如果使用多表空间，那么每个表都有一个表空间文件用于存储每个表的数据和索引，文件名以表名开头，以.ibd 为扩展名。\r\n\r\n三、索引差异\r\n\r\n1.关于自动增长\r\n\r\nmyisam 引擎的自动增长列必须是索引，如果是组合索引，自动增长可以不是第一列，他可以根据前面几列进行排序后递增。\r\n\r\ninnodb 引擎的自动增长咧必须是索引，如果是组合索引也必须是组合索引的第一列。\r\n\r\n2.关于主键\r\n\r\nmyisam 允许没有任何索引和主键的表存在，\r\n\r\nmyisam 的索引都是保存行的地址。\r\n\r\ninnodb 引擎如果没有设定主键或者非空唯一索引，就会自动生成一个 6 字节的主键 (用户不可见)\r\n\r\ninnodb 的数据是主索引的一部分，附加索引保存的是主索引的值。\r\n\r\n3.关于 count () 函数\r\n\r\nmyisam 保存有表的总行数，如果 select count(*) from table; 会直接取出出该值\r\n\r\ninnodb 没有保存表的总行数，如果使用 select count(*) from table; 就会遍历整个表，消耗相当大，但是在加了 where 条件后，myisam 和 innodb 处理的方式都一样。\r\n\r\n4.全文索引\r\n\r\nmyisam 支持 FULLTEXT 类型的全文索引\r\n\r\ninnodb 不支持 FULLTEXT 类型的全文索引（5.6 开始已经支持了），但是 innodb 可以使用 sphinx 插件支持全文索引，并且效果更好。（sphinx 是一个开源软件，提供多种语言的 API 接口，可以优化 mysql 的各种查询）。\r\n\r\n5.delete from table\r\n\r\n使用这条命令时，innodb 不会从新建立表，而是一条一条的删除数据，在 innodb 上如果要清空保存有大量数据的表，最 好不要使用这个命令。(推荐使用 truncate table，不过需要用户有 drop 此表的权限)。\r\n\r\n6.索引保存位置\r\n\r\nmyisam 的索引以表名 +.MYI 文件分别保存。\r\n\r\ninnodb 的索引和数据一起保存在表空间里。\r\n\r\n##13 丶 MySQL 中的索引有几种\r\n\r\n一、普通索引\r\n\r\n最基本的索引，只是加快了查询速度。\r\n\r\n二、唯一索引\r\n\r\n与普通索引类似，不同的是：索引的列值必须唯一，但允许有空值，也就是 null，如果是组合索引，则列值的组合必须是唯一的。\r\n\r\n三、主键索引\r\n\r\n即我们常用的主键 id, 它是一种特殊的唯一索引，不允许有空值，一般在建表时同时创建主键索引。\r\n\r\n特点：\r\n\r\n1）一张表只有一个主键索引\r\n\r\n2）主键要求自增\r\n\r\n四、组合索引\r\n\r\n即多个字段建立的索引\r\n\r\n五、全文索引\r\n\r\nfulltext\r\n\r\nmyisam 引擎支持\r\n\r\n六、外键\r\n\r\n建立外键需要注意的事项：\r\n\r\n1）表引擎必须一样\r\n\r\n2）字段类型必须一样\r\n\r\n3）长度必须一样\r\n\r\n4）存储范围必须一样\r\n\r\n5）约束字段必须在被引用的字段中出现过	8	3	0	f	2021-04-22 22:57:58.182136	2021-04-23 08:17:05.566126	1	1丶Nginx怎么实现负载均衡这个还是比较简单1.轮询这种是默认的策略，把每个请求按顺序逐一分配到不同的server，如果server挂掉，能自动剔除。upstreamfengzp.com{server192.168.99.100:42000;server192.168.99.100:42001;}2.最少连接把请求分配到连接数最少的serverupstreamfengzp.com{least_conn;server192.168.99.100:42000;server192.168.99.100:42001;}3.权重使用weight来指定server访问比率，weight默认是1。以下配置会是server2访问的比例是server1的两倍。upstreamfengzp.com{server192.168.99.100:42000weight=1;server192.168.99.100:42001weight=2;}4.ip_hash每个请求会按照访问ip的hash值分配，这样同一客户端连续的Web请求都会被分发到同一server进行处理，可以解决session的问题。如果server挂掉，能自动剔除。upstreamfengzp.com{ip_hash;server192.168.99.100:42000;server192.168.99.100:42001;}ip_hash可以和weight结合使用。2丶Linux常用的命令参考文章：https://www.php.cn/linux-415502.html3丶微信小程序常用的组件view丶text丶button丶navigator丶scroll-view…等等4丶Nginx怎么配置虚拟主机参考文章：https://www.php.cn/php-weizijiaocheng-387454.html5丶TP5和Laravel框架差异参考文章：https://www.php.cn/phpkj/thinkphp/422769.html6丶TP5和Laravel框架中的数据迁移参考文章：https://www.php.cn/js-tutorial-386843.htmlhttps://www.php.cn/phpkj/laravel/414216.html7丶RBAC模型的讲解什么是RBACRBAC(基于角色的访问控制)：英文名称RosebaseAccessController。本博客介绍这种模型的权限系统设计。取消了用户和权限的直接关联，改为通过用户关联角色、角色关联权限的方法来间接地赋予用户权限。从而实现了解耦。RBAC在发展过程中分为以下几个版本。RBAC0、RBAC1、RBAC2、RBAC3。8丶redis和memcached的区别参考文章：https://www.php.cn/mysql-tutorials-410551.html9丶redis中的队列关于redis队列的实现方式有两种：1.生产者消费者模式。普通版本：比如一个队列里面，生产者Apush了一个数据进去，消费者Bpop了这个数据，那个这个队列依旧为空。所以是一对一的。至于是先进先出还是先进后出等，可以依照函数lpush(从队列左边，也就是队首push一个数据)rpush(从队列右边也就是队尾push一个数据)lpop(同理)rpop等来控制。阻塞版本：但是上面的命令都是立即返回的，无论数据有无，关于取数据lpop有个增强版本，blpop(blockleftpop)阻塞版本，使用方法：blpopkey1key2…keyn10同时预获取多个key的值，并设置超时时间为10s，如果所有key，有些key有value就立即返回，如果所有key都没有value就阻塞10秒返回2.发布者订阅者模式。概念：三个用户A,B,C同时都订阅了一个channel名字叫msg，然后发布者往msg的channel里面发布了一个数据，那么A,B,C三个用户都会收到该数据。注意点：很明显，三个用户ABC需要阻塞。怎么收到订阅的数据呢，肯定是依靠注册在redis里面的回调函数。发布的数据不会在redis里面复现，意思就是发布了以后，A,B,C由于种种原因没收到就没收到。10丶redis中的数据类型Redis支持五种数据类型：string（字符串），hash（哈希），list（列表），set（集合）及zset(sortedset：有序集合)。11丶MySQL的读写分离操作参考文章：https://www.php.cn/mysql-tutorials-360278.html12丶MyIsam与InnoDB的区别1、MyISAM：默认表类型，它是基于传统的ISAM类型，ISAM是IndexedSequentialAccessMethod(有索引的顺序访问方法)的缩写，它是存储记录和文件的标准方法。不是事务安全的，而且不支持外键，如果执行大量的select，insertMyISAM比较适合。2、InnoDB：支持事务安全的引擎，支持外键、行锁、事务是他的最大特点。如果有大量的update和insert，建议使用InnoDB，特别是针对多个并发和QPS较高的情况。一、表锁差异MyISAM:myisam只支持表级锁，用户在操作myisam表时，select，update，delete，insert语句都会给表自动加锁，如果加锁以后的表满足insert并发的情况下，可以在表的尾部插入新的数据。也可以通过locktable命令来锁表，这样操作主要是可以模仿事务，但是消耗非常大，一般只在实验演示中使用。InnoDB：Innodb支持事务和行级锁，是innodb的最大特色。事务的ACID属性：atomicity,consistent,isolation,durable。并发事务带来的几个问题：更新丢失，脏读，不可重复读，幻读。二、数据库文件差异MyISAM：myisam属于堆表myisam在磁盘存储上有三个文件，每个文件名以表名开头，扩展名指出文件类型。.frm用于存储表的定义.MYD用于存放数据.MYI用于存放表索引myisam表还支持三种不同的存储格式：静态表(默认，但是注意数据末尾不能有空格，会被去掉)丶动态表丶压缩表。InnoDB：innodb属于索引组织表innodb有两种存储方式，共享表空间存储和多表空间存储两种存储方式的表结构和myisam一样，以表名开头，扩展名是.frm。如果使用共享表空间，那么所有表的数据文件和索引文件都保存在一个表空间里，一个表空间可以有多个文件，通过innodb_data_file_path和innodb_data_home_dir参数设置共享表空间的位置和名字，一般共享表空间的名字叫ibdata1-n。如果使用多表空间，那么每个表都有一个表空间文件用于存储每个表的数据和索引，文件名以表名开头，以.ibd为扩展名。三、索引差异1.关于自动增长myisam引擎的自动增长列必须是索引，如果是组合索引，自动增长可以不是第一列，他可以根据前面几列进行排序后递增。innodb引擎的自动增长咧必须是索引，如果是组合索引也必须是组合索引的第一列。2.关于主键myisam允许没有任何索引和主键的表存在，myisam的索引都是保存行的地址。innodb引擎如果没有设定主键或者非空唯一索引，就会自动生成一个6字节的主键(用户不可见)innodb的数据是主索引的一部分，附加索引保存的是主索引的值。3.关于count()函数myisam保存有表的总行数，如果selectcount(*)fromtable;会直接取出出该值innodb没有保存表的总行数，如果使用selectcount(*)fromtable;就会遍历整个表，消耗相当大，但是在加了where条件后，myisam和innodb处理的方式都一样。4.全文索引myisam支持FULLTEXT类型的全文索引innodb不支持FULLTEXT类型的全文索引（5.6开始已经支持了），但是innodb可以使用sphinx插件支持全文索引，并且效果更好。（sphinx是一个开源软件，提供多种语言的API接口，可以优化mysql的各种查询）。5.deletefromtable使用这条命令时，innodb不会从新建立表，而是一条一条的删除数据，在innodb上如果要清空保存有大量数据的表，最好不要使用这个命令。(推荐使用truncatetable，不过需要用户有drop此表的权限)。6.索引保存位置myisam的索引以表名+.MYI文件分别保存。innodb的索引和数据一起保存在表空间里。##13丶MySQL中的索引有几种一、普通索引最基本的索引，只是加快了查询速度。二、唯一索引与普通索引类似，不同的是：索引的列值必须唯一，但允许有空值，也就是null，如果是组合索引，则列值的组合必须是唯一的。三、主键索引即我们常用的主键id,它是一种特殊的唯一索引，不允许有空值，一般在建表时同时创建主键索引。特点：1）一张表只有一个主键索引2）主键要求自增四、组合索引即多个字段建立的索引五、全文索引fulltextmyisam引擎支持六、外键建立外键需要注意的事项：1）表引擎必须一样2）字段类型必须一样3）长度必须一样4）存储范围必须一样5）约束字段必须在被引用的字段中出现过
7	<h1>前言</h1>\n<p>由于第5天真的没啥事干，就单纯看代码，因此就没写日记啦哈哈。不过今天呢还是有学习到一些东西的，这个在实际开发中才会遇到的，也跟大家分享一下</p>\n<h1>早上</h1>\n<p>在大家的印象里，后端开发应该只负载后端的数据提供，写写接口而已，在我们公司不存在这回事啊，前端后端测试甚至运维都得弄。今天早上我就干的是运维应该做的事<br>\n导师提交了代码到仓库上，让我去合并代码和打包部署，好像大家觉得应该挺简单的一件事的吧，就合并打包部署而已没啥难的。可我们公司是使用SVN来进行项目的版本管理的，并且该项目就一个分支，分支上有两个文件夹，一个 trunks，一个dev，trunks是上线的各种tag，dev则是开发人员开发的地方。最重要的是初次使用SVN不习惯的，不知道他实际的流程应该是怎样的，接着了解到今天做的事和之前学习Git想的还是有出入的，先说下今天大概的操作流程吧：<br>\n&gt;1.公司使用SVN来进行版本管理的，项目仓库上有两个分支，trunks和dev，第一步通常是把仓库的东西都检出(拉取)下来；<br>\n2.然后在本地的dev进行开发，当开发完毕后，需要提交到仓库的dev上。<br>\n3.接着如果需要合并代码，先更新下本地的trunks，更新完毕；然后在本地的trunks去合并仓库的dev。<br>\n4.假设合并成功，接着提交本地的trunks到仓库的trunks。<br>\n5.如果需要打包部署。先更新本地的trunks，接着meven打包本地的trunks；打包成功后，先部署到测试服务器，重新加载应用，查看日志信息。.接着访问测试环境应用，测试下提交的代码是否生效<br>\n6.如果没有问题，则部署到正式服务器上，重新加载应用，查看日志，访问正式环境的应用，查看是否有问题。</p>\n<p>如果公司有运维，其实我们只需要提交代码到开发的分支，接着由项目组长或经理去合并代码，运维打包和部署到服务器上。但后面这两个事呢就由自己来做了，操作很简单，就流程需要理清下</p>\n<h1>下午</h1>\n<p>下午其实也没啥事干，主要是解决客户的问题，包括客户提的bug和使用问题，但绝大多数是使用上的问题。真的，现在真的像在干运维的活，开发任务很少，主要现在公司也没啥简单的开发任务分配给我，可能怕我搞砸吧，毕竟我才入职不到一个星期</p>\n<h1>最后</h1>\n<p>分享就到这啦，这个周末还会单独写一个小结，总结下入职的Java实习生哪些技术需要掌握以及和说下感受吧</p>\n	# 前言\r\n由于第5天真的没啥事干，就单纯看代码，因此就没写日记啦哈哈。不过今天呢还是有学习到一些东西的，这个在实际开发中才会遇到的，也跟大家分享一下\r\n\r\n# 早上\r\n在大家的印象里，后端开发应该只负载后端的数据提供，写写接口而已，在我们公司不存在这回事啊，前端后端测试甚至运维都得弄。今天早上我就干的是运维应该做的事\r\n导师提交了代码到仓库上，让我去合并代码和打包部署，好像大家觉得应该挺简单的一件事的吧，就合并打包部署而已没啥难的。可我们公司是使用SVN来进行项目的版本管理的，并且该项目就一个分支，分支上有两个文件夹，一个 trunks，一个dev，trunks是上线的各种tag，dev则是开发人员开发的地方。最重要的是初次使用SVN不习惯的，不知道他实际的流程应该是怎样的，接着了解到今天做的事和之前学习Git想的还是有出入的，先说下今天大概的操作流程吧：\r\n&gt;1.公司使用SVN来进行版本管理的，项目仓库上有两个分支，trunks和dev，第一步通常是把仓库的东西都检出(拉取)下来；\r\n2.然后在本地的dev进行开发，当开发完毕后，需要提交到仓库的dev上。\r\n3.接着如果需要合并代码，先更新下本地的trunks，更新完毕；然后在本地的trunks去合并仓库的dev。\r\n4.假设合并成功，接着提交本地的trunks到仓库的trunks。\r\n5.如果需要打包部署。先更新本地的trunks，接着meven打包本地的trunks；打包成功后，先部署到测试服务器，重新加载应用，查看日志信息。.接着访问测试环境应用，测试下提交的代码是否生效\r\n6.如果没有问题，则部署到正式服务器上，重新加载应用，查看日志，访问正式环境的应用，查看是否有问题。\r\n\r\n如果公司有运维，其实我们只需要提交代码到开发的分支，接着由项目组长或经理去合并代码，运维打包和部署到服务器上。但后面这两个事呢就由自己来做了，操作很简单，就流程需要理清下\r\n\r\n# 下午\r\n下午其实也没啥事干，主要是解决客户的问题，包括客户提的bug和使用问题，但绝大多数是使用上的问题。真的，现在真的像在干运维的活，开发任务很少，主要现在公司也没啥简单的开发任务分配给我，可能怕我搞砸吧，毕竟我才入职不到一个星期\r\n\r\n# 最后\r\n分享就到这啦，这个周末还会单独写一个小结，总结下入职的Java实习生哪些技术需要掌握以及和说下感受吧	2	0	0	f	2021-04-22 22:59:30.848276	2021-04-22 22:59:41.828022	1	前言由于第5天真的没啥事干，就单纯看代码，因此就没写日记啦哈哈。不过今天呢还是有学习到一些东西的，这个在实际开发中才会遇到的，也跟大家分享一下早上在大家的印象里，后端开发应该只负载后端的数据提供，写写接口而已，在我们公司不存在这回事啊，前端后端测试甚至运维都得弄。今天早上我就干的是运维应该做的事导师提交了代码到仓库上，让我去合并代码和打包部署，好像大家觉得应该挺简单的一件事的吧，就合并打包部署而已没啥难的。可我们公司是使用SVN来进行项目的版本管理的，并且该项目就一个分支，分支上有两个文件夹，一个trunks，一个dev，trunks是上线的各种tag，dev则是开发人员开发的地方。最重要的是初次使用SVN不习惯的，不知道他实际的流程应该是怎样的，接着了解到今天做的事和之前学习Git想的还是有出入的，先说下今天大概的操作流程吧：&gt;1.公司使用SVN来进行版本管理的，项目仓库上有两个分支，trunks和dev，第一步通常是把仓库的东西都检出(拉取)下来；2.然后在本地的dev进行开发，当开发完毕后，需要提交到仓库的dev上。3.接着如果需要合并代码，先更新下本地的trunks，更新完毕；然后在本地的trunks去合并仓库的dev。4.假设合并成功，接着提交本地的trunks到仓库的trunks。5.如果需要打包部署。先更新本地的trunks，接着meven打包本地的trunks；打包成功后，先部署到测试服务器，重新加载应用，查看日志信息。.接着访问测试环境应用，测试下提交的代码是否生效6.如果没有问题，则部署到正式服务器上，重新加载应用，查看日志，访问正式环境的应用，查看是否有问题。如果公司有运维，其实我们只需要提交代码到开发的分支，接着由项目组长或经理去合并代码，运维打包和部署到服务器上。但后面这两个事呢就由自己来做了，操作很简单，就流程需要理清下下午下午其实也没啥事干，主要是解决客户的问题，包括客户提的bug和使用问题，但绝大多数是使用上的问题。真的，现在真的像在干运维的活，开发任务很少，主要现在公司也没啥简单的开发任务分配给我，可能怕我搞砸吧，毕竟我才入职不到一个星期最后分享就到这啦，这个周末还会单独写一个小结，总结下入职的Java实习生哪些技术需要掌握以及和说下感受吧
9	<p>“你一个小时没回我的消息 在我孜孜不倦地骚扰下你终于舍得回我了 你说“去死” 这其中一定有什么含义 我想了很久 去死这简简单单的两个字肯定代表你有与我殉情的想法 为了和我永远在一起即使死也无畏 我感动哭了 不知道你现在在干嘛 我很想你”</p>\n	"你一个小时没回我的消息 在我孜孜不倦地骚扰下你终于舍得回我了 你说“去死” 这其中一定有什么含义 我想了很久 去死这简简单单的两个字肯定代表你有与我殉情的想法 为了和我永远在一起即使死也无畏 我感动哭了 不知道你现在在干嘛 我很想你"	7	1	0	f	2021-04-22 23:20:30.202	2021-04-22 23:42:18.192379	4	“你一个小时没回我的消息在我孜孜不倦地骚扰下你终于舍得回我了你说“去死”这其中一定有什么含义我想了很久去死这简简单单的两个字肯定代表你有与我殉情的想法为了和我永远在一起即使死也无畏我感动哭了不知道你现在在干嘛我很想你”
13	<p>生活是一面镜子，映着每天的一切。不好的一面去掉,正能量的继续。愿明天更美好。<br>\n<img src="https://cdn.zhoupb.com/image/upload/d235ad95fba7d6b6c5821fd8b31a4012.png" alt="image.png"></p>\n	生活是一面镜子，映着每天的一切。不好的一面去掉,正能量的继续。愿明天更美好。\n![image.png](https://cdn.zhoupb.com/image/upload/d235ad95fba7d6b6c5821fd8b31a4012.png)\n	6	0	0	f	2021-04-22 23:27:23.252	2021-04-23 23:11:51.795724	2	生活是一面镜子，映着每天的一切。不好的一面去掉,正能量的继续。愿明天更美好。
10	<p>“今天天气有点冷，想偷你的心却还是没有成功，在床上的我现在的心情就像天气预报，说明天有雨 我都听成明天有你”</p>\n	"今天天气有点冷，想偷你的心却还是没有成功，在床上的我现在的心情就像天气预报，说明天有雨 我都听成明天有你"	5	1	0	f	2021-04-22 23:21:38.81	2021-04-22 23:42:28.038097	4	“今天天气有点冷，想偷你的心却还是没有成功，在床上的我现在的心情就像天气预报，说明天有雨我都听成明天有你”
12	<p>这样的女人据说不好驾驭！腿长屁股翘，天生毒药！<br>\n<img src="https://cdn.zhoupb.com/image/upload/4e0c3861524defa49226e572e2f3daf4.png" alt="image.png"></p>\n	这样的女人据说不好驾驭！腿长屁股翘，天生毒药！\n![image.png](https://cdn.zhoupb.com/image/upload/4e0c3861524defa49226e572e2f3daf4.png)\n	6	0	0	f	2021-04-22 23:26:54.025	2021-04-22 23:34:09.181401	4	这样的女人据说不好驾驭！腿长屁股翘，天生毒药！
15	<p>“今天没有巡逻 在小区里看漂亮的女孩子们戴着口罩去上班 向她们打招呼 她们却不理我 可能因为我只是个保安 保安亭没有暖气 值班一夜的我精疲力尽 只有想起你才会让我有一丝温暖 想做你的保安 保你一生平安”</p>\n	"今天没有巡逻 在小区里看漂亮的女孩子们戴着口罩去上班 向她们打招呼 她们却不理我 可能因为我只是个保安 保安亭没有暖气 值班一夜的我精疲力尽 只有想起你才会让我有一丝温暖 想做你的保安 保你一生平安"\n\n\n	0	0	0	f	2021-04-22 23:30:13.665	2021-04-22 23:30:13.665	4	“今天没有巡逻在小区里看漂亮的女孩子们戴着口罩去上班向她们打招呼她们却不理我可能因为我只是个保安保安亭没有暖气值班一夜的我精疲力尽只有想起你才会让我有一丝温暖想做你的保安保你一生平安”
11	<p>“今天你给了我一拳，因为我在你回宿舍的路上叫了一声honey，你不顾周围的劝阻也想揍我，虽然最后失败了，但我还是看到了你为我对抗世界的决心和勇气！”<br>\n<img src="https://cdn.zhoupb.com/image/upload/b3ead1c3153ca54f7693866c28825adc.jpg" alt="QQ图片20210422232329.jpg"></p>\n	"今天你给了我一拳，因为我在你回宿舍的路上叫了一声honey，你不顾周围的劝阻也想揍我，虽然最后失败了，但我还是看到了你为我对抗世界的决心和勇气！"\n![QQ图片20210422232329.jpg](https://cdn.zhoupb.com/image/upload/b3ead1c3153ca54f7693866c28825adc.jpg)\n	2	0	0	f	2021-04-22 23:23:44.054	2021-04-22 23:27:43.507356	4	“今天你给了我一拳，因为我在你回宿舍的路上叫了一声honey，你不顾周围的劝阻也想揍我，虽然最后失败了，但我还是看到了你为我对抗世界的决心和勇气！”
14	<p>想做一个封面，但是不知道怎么弄封面上的人物，有没有可以直接生成人物的啊动漫也可以跪求急<br>\n<img src="https://cdn.zhoupb.com/image/upload/eda6028af41f303fbda6a4f9a574d272.png" alt="image.png"></p>\n	想做一个封面，但是不知道怎么弄封面上的人物，有没有可以直接生成人物的啊动漫也可以跪求急\n![image.png](https://cdn.zhoupb.com/image/upload/eda6028af41f303fbda6a4f9a574d272.png)\n	1	0	0	t	2021-04-22 23:29:34.221	2021-04-23 17:10:49.028501	2	想做一个封面，但是不知道怎么弄封面上的人物，有没有可以直接生成人物的啊动漫也可以跪求急
8	<p>将xml内容 添加到map中,标签是key,内容是value,然后获取map的内容就行</p>\n<p>// XML格式字符串获取指定标签值</p>\n<pre class="code-block"><code class="code hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Map&lt;String, String&gt; <span class="hljs-title">getXMLStringValue</span><span class="hljs-params">(String xml)</span> </span>{<br />    Map&lt;String, String&gt; rm = <span class="hljs-keyword">new</span> HashMap&lt;String, String&gt;();<br />    StringReader sr = <span class="hljs-keyword">new</span> StringReader(xml);    <span class="hljs-comment">// xml数据源：XML格式字符串</span><br />    InputSource is = <span class="hljs-keyword">new</span> InputSource(sr);<br />    DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();<br />    DocumentBuilder builder = <span class="hljs-keyword">null</span>;<br />    <span class="hljs-keyword">try</span> {<br />        builder = factory.newDocumentBuilder();<br />    } <span class="hljs-keyword">catch</span> (ParserConfigurationException e) {<br />        e.printStackTrace();<br />    }<br />    org.w3c.dom.Document document = <span class="hljs-keyword">null</span>;<br />    <span class="hljs-keyword">try</span> {<br />        document = builder.parse(is);<br />    } <span class="hljs-keyword">catch</span> (SAXException e) {<br />        e.printStackTrace();<br />    } <span class="hljs-keyword">catch</span> (IOException e) {<br />        e.printStackTrace();<br />    }<br />    Element rootElement = document.getDocumentElement();<br />    NodeList nodes = rootElement.getChildNodes();    <span class="hljs-comment">// 一级标签</span><br />    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; nodes.getLength(); i++) {<br />        Node node = nodes.item(i);<br />        <span class="hljs-keyword">if</span> (node.getNodeType() == Node.ELEMENT_NODE) {<br />            <span class="hljs-keyword">if</span> (node.getFirstChild() != <span class="hljs-keyword">null</span>) {<br />                rm.put(node.getNodeName(), node.getFirstChild().getNodeValue());<br />            }<br />            NodeList nodeList = node.getChildNodes();    <span class="hljs-comment">// 二级标签</span><br />            <span class="hljs-keyword">if</span> (nodeList != <span class="hljs-keyword">null</span>) {<br />                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; nodeList.getLength(); j++) {<br />                    Node childnode1 = nodeList.item(j);<br />                    <span class="hljs-keyword">if</span> (childnode1 <span class="hljs-keyword">instanceof</span> Element) {<br />                        <span class="hljs-keyword">if</span> (childnode1.getFirstChild() != <span class="hljs-keyword">null</span>) {<br />                            rm.put(childnode1.getNodeName(), childnode1.getFirstChild().getNodeValue());<br />                        }<br />                        NodeList nodeList1 = childnode1.getChildNodes();    <span class="hljs-comment">// 三级标签</span><br />                        <span class="hljs-keyword">if</span> (nodeList1 != <span class="hljs-keyword">null</span>) {<br />                            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>; k &lt; nodeList1.getLength(); k++) {<br />                                Node childnode2 = nodeList1.item(k);<br />                                <span class="hljs-keyword">if</span> (childnode2 <span class="hljs-keyword">instanceof</span> Element) {<br />                                    <span class="hljs-keyword">if</span> (childnode2.getFirstChild() != <span class="hljs-keyword">null</span>) {<br />                                        rm.put(childnode2.getNodeName(), childnode2.getFirstChild().getNodeValue());<br />                                    }<br />                                    NodeList nodeList2 = childnode2.getChildNodes();<br />                                    <span class="hljs-comment">// 当有四级或以上标签时，在此重复写解析代码</span><br />                                }<br />                            }<br />                        }<br />                    }<br />                }<br />            }<br />        }<br />    }<br />    <span class="hljs-keyword">return</span> rm;<br />}<br /></code></pre>\n	将xml内容 添加到map中,标签是key,内容是value,然后获取map的内容就行\n\n// XML格式字符串获取指定标签值\n```java\npublic static Map<String, String> getXMLStringValue(String xml) {\n    Map<String, String> rm = new HashMap<String, String>();\n    StringReader sr = new StringReader(xml);    // xml数据源：XML格式字符串\n    InputSource is = new InputSource(sr);\n    DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n    DocumentBuilder builder = null;\n    try {\n        builder = factory.newDocumentBuilder();\n    } catch (ParserConfigurationException e) {\n        e.printStackTrace();\n    }\n    org.w3c.dom.Document document = null;\n    try {\n        document = builder.parse(is);\n    } catch (SAXException e) {\n        e.printStackTrace();\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n    Element rootElement = document.getDocumentElement();\n    NodeList nodes = rootElement.getChildNodes();    // 一级标签\n    for (int i = 0; i < nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n        if (node.getNodeType() == Node.ELEMENT_NODE) {\n            if (node.getFirstChild() != null) {\n                rm.put(node.getNodeName(), node.getFirstChild().getNodeValue());\n            }\n            NodeList nodeList = node.getChildNodes();    // 二级标签\n            if (nodeList != null) {\n                for (int j = 0; j < nodeList.getLength(); j++) {\n                    Node childnode1 = nodeList.item(j);\n                    if (childnode1 instanceof Element) {\n                        if (childnode1.getFirstChild() != null) {\n                            rm.put(childnode1.getNodeName(), childnode1.getFirstChild().getNodeValue());\n                        }\n                        NodeList nodeList1 = childnode1.getChildNodes();    // 三级标签\n                        if (nodeList1 != null) {\n                            for (int k = 0; k < nodeList1.getLength(); k++) {\n                                Node childnode2 = nodeList1.item(k);\n                                if (childnode2 instanceof Element) {\n                                    if (childnode2.getFirstChild() != null) {\n                                        rm.put(childnode2.getNodeName(), childnode2.getFirstChild().getNodeValue());\n                                    }\n                                    NodeList nodeList2 = childnode2.getChildNodes();\n                                    // 当有四级或以上标签时，在此重复写解析代码\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return rm;\n}\n```	10	0	0	f	2021-04-22 23:01:04.545985	2021-04-23 08:16:52.681647	1	将xml内容添加到map中,标签是key,内容是value,然后获取map的内容就行//XML格式字符串获取指定标签值publicstaticMap&lt;String,String&gt;getXMLStringValue(Stringxml){Map&lt;String,String&gt;rm=newHashMap&lt;String,String&gt;();StringReadersr=newStringReader(xml);//xml数据源：XML格式字符串InputSourceis=newInputSource(sr);DocumentBuilderFactoryfactory=DocumentBuilderFactory.newInstance();DocumentBuilderbuilder=null;try{builder=factory.newDocumentBuilder();}catch(ParserConfigurationExceptione){e.printStackTrace();}org.w3c.dom.Documentdocument=null;try{document=builder.parse(is);}catch(SAXExceptione){e.printStackTrace();}catch(IOExceptione){e.printStackTrace();}ElementrootElement=document.getDocumentElement();NodeListnodes=rootElement.getChildNodes();//一级标签for(inti=0;i&lt;nodes.getLength();i++){Nodenode=nodes.item(i);if(node.getNodeType()==Node.ELEMENT_NODE){if(node.getFirstChild()!=null){rm.put(node.getNodeName(),node.getFirstChild().getNodeValue());}NodeListnodeList=node.getChildNodes();//二级标签if(nodeList!=null){for(intj=0;j&lt;nodeList.getLength();j++){Nodechildnode1=nodeList.item(j);if(childnode1instanceofElement){if(childnode1.getFirstChild()!=null){rm.put(childnode1.getNodeName(),childnode1.getFirstChild().getNodeValue());}NodeListnodeList1=childnode1.getChildNodes();//三级标签if(nodeList1!=null){for(intk=0;k&lt;nodeList1.getLength();k++){Nodechildnode2=nodeList1.item(k);if(childnode2instanceofElement){if(childnode2.getFirstChild()!=null){rm.put(childnode2.getNodeName(),childnode2.getFirstChild().getNodeValue());}NodeListnodeList2=childnode2.getChildNodes();//当有四级或以上标签时，在此重复写解析代码}}}}}}}}returnrm;}
17	<p><img src="https://cdn.zhoupb.com/image/upload/449f622632bcf144ec685b3ad7714bd7.gif" alt="3da8-kpamyii1977789.gif"></p>\n	![3da8-kpamyii1977789.gif](https://cdn.zhoupb.com/image/upload/449f622632bcf144ec685b3ad7714bd7.gif)\n\n	3	0	0	f	2021-04-22 23:34:52.105908	2021-04-22 23:37:16.094364	1	
2	<p>军人是最可爱的人，也是最值得尊敬的人。他们是峥嵘岁月里的猎豹，更是和平年代里的白鸽。他们默默奉献，不屈不挠，把青春和热血献给祖国，筑起钢铁长城守护人民。让我们一起致敬这群「最可爱的人」！<br>\n<img src="https://7b2.com/wp-content/uploads/thumb/2020/08/fill_w600_h240_g0_mark_v2-94c0fe7f7e9a8bc0c8f3af09d4b2409c_fhd.webp" alt="&quot;军人&quot;"></p>\n	军人是最可爱的人，也是最值得尊敬的人。他们是峥嵘岁月里的猎豹，更是和平年代里的白鸽。他们默默奉献，不屈不挠，把青春和热血献给祖国，筑起钢铁长城守护人民。让我们一起致敬这群「最可爱的人」！\n!["军人"](https://7b2.com/wp-content/uploads/thumb/2020/08/fill_w600_h240_g0_mark_v2-94c0fe7f7e9a8bc0c8f3af09d4b2409c_fhd.webp)	9	1	0	f	2021-04-22 17:49:02.594	2021-04-23 21:18:00.739132	3	军人是最可爱的人，也是最值得尊敬的人。他们是峥嵘岁月里的猎豹，更是和平年代里的白鸽。他们默默奉献，不屈不挠，把青春和热血献给祖国，筑起钢铁长城守护人民。让我们一起致敬这群「最可爱的人」！
20	<p>清早起来打开窗，阳光美美哒！<br>\n看着花儿红，心情美美哒！</p>\n	清早起来打开窗，阳光美美哒！\n看着花儿红，心情美美哒！	4	0	0	f	2021-04-23 08:42:00.392	2021-04-23 08:47:48.594505	5	清早起来打开窗，阳光美美哒！看着花儿红，心情美美哒！
16	<p>人在世界上，必须要超脱自己的幻想，不要去多想，越想越难过，越想会越想不开。牢笼是自己给自己造的，幻想也是自己想出来的。你怀疑别人，不相信别人，会越想越怀疑，越来越不相信;相信别人，不怀疑别人，你就会心神安定。相信别人本身就是正能量，而整天怀疑别人，你就拥有了负能量。</p>\n	人在世界上，必须要超脱自己的幻想，不要去多想，越想越难过，越想会越想不开。牢笼是自己给自己造的，幻想也是自己想出来的。你怀疑别人，不相信别人，会越想越怀疑，越来越不相信;相信别人，不怀疑别人，你就会心神安定。相信别人本身就是正能量，而整天怀疑别人，你就拥有了负能量。\n	8	3	0	f	2021-04-22 23:31:34.775	2021-04-23 23:11:47.525097	2	人在世界上，必须要超脱自己的幻想，不要去多想，越想越难过，越想会越想不开。牢笼是自己给自己造的，幻想也是自己想出来的。你怀疑别人，不相信别人，会越想越怀疑，越来越不相信;相信别人，不怀疑别人，你就会心神安定。相信别人本身就是正能量，而整天怀疑别人，你就拥有了负能量。
21	<p>测试</p>\n	测试	1	0	1	f	2021-04-24 08:42:42.486374	2021-04-24 08:43:33.574316	3	测试
\.


--
-- Data for Name: share_reply; Type: TABLE DATA; Schema: public; Owner: community
--

COPY public.share_reply (id, content_markdown, content_html, parent_id, vote_count, deleted, create_time, update_time, user_id, share_id) FROM stdin;
2	推荐java	<p>推荐java</p>\n	-1	1	f	2021-04-22 21:00:49.942	2021-04-22 21:01:02.641465	2	3
4	一起开心😊	<p>一起开心😊</p>\n	-1	0	f	2021-04-22 22:18:35.556	2021-04-22 22:18:35.556	2	4
16	满满的正能量	<p>满满的正能量</p>\n	-1	0	t	2021-04-23 08:38:31.116	2021-04-23 08:48:30.838243	5	16
17	向军人致敬	<p>向军人致敬</p>\n	-1	0	t	2021-04-23 08:46:19.349	2021-04-23 09:52:14.454902	5	2
19	这是一	<p>这是一</p>\n	-1	0	f	2021-04-24 08:43:41.69326	2021-04-24 08:43:41.69326	3	21
\.


--
-- Data for Name: share_vote; Type: TABLE DATA; Schema: public; Owner: community
--

COPY public.share_vote (id, share_id, reply_id, create_time, user_id, is_up, deleted, update_time) FROM stdin;
1	3	-1	2021-04-22 21:00:52.62	2	t	f	2021-04-22 21:00:52.62
2	-1	2	2021-04-22 21:01:02.562	2	t	f	2021-04-22 21:01:02.562
3	9	-1	2021-04-22 23:42:17.756542	1	t	f	2021-04-22 23:42:17.756542
4	10	-1	2021-04-22 23:42:25.150417	1	t	t	2021-04-22 23:42:25.150417
5	10	-1	2021-04-22 23:42:27.600464	1	t	f	2021-04-22 23:42:27.600464
6	16	-1	2021-04-22 23:42:31.841559	1	f	t	2021-04-22 23:42:32.95259
8	6	-1	2021-04-22 23:46:31.903	2	f	t	2021-04-22 23:46:35.207
9	6	-1	2021-04-22 23:46:38.086	2	f	t	2021-04-22 23:46:47.52
10	6	-1	2021-04-22 23:46:48.911	2	t	f	2021-04-22 23:46:48.911
11	2	-1	2021-04-23 08:50:03.82	5	t	f	2021-04-23 08:52:32.179
12	-1	17	2021-04-23 08:53:11.921	5	f	f	2021-04-23 08:53:58.457
7	16	-1	2021-04-22 23:42:54.10837	1	t	f	2021-04-23 23:11:48.224
\.


--
-- Data for Name: user; Type: TABLE DATA; Schema: public; Owner: community
--

COPY public."user" (id, username, password, email, email_active, is_admin, deleted, create_time, update_time) FROM stdin;
1	zhoupb	$2a$10$a8Q.MkiYA0TXZ7dVvJ1Lt.q1sfKrAqm4pUVdFI07hH6I30kl1cNAW	zhoupb@zhoupb.com	f	f	f	2021-04-22 17:29:04.742879	2021-04-22 17:29:04.742879
2	wank	$2a$10$E75EhYmFic4YpqUlMEHgrOK/8UUxMIucJ1D9Unjp9uuL0Ewp0L6SO	3088055212@qq.com	f	f	f	2021-04-22 17:40:23.29	2021-04-22 17:40:23.291
3	Dluo	$2a$10$sDPgbDdvRMfnN7nk5Twn3OJS6qoe4JQtuAB2wsNoK3Ha9jAkz.wiG	945223951@qq.com	f	t	f	2021-04-22 17:44:04.369	2021-04-22 17:44:04.369
4	yong	$2a$10$m9/5BDcZf9L6k3mO6P5knO5px57MBF/L5S14yutfPO.ZjM6fNA7rC	1111@11111.com	f	t	f	2021-04-22 23:18:21.747	2021-04-24 08:29:51.396232
5	tang	$2a$10$hPSw0ppmTu7tIzCrnzusqOYLTXQrC8xogts6tDuvfhrHBEkDywtCG	1231313123@qq.com	f	f	t	2021-04-23 07:53:42.13	2021-04-24 08:30:06.925725
\.


--
-- Data for Name: user_profile; Type: TABLE DATA; Schema: public; Owner: community
--

COPY public.user_profile (id, introduction, avatar, deleted, create_time, update_time, user_id) FROM stdin;
1	\N	https://cdn.zhoupb.com/image/avatar.jpg	f	2021-04-22 17:29:04.776281	2021-04-22 17:29:04.776281	1
3	\N	https://cdn.zhoupb.com/image/avatar.jpg	f	2021-04-22 17:44:04.41	2021-04-22 17:44:04.41	3
4	\N	https://cdn.zhoupb.com/image/avatar.jpg	f	2021-04-22 23:18:21.775	2021-04-22 23:18:21.775	4
5	\N	https://cdn.zhoupb.com/image/avatar.jpg	f	2021-04-23 07:53:42.161	2021-04-23 07:53:42.161	5
2	\N	https://cdn.zhoupb.com/image/avatar.jpg	f	2021-04-22 17:40:23.326	2021-04-22 17:40:23.326	2
\.


--
-- Name: blog_id_seq; Type: SEQUENCE SET; Schema: public; Owner: community
--

SELECT pg_catalog.setval('public.blog_id_seq', 19, true);


--
-- Name: blog_reply_id_seq; Type: SEQUENCE SET; Schema: public; Owner: community
--

SELECT pg_catalog.setval('public.blog_reply_id_seq', 10, true);


--
-- Name: blog_vote_id_seq; Type: SEQUENCE SET; Schema: public; Owner: community
--

SELECT pg_catalog.setval('public.blog_vote_id_seq', 14, true);


--
-- Name: discussion_id_seq; Type: SEQUENCE SET; Schema: public; Owner: community
--

SELECT pg_catalog.setval('public.discussion_id_seq', 16, true);


--
-- Name: discussion_reply_id_seq; Type: SEQUENCE SET; Schema: public; Owner: community
--

SELECT pg_catalog.setval('public.discussion_reply_id_seq', 7, true);


--
-- Name: discussion_vote_id_seq; Type: SEQUENCE SET; Schema: public; Owner: community
--

SELECT pg_catalog.setval('public.discussion_vote_id_seq', 5, true);


--
-- Name: problem_answer_id_seq; Type: SEQUENCE SET; Schema: public; Owner: community
--

SELECT pg_catalog.setval('public.problem_answer_id_seq', 9, true);


--
-- Name: problem_id_seq; Type: SEQUENCE SET; Schema: public; Owner: community
--

SELECT pg_catalog.setval('public.problem_id_seq', 10, true);


--
-- Name: problem_vote_id_seq; Type: SEQUENCE SET; Schema: public; Owner: community
--

SELECT pg_catalog.setval('public.problem_vote_id_seq', 4, true);


--
-- Name: share_id_seq; Type: SEQUENCE SET; Schema: public; Owner: community
--

SELECT pg_catalog.setval('public.share_id_seq', 21, true);


--
-- Name: share_vote_id_seq; Type: SEQUENCE SET; Schema: public; Owner: community
--

SELECT pg_catalog.setval('public.share_vote_id_seq', 12, true);


--
-- Name: user_id_seq; Type: SEQUENCE SET; Schema: public; Owner: community
--

SELECT pg_catalog.setval('public.user_id_seq', 5, true);


--
-- Name: user_profile_id_seq; Type: SEQUENCE SET; Schema: public; Owner: community
--

SELECT pg_catalog.setval('public.user_profile_id_seq', 5, true);


--
-- Name: blog blog_pkey; Type: CONSTRAINT; Schema: public; Owner: community
--

ALTER TABLE ONLY public.blog
    ADD CONSTRAINT blog_pkey PRIMARY KEY (id);


--
-- Name: blog_reply blog_reply_pkey; Type: CONSTRAINT; Schema: public; Owner: community
--

ALTER TABLE ONLY public.blog_reply
    ADD CONSTRAINT blog_reply_pkey PRIMARY KEY (id);


--
-- Name: blog_vote blog_vote_pkey; Type: CONSTRAINT; Schema: public; Owner: community
--

ALTER TABLE ONLY public.blog_vote
    ADD CONSTRAINT blog_vote_pkey PRIMARY KEY (id);


--
-- Name: discussion discussion_pkey; Type: CONSTRAINT; Schema: public; Owner: community
--

ALTER TABLE ONLY public.discussion
    ADD CONSTRAINT discussion_pkey PRIMARY KEY (id);


--
-- Name: discussion_reply discussion_reply_pkey; Type: CONSTRAINT; Schema: public; Owner: community
--

ALTER TABLE ONLY public.discussion_reply
    ADD CONSTRAINT discussion_reply_pkey PRIMARY KEY (id);


--
-- Name: discussion_vote discussion_vote_pkey; Type: CONSTRAINT; Schema: public; Owner: community
--

ALTER TABLE ONLY public.discussion_vote
    ADD CONSTRAINT discussion_vote_pkey PRIMARY KEY (id);


--
-- Name: problem_answer problem_answer_pkey; Type: CONSTRAINT; Schema: public; Owner: community
--

ALTER TABLE ONLY public.problem_answer
    ADD CONSTRAINT problem_answer_pkey PRIMARY KEY (id);


--
-- Name: problem problem_pkey; Type: CONSTRAINT; Schema: public; Owner: community
--

ALTER TABLE ONLY public.problem
    ADD CONSTRAINT problem_pkey PRIMARY KEY (id);


--
-- Name: problem_vote problem_vote_pkey; Type: CONSTRAINT; Schema: public; Owner: community
--

ALTER TABLE ONLY public.problem_vote
    ADD CONSTRAINT problem_vote_pkey PRIMARY KEY (id);


--
-- Name: share share_pkey; Type: CONSTRAINT; Schema: public; Owner: community
--

ALTER TABLE ONLY public.share
    ADD CONSTRAINT share_pkey PRIMARY KEY (id);


--
-- Name: share_reply share_reply_pkey; Type: CONSTRAINT; Schema: public; Owner: community
--

ALTER TABLE ONLY public.share_reply
    ADD CONSTRAINT share_reply_pkey PRIMARY KEY (id);


--
-- Name: share_vote share_vote_pkey; Type: CONSTRAINT; Schema: public; Owner: community
--

ALTER TABLE ONLY public.share_vote
    ADD CONSTRAINT share_vote_pkey PRIMARY KEY (id);


--
-- Name: user user_pkey; Type: CONSTRAINT; Schema: public; Owner: community
--

ALTER TABLE ONLY public."user"
    ADD CONSTRAINT user_pkey PRIMARY KEY (id);


--
-- Name: user_profile user_profile_pkey; Type: CONSTRAINT; Schema: public; Owner: community
--

ALTER TABLE ONLY public.user_profile
    ADD CONSTRAINT user_profile_pkey PRIMARY KEY (id);


--
-- Name: user user_username_key; Type: CONSTRAINT; Schema: public; Owner: community
--

ALTER TABLE ONLY public."user"
    ADD CONSTRAINT user_username_key UNIQUE (username);


--
-- PostgreSQL database dump complete
--

--
-- Database "postgres" dump
--

\connect postgres

--
-- PostgreSQL database dump
--

-- Dumped from database version 13.1 (Debian 13.1-1.pgdg100+1)
-- Dumped by pg_dump version 13.1 (Debian 13.1-1.pgdg100+1)

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

--
-- PostgreSQL database dump complete
--

--
-- Database "test" dump
--

--
-- PostgreSQL database dump
--

-- Dumped from database version 13.1 (Debian 13.1-1.pgdg100+1)
-- Dumped by pg_dump version 13.1 (Debian 13.1-1.pgdg100+1)

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

--
-- Name: test; Type: DATABASE; Schema: -; Owner: community
--

CREATE DATABASE test WITH TEMPLATE = template0 ENCODING = 'UTF8' LOCALE = 'en_US.utf8';


ALTER DATABASE test OWNER TO community;

\connect test

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- Name: user; Type: TABLE; Schema: public; Owner: community
--

CREATE TABLE public."user" (
    id bigint NOT NULL,
    name character varying(254) NOT NULL,
    create_time timestamp with time zone NOT NULL
);


ALTER TABLE public."user" OWNER TO community;

--
-- Data for Name: user; Type: TABLE DATA; Schema: public; Owner: community
--

COPY public."user" (id, name, create_time) FROM stdin;
\.


--
-- Name: user user_pkey; Type: CONSTRAINT; Schema: public; Owner: community
--

ALTER TABLE ONLY public."user"
    ADD CONSTRAINT user_pkey PRIMARY KEY (id);


--
-- PostgreSQL database dump complete
--

--
-- PostgreSQL database cluster dump complete
--

